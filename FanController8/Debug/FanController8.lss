
FanController8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ea  00800100  000029d6  00002a6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ac  008001ea  008001ea  00002b54  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002b54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004e0  00000000  00000000  00002bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008c32  00000000  00000000  000030a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000027f1  00000000  00000000  0000bcda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000054e7  00000000  00000000  0000e4cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f7c  00000000  00000000  000139b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002d28  00000000  00000000  00014930  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000588d  00000000  00000000  00017658  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000db8  00000000  00000000  0001cee5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
       8:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
       c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      10:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      14:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      18:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      1c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      20:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      24:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      28:	0c 94 83 06 	jmp	0xd06	; 0xd06 <__vector_10>
      2c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      30:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      34:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      38:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      3c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      40:	0c 94 32 0f 	jmp	0x1e64	; 0x1e64 <__vector_16>
      44:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__vector_17>
      48:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__vector_18>
      4c:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__vector_19>
      50:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <__vector_20>
      54:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      58:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      5c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      60:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      64:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      68:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      6c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      70:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      74:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      78:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      7c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      80:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__vector_32>
      84:	0c 94 7e 0f 	jmp	0x1efc	; 0x1efc <__vector_33>
      88:	0c 94 89 0f 	jmp	0x1f12	; 0x1f12 <__vector_34>
      8c:	0c 94 e6 0e 	jmp	0x1dcc	; 0x1dcc <__vector_35>
      90:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <__vector_36>
      94:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      98:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      9c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      a0:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      a4:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      a8:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__bad_interrupt>
      ac:	97 07       	cpc	r25, r23
      ae:	c3 07       	cpc	r28, r19
      b0:	08 09       	sbc	r16, r8
      b2:	c3 07       	cpc	r28, r19
      b4:	08 09       	sbc	r16, r8
      b6:	07 08       	sbc	r0, r7
      b8:	2b 08       	sbc	r2, r11
      ba:	08 09       	sbc	r16, r8
      bc:	99 08       	sbc	r9, r9
      be:	ab 08       	sbc	r10, r11
      c0:	ac 10       	cpse	r10, r12
      c2:	cf 11       	cpse	r28, r15
      c4:	cf 11       	cpse	r28, r15
      c6:	cf 11       	cpse	r28, r15
      c8:	cf 11       	cpse	r28, r15
      ca:	cf 11       	cpse	r28, r15
      cc:	cf 11       	cpse	r28, r15
      ce:	cf 11       	cpse	r28, r15
      d0:	ac 10       	cpse	r10, r12
      d2:	cf 11       	cpse	r28, r15
      d4:	cf 11       	cpse	r28, r15
      d6:	cf 11       	cpse	r28, r15
      d8:	cf 11       	cpse	r28, r15
      da:	cf 11       	cpse	r28, r15
      dc:	cf 11       	cpse	r28, r15
      de:	cf 11       	cpse	r28, r15
      e0:	d4 10       	cpse	r13, r4
      e2:	cf 11       	cpse	r28, r15
      e4:	cf 11       	cpse	r28, r15
      e6:	cf 11       	cpse	r28, r15
      e8:	cf 11       	cpse	r28, r15
      ea:	cf 11       	cpse	r28, r15
      ec:	cf 11       	cpse	r28, r15
      ee:	cf 11       	cpse	r28, r15
      f0:	db 10       	cpse	r13, r11
      f2:	cf 11       	cpse	r28, r15
      f4:	cf 11       	cpse	r28, r15
      f6:	cf 11       	cpse	r28, r15
      f8:	cf 11       	cpse	r28, r15
      fa:	cf 11       	cpse	r28, r15
      fc:	cf 11       	cpse	r28, r15
      fe:	cf 11       	cpse	r28, r15
     100:	f0 10       	cpse	r15, r0
     102:	cf 11       	cpse	r28, r15
     104:	cf 11       	cpse	r28, r15
     106:	cf 11       	cpse	r28, r15
     108:	cf 11       	cpse	r28, r15
     10a:	cf 11       	cpse	r28, r15
     10c:	cf 11       	cpse	r28, r15
     10e:	cf 11       	cpse	r28, r15
     110:	0f 11       	cpse	r16, r15
     112:	cf 11       	cpse	r28, r15
     114:	cf 11       	cpse	r28, r15
     116:	cf 11       	cpse	r28, r15
     118:	cf 11       	cpse	r28, r15
     11a:	cf 11       	cpse	r28, r15
     11c:	cf 11       	cpse	r28, r15
     11e:	cf 11       	cpse	r28, r15
     120:	13 11       	cpse	r17, r3
     122:	cf 11       	cpse	r28, r15
     124:	cf 11       	cpse	r28, r15
     126:	cf 11       	cpse	r28, r15
     128:	cf 11       	cpse	r28, r15
     12a:	cf 11       	cpse	r28, r15
     12c:	cf 11       	cpse	r28, r15
     12e:	cf 11       	cpse	r28, r15
     130:	17 11       	cpse	r17, r7
     132:	cf 11       	cpse	r28, r15
     134:	cf 11       	cpse	r28, r15
     136:	cf 11       	cpse	r28, r15
     138:	cf 11       	cpse	r28, r15
     13a:	cf 11       	cpse	r28, r15
     13c:	cf 11       	cpse	r28, r15
     13e:	cf 11       	cpse	r28, r15
     140:	1b 11       	cpse	r17, r11
     142:	cf 11       	cpse	r28, r15
     144:	cf 11       	cpse	r28, r15
     146:	cf 11       	cpse	r28, r15
     148:	cf 11       	cpse	r28, r15
     14a:	cf 11       	cpse	r28, r15
     14c:	cf 11       	cpse	r28, r15
     14e:	cf 11       	cpse	r28, r15
     150:	40 11       	cpse	r20, r0
     152:	cf 11       	cpse	r28, r15
     154:	cf 11       	cpse	r28, r15
     156:	cf 11       	cpse	r28, r15
     158:	cf 11       	cpse	r28, r15
     15a:	cf 11       	cpse	r28, r15
     15c:	cf 11       	cpse	r28, r15
     15e:	cf 11       	cpse	r28, r15
     160:	66 11       	cpse	r22, r6

00000162 <LanguageString>:
     162:	04 03 09 04                                         ....

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	da e0       	ldi	r29, 0x0A	; 10
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61

00000172 <__do_copy_data>:
     172:	11 e0       	ldi	r17, 0x01	; 1
     174:	a0 e0       	ldi	r26, 0x00	; 0
     176:	b1 e0       	ldi	r27, 0x01	; 1
     178:	e6 ed       	ldi	r30, 0xD6	; 214
     17a:	f9 e2       	ldi	r31, 0x29	; 41
     17c:	02 c0       	rjmp	.+4      	; 0x182 <__do_copy_data+0x10>
     17e:	05 90       	lpm	r0, Z+
     180:	0d 92       	st	X+, r0
     182:	aa 3e       	cpi	r26, 0xEA	; 234
     184:	b1 07       	cpc	r27, r17
     186:	d9 f7       	brne	.-10     	; 0x17e <__do_copy_data+0xc>

00000188 <__do_clear_bss>:
     188:	22 e0       	ldi	r18, 0x02	; 2
     18a:	aa ee       	ldi	r26, 0xEA	; 234
     18c:	b1 e0       	ldi	r27, 0x01	; 1
     18e:	01 c0       	rjmp	.+2      	; 0x192 <.do_clear_bss_start>

00000190 <.do_clear_bss_loop>:
     190:	1d 92       	st	X+, r1

00000192 <.do_clear_bss_start>:
     192:	a6 39       	cpi	r26, 0x96	; 150
     194:	b2 07       	cpc	r27, r18
     196:	e1 f7       	brne	.-8      	; 0x190 <.do_clear_bss_loop>
     198:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <main>
     19c:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <_exit>

000001a0 <__bad_interrupt>:
     1a0:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__vector_default>

000001a4 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     1a4:	69 2f       	mov	r22, r25
     1a6:	77 27       	eor	r23, r23
     1a8:	62 30       	cpi	r22, 0x02	; 2
     1aa:	71 05       	cpc	r23, r1
     1ac:	59 f0       	breq	.+22     	; 0x1c4 <CALLBACK_USB_GetDescriptor+0x20>
     1ae:	63 30       	cpi	r22, 0x03	; 3
     1b0:	71 05       	cpc	r23, r1
     1b2:	69 f0       	breq	.+26     	; 0x1ce <CALLBACK_USB_GetDescriptor+0x2a>
     1b4:	61 30       	cpi	r22, 0x01	; 1
     1b6:	71 05       	cpc	r23, r1
     1b8:	09 f5       	brne	.+66     	; 0x1fc <CALLBACK_USB_GetDescriptor+0x58>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     1ba:	82 e1       	ldi	r24, 0x12	; 18
     1bc:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     1be:	e8 ed       	ldi	r30, 0xD8	; 216
     1c0:	f1 e0       	ldi	r31, 0x01	; 1
     1c2:	25 c0       	rjmp	.+74     	; 0x20e <CALLBACK_USB_GetDescriptor+0x6a>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     1c4:	86 e4       	ldi	r24, 0x46	; 70
     1c6:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     1c8:	e2 e9       	ldi	r30, 0x92	; 146
     1ca:	f1 e0       	ldi	r31, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     1cc:	20 c0       	rjmp	.+64     	; 0x20e <CALLBACK_USB_GetDescriptor+0x6a>
		case DTYPE_String:
			switch (DescriptorNumber)
     1ce:	99 27       	eor	r25, r25
     1d0:	81 30       	cpi	r24, 0x01	; 1
     1d2:	91 05       	cpc	r25, r1
     1d4:	49 f0       	breq	.+18     	; 0x1e8 <CALLBACK_USB_GetDescriptor+0x44>
     1d6:	18 f0       	brcs	.+6      	; 0x1de <CALLBACK_USB_GetDescriptor+0x3a>
     1d8:	02 97       	sbiw	r24, 0x02	; 2
     1da:	59 f0       	breq	.+22     	; 0x1f2 <CALLBACK_USB_GetDescriptor+0x4e>
     1dc:	14 c0       	rjmp	.+40     	; 0x206 <CALLBACK_USB_GetDescriptor+0x62>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     1de:	e2 e6       	ldi	r30, 0x62	; 98
     1e0:	f1 e0       	ldi	r31, 0x01	; 1
     1e2:	84 91       	lpm	r24, Z
     1e4:	90 e0       	ldi	r25, 0x00	; 0
					break;
     1e6:	13 c0       	rjmp	.+38     	; 0x20e <CALLBACK_USB_GetDescriptor+0x6a>
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     1e8:	e8 e7       	ldi	r30, 0x78	; 120
     1ea:	f1 e0       	ldi	r31, 0x01	; 1
     1ec:	84 91       	lpm	r24, Z
     1ee:	90 e0       	ldi	r25, 0x00	; 0
					break;
     1f0:	0e c0       	rjmp	.+28     	; 0x20e <CALLBACK_USB_GetDescriptor+0x6a>
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     1f2:	e6 e5       	ldi	r30, 0x56	; 86
     1f4:	f1 e0       	ldi	r31, 0x01	; 1
     1f6:	84 91       	lpm	r24, Z
     1f8:	90 e0       	ldi	r25, 0x00	; 0
					break;
     1fa:	09 c0       	rjmp	.+18     	; 0x20e <CALLBACK_USB_GetDescriptor+0x6a>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	90 e0       	ldi	r25, 0x00	; 0
									)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     200:	e0 e0       	ldi	r30, 0x00	; 0
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	04 c0       	rjmp	.+8      	; 0x20e <CALLBACK_USB_GetDescriptor+0x6a>
	uint16_t    Size    = NO_DESCRIPTOR;
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	90 e0       	ldi	r25, 0x00	; 0
									)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     20a:	e0 e0       	ldi	r30, 0x00	; 0
     20c:	f0 e0       	ldi	r31, 0x00	; 0

			break;
	}

	#if defined(HAS_MULTIPLE_DESCRIPTOR_ADDRESS_SPACES)
	*DescriptorMemorySpace = MEMSPACE_RAM;
     20e:	62 e0       	ldi	r22, 0x02	; 2
     210:	d9 01       	movw	r26, r18
     212:	6c 93       	st	X, r22
	#endif

	*DescriptorAddress = Address;
     214:	da 01       	movw	r26, r20
     216:	ed 93       	st	X+, r30
     218:	fc 93       	st	X, r31
	return Size;
}
     21a:	08 95       	ret

0000021c <saveProfile>:

void saveProfile()
{	
	//int fanProfileEnd = sizeof(currentFanProfile);
	
	eeprom_update_block((void*)g_currentFanProfile, (void*)5, sizeof(g_currentFanProfile));
     21c:	4e e7       	ldi	r20, 0x7E	; 126
     21e:	50 e0       	ldi	r21, 0x00	; 0
     220:	65 e0       	ldi	r22, 0x05	; 5
     222:	70 e0       	ldi	r23, 0x00	; 0
     224:	8c ee       	ldi	r24, 0xEC	; 236
     226:	91 e0       	ldi	r25, 0x01	; 1
     228:	0e 94 c7 14 	call	0x298e	; 0x298e <eeprom_update_block>
     22c:	08 95       	ret

0000022e <useProfileFromEEprom>:

void useProfileFromEEprom()
{
	//int fanProfileEnd = sizeof(currentFanProfile);
	
	eeprom_read_block((void*)g_currentFanProfile, (void*)5, sizeof(g_currentFanProfile));
     22e:	4e e7       	ldi	r20, 0x7E	; 126
     230:	50 e0       	ldi	r21, 0x00	; 0
     232:	65 e0       	ldi	r22, 0x05	; 5
     234:	70 e0       	ldi	r23, 0x00	; 0
     236:	8c ee       	ldi	r24, 0xEC	; 236
     238:	91 e0       	ldi	r25, 0x01	; 1
     23a:	0e 94 af 14 	call	0x295e	; 0x295e <eeprom_read_block>
	getFanPercent();
     23e:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <getFanPercent>
     242:	08 95       	ret

00000244 <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	#if (ARCH == ARCH_AVR8)
		/* Disable watchdog if enabled by bootloader/fuses */
		MCUSR &= ~(1 << WDRF);
     244:	84 b7       	in	r24, 0x34	; 52
     246:	87 7f       	andi	r24, 0xF7	; 247
     248:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	f8 94       	cli
     24e:	a8 95       	wdr
     250:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     254:	88 61       	ori	r24, 0x18	; 24
     256:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     25a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     25e:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	80 e8       	ldi	r24, 0x80	; 128
     264:	0f b6       	in	r0, 0x3f	; 63
     266:	f8 94       	cli
     268:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     26c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     270:	0f be       	out	0x3f, r0	; 63

		/* Disable clock division */
		clock_prescale_set(clock_div_1);

		/* Hardware Initialization */
		USB_Init();
     272:	0e 94 54 06 	call	0xca8	; 0xca8 <USB_Init>
     276:	08 95       	ret

00000278 <EVENT_USB_Device_Connect>:
	#endif
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
     278:	08 95       	ret

0000027a <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
     27a:	08 95       	ret

0000027c <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     27c:	42 e3       	ldi	r20, 0x32	; 50
     27e:	60 e8       	ldi	r22, 0x80	; 128
     280:	82 e0       	ldi	r24, 0x02	; 2
     282:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <Endpoint_ConfigureEndpoint_Prv>
     286:	42 e3       	ldi	r20, 0x32	; 50
     288:	61 e8       	ldi	r22, 0x81	; 129
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <Endpoint_ConfigureEndpoint_Prv>
     290:	42 e0       	ldi	r20, 0x02	; 2
     292:	61 ec       	ldi	r22, 0xC1	; 193
     294:	83 e0       	ldi	r24, 0x03	; 3
     296:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <Endpoint_ConfigureEndpoint_Prv>
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_OUT_EPADDR, EP_TYPE_BULK, CDC_DATA_EPSIZE, 1);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_IN_EPADDR, EP_TYPE_BULK, CDC_DATA_EPSIZE, 1);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_CONTROL_EPADDR, EP_TYPE_INTERRUPT, CDC_CONTROL_EPSIZE, 1);

	/* Reset line encoding baud rates so that the host knows to send new values */
	LineEncoding1.BaudRateBPS = 0;
     29a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
     29e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
     2a2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_start+0x2>
     2a6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_start+0x3>
     2aa:	08 95       	ret

000002ac <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
	/* Determine which interface's Line Coding data is being set from the wIndex parameter */
	void* LineEncodingData = &LineEncoding1;

	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
     2b0:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <USB_ControlRequest+0x1>
     2b4:	81 32       	cpi	r24, 0x21	; 33
     2b6:	29 f0       	breq	.+10     	; 0x2c2 <EVENT_USB_Device_ControlRequest+0x16>
     2b8:	82 32       	cpi	r24, 0x22	; 34
     2ba:	49 f1       	breq	.+82     	; 0x30e <EVENT_USB_Device_ControlRequest+0x62>
     2bc:	80 32       	cpi	r24, 0x20	; 32
     2be:	91 f5       	brne	.+100    	; 0x324 <EVENT_USB_Device_ControlRequest+0x78>
     2c0:	13 c0       	rjmp	.+38     	; 0x2e8 <EVENT_USB_Device_ControlRequest+0x3c>
	{
		case CDC_REQ_GetLineEncoding:
		if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     2c2:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <USB_ControlRequest>
     2c6:	81 3a       	cpi	r24, 0xA1	; 161
     2c8:	69 f5       	brne	.+90     	; 0x324 <EVENT_USB_Device_ControlRequest+0x78>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     2ca:	c8 ee       	ldi	r28, 0xE8	; 232
     2cc:	d0 e0       	ldi	r29, 0x00	; 0
     2ce:	88 81       	ld	r24, Y
     2d0:	87 7f       	andi	r24, 0xF7	; 247
     2d2:	88 83       	st	Y, r24
		{
			Endpoint_ClearSETUP();

			/* Write the line coding data to the control endpoint */
			Endpoint_Write_Control_Stream_LE(LineEncodingData, sizeof(CDC_LineEncoding_t));
     2d4:	67 e0       	ldi	r22, 0x07	; 7
     2d6:	70 e0       	ldi	r23, 0x00	; 0
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	91 e0       	ldi	r25, 0x01	; 1
     2dc:	0e 94 a1 02 	call	0x542	; 0x542 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     2e0:	88 81       	ld	r24, Y
     2e2:	8b 77       	andi	r24, 0x7B	; 123
     2e4:	88 83       	st	Y, r24
     2e6:	1e c0       	rjmp	.+60     	; 0x324 <EVENT_USB_Device_ControlRequest+0x78>
			Endpoint_ClearOUT();
		}

		break;
		case CDC_REQ_SetLineEncoding:
		if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     2e8:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <USB_ControlRequest>
     2ec:	81 32       	cpi	r24, 0x21	; 33
     2ee:	d1 f4       	brne	.+52     	; 0x324 <EVENT_USB_Device_ControlRequest+0x78>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     2f0:	c8 ee       	ldi	r28, 0xE8	; 232
     2f2:	d0 e0       	ldi	r29, 0x00	; 0
     2f4:	88 81       	ld	r24, Y
     2f6:	87 7f       	andi	r24, 0xF7	; 247
     2f8:	88 83       	st	Y, r24
		{
			Endpoint_ClearSETUP();

			/* Read the line coding data in from the host into the global struct */
			Endpoint_Read_Control_Stream_LE(LineEncodingData, sizeof(CDC_LineEncoding_t));
     2fa:	67 e0       	ldi	r22, 0x07	; 7
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	0e 94 37 03 	call	0x66e	; 0x66e <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     306:	88 81       	ld	r24, Y
     308:	8e 77       	andi	r24, 0x7E	; 126
     30a:	88 83       	st	Y, r24
     30c:	0b c0       	rjmp	.+22     	; 0x324 <EVENT_USB_Device_ControlRequest+0x78>
			Endpoint_ClearIN();
		}

		break;
		case CDC_REQ_SetControlLineState:
		if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     30e:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <USB_ControlRequest>
     312:	81 32       	cpi	r24, 0x21	; 33
     314:	39 f4       	brne	.+14     	; 0x324 <EVENT_USB_Device_ControlRequest+0x78>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     316:	e8 ee       	ldi	r30, 0xE8	; 232
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	80 81       	ld	r24, Z
     31c:	87 7f       	andi	r24, 0xF7	; 247
     31e:	80 83       	st	Z, r24
		{
			Endpoint_ClearSETUP();
			Endpoint_ClearStatusStage();
     320:	0e 94 5e 05 	call	0xabc	; 0xabc <Endpoint_ClearStatusStage>
		}

		break;
	}
}
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	08 95       	ret

0000032a <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     32a:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     32c:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <USB_DeviceState>
     330:	94 30       	cpi	r25, 0x04	; 4
     332:	31 f5       	brne	.+76     	; 0x380 <CDC_Device_Flush+0x56>
     334:	84 89       	ldd	r24, Z+20	; 0x14
     336:	95 89       	ldd	r25, Z+21	; 0x15
     338:	a6 89       	ldd	r26, Z+22	; 0x16
     33a:	b7 89       	ldd	r27, Z+23	; 0x17
     33c:	89 2b       	or	r24, r25
     33e:	8a 2b       	or	r24, r26
     340:	8b 2b       	or	r24, r27
     342:	01 f1       	breq	.+64     	; 0x384 <CDC_Device_Flush+0x5a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     344:	81 81       	ldd	r24, Z+1	; 0x01
     346:	8f 70       	andi	r24, 0x0F	; 15
     348:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     34c:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
     350:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	92 2b       	or	r25, r18
     358:	89 2b       	or	r24, r25
     35a:	b1 f0       	breq	.+44     	; 0x388 <CDC_Device_Flush+0x5e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     35c:	e8 ee       	ldi	r30, 0xE8	; 232
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	90 81       	ld	r25, Z
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     362:	80 81       	ld	r24, Z
     364:	8e 77       	andi	r24, 0x7E	; 126
     366:	80 83       	st	Z, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
     368:	95 fd       	sbrc	r25, 5
     36a:	10 c0       	rjmp	.+32     	; 0x38c <CDC_Device_Flush+0x62>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     36c:	0e 94 82 05 	call	0xb04	; 0xb04 <Endpoint_WaitUntilReady>
     370:	81 11       	cpse	r24, r1
     372:	0d c0       	rjmp	.+26     	; 0x38e <CDC_Device_Flush+0x64>
     374:	e8 ee       	ldi	r30, 0xE8	; 232
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	90 81       	ld	r25, Z
     37a:	9e 77       	andi	r25, 0x7E	; 126
     37c:	90 83       	st	Z, r25
     37e:	08 95       	ret
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     380:	82 e0       	ldi	r24, 0x02	; 2
     382:	08 95       	ret
     384:	82 e0       	ldi	r24, 0x02	; 2
     386:	08 95       	ret
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	08 95       	ret
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
     38c:	80 e0       	ldi	r24, 0x00	; 0
}
     38e:	08 95       	ret

00000390 <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     390:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     392:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <USB_DeviceState>
     396:	94 30       	cpi	r25, 0x04	; 4
     398:	99 f4       	brne	.+38     	; 0x3c0 <CDC_Device_USBTask+0x30>
     39a:	84 89       	ldd	r24, Z+20	; 0x14
     39c:	95 89       	ldd	r25, Z+21	; 0x15
     39e:	a6 89       	ldd	r26, Z+22	; 0x16
     3a0:	b7 89       	ldd	r27, Z+23	; 0x17
     3a2:	89 2b       	or	r24, r25
     3a4:	8a 2b       	or	r24, r26
     3a6:	8b 2b       	or	r24, r27
     3a8:	59 f0       	breq	.+22     	; 0x3c0 <CDC_Device_USBTask+0x30>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     3aa:	81 81       	ldd	r24, Z+1	; 0x01
     3ac:	8f 70       	andi	r24, 0x0F	; 15
     3ae:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     3b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
     3b6:	80 ff       	sbrs	r24, 0
     3b8:	03 c0       	rjmp	.+6      	; 0x3c0 <CDC_Device_USBTask+0x30>
     3ba:	cf 01       	movw	r24, r30
	  CDC_Device_Flush(CDCInterfaceInfo);
     3bc:	0e 94 95 01 	call	0x32a	; 0x32a <CDC_Device_Flush>
     3c0:	08 95       	ret

000003c2 <Endpoint_Write_Stream_LE>:
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     3c2:	8f 92       	push	r8
     3c4:	9f 92       	push	r9
     3c6:	af 92       	push	r10
     3c8:	bf 92       	push	r11
     3ca:	cf 92       	push	r12
     3cc:	df 92       	push	r13
     3ce:	ef 92       	push	r14
     3d0:	ff 92       	push	r15
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	8c 01       	movw	r16, r24
     3dc:	eb 01       	movw	r28, r22
     3de:	5a 01       	movw	r10, r20
     3e0:	0e 94 82 05 	call	0xb04	; 0xb04 <Endpoint_WaitUntilReady>
     3e4:	81 11       	cpse	r24, r1
     3e6:	40 c0       	rjmp	.+128    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     3e8:	a1 14       	cp	r10, r1
     3ea:	b1 04       	cpc	r11, r1
     3ec:	39 f0       	breq	.+14     	; 0x3fc <Endpoint_Write_Stream_LE+0x3a>
     3ee:	f5 01       	movw	r30, r10
     3f0:	80 81       	ld	r24, Z
     3f2:	91 81       	ldd	r25, Z+1	; 0x01
     3f4:	c8 1b       	sub	r28, r24
     3f6:	d9 0b       	sbc	r29, r25
     3f8:	08 0f       	add	r16, r24
     3fa:	19 1f       	adc	r17, r25
     3fc:	20 97       	sbiw	r28, 0x00	; 0
     3fe:	99 f1       	breq	.+102    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     400:	e1 2c       	mov	r14, r1
     402:	f1 2c       	mov	r15, r1
     404:	0f 2e       	mov	r0, r31
     406:	f8 ee       	ldi	r31, 0xE8	; 232
     408:	8f 2e       	mov	r8, r31
     40a:	91 2c       	mov	r9, r1
     40c:	f0 2d       	mov	r31, r0
     40e:	0f 2e       	mov	r0, r31
     410:	f1 ef       	ldi	r31, 0xF1	; 241
     412:	cf 2e       	mov	r12, r31
     414:	d1 2c       	mov	r13, r1
     416:	f0 2d       	mov	r31, r0
     418:	f4 01       	movw	r30, r8
     41a:	80 81       	ld	r24, Z
     41c:	85 fd       	sbrc	r24, 5
     41e:	16 c0       	rjmp	.+44     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     420:	80 81       	ld	r24, Z
     422:	8e 77       	andi	r24, 0x7E	; 126
     424:	80 83       	st	Z, r24
     426:	0e 94 2e 09 	call	0x125c	; 0x125c <USB_USBTask>
     42a:	a1 14       	cp	r10, r1
     42c:	b1 04       	cpc	r11, r1
     42e:	49 f0       	breq	.+18     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     430:	f5 01       	movw	r30, r10
     432:	80 81       	ld	r24, Z
     434:	91 81       	ldd	r25, Z+1	; 0x01
     436:	e8 0e       	add	r14, r24
     438:	f9 1e       	adc	r15, r25
     43a:	f1 82       	std	Z+1, r15	; 0x01
     43c:	e0 82       	st	Z, r14
     43e:	85 e0       	ldi	r24, 0x05	; 5
     440:	13 c0       	rjmp	.+38     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     442:	0e 94 82 05 	call	0xb04	; 0xb04 <Endpoint_WaitUntilReady>
     446:	88 23       	and	r24, r24
     448:	51 f0       	breq	.+20     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     44a:	0e c0       	rjmp	.+28     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     44c:	f8 01       	movw	r30, r16
     44e:	81 91       	ld	r24, Z+
     450:	8f 01       	movw	r16, r30
     452:	f6 01       	movw	r30, r12
     454:	80 83       	st	Z, r24
     456:	21 97       	sbiw	r28, 0x01	; 1
     458:	ff ef       	ldi	r31, 0xFF	; 255
     45a:	ef 1a       	sub	r14, r31
     45c:	ff 0a       	sbc	r15, r31
     45e:	20 97       	sbiw	r28, 0x00	; 0
     460:	d9 f6       	brne	.-74     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	01 c0       	rjmp	.+2      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	1f 91       	pop	r17
     46e:	0f 91       	pop	r16
     470:	ff 90       	pop	r15
     472:	ef 90       	pop	r14
     474:	df 90       	pop	r13
     476:	cf 90       	pop	r12
     478:	bf 90       	pop	r11
     47a:	af 90       	pop	r10
     47c:	9f 90       	pop	r9
     47e:	8f 90       	pop	r8
     480:	08 95       	ret

00000482 <Endpoint_Read_Stream_LE>:
     482:	8f 92       	push	r8
     484:	9f 92       	push	r9
     486:	af 92       	push	r10
     488:	bf 92       	push	r11
     48a:	cf 92       	push	r12
     48c:	df 92       	push	r13
     48e:	ef 92       	push	r14
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	8c 01       	movw	r16, r24
     49c:	eb 01       	movw	r28, r22
     49e:	5a 01       	movw	r10, r20
     4a0:	0e 94 82 05 	call	0xb04	; 0xb04 <Endpoint_WaitUntilReady>
     4a4:	81 11       	cpse	r24, r1
     4a6:	40 c0       	rjmp	.+128    	; 0x528 <Endpoint_Read_Stream_LE+0xa6>
     4a8:	a1 14       	cp	r10, r1
     4aa:	b1 04       	cpc	r11, r1
     4ac:	39 f0       	breq	.+14     	; 0x4bc <Endpoint_Read_Stream_LE+0x3a>
     4ae:	f5 01       	movw	r30, r10
     4b0:	80 81       	ld	r24, Z
     4b2:	91 81       	ldd	r25, Z+1	; 0x01
     4b4:	c8 1b       	sub	r28, r24
     4b6:	d9 0b       	sbc	r29, r25
     4b8:	08 0f       	add	r16, r24
     4ba:	19 1f       	adc	r17, r25
     4bc:	20 97       	sbiw	r28, 0x00	; 0
     4be:	99 f1       	breq	.+102    	; 0x526 <Endpoint_Read_Stream_LE+0xa4>
     4c0:	e1 2c       	mov	r14, r1
     4c2:	f1 2c       	mov	r15, r1
     4c4:	0f 2e       	mov	r0, r31
     4c6:	f8 ee       	ldi	r31, 0xE8	; 232
     4c8:	8f 2e       	mov	r8, r31
     4ca:	91 2c       	mov	r9, r1
     4cc:	f0 2d       	mov	r31, r0
     4ce:	0f 2e       	mov	r0, r31
     4d0:	f1 ef       	ldi	r31, 0xF1	; 241
     4d2:	cf 2e       	mov	r12, r31
     4d4:	d1 2c       	mov	r13, r1
     4d6:	f0 2d       	mov	r31, r0
     4d8:	f4 01       	movw	r30, r8
     4da:	80 81       	ld	r24, Z
     4dc:	85 fd       	sbrc	r24, 5
     4de:	16 c0       	rjmp	.+44     	; 0x50c <Endpoint_Read_Stream_LE+0x8a>
     4e0:	80 81       	ld	r24, Z
     4e2:	8b 77       	andi	r24, 0x7B	; 123
     4e4:	80 83       	st	Z, r24
     4e6:	0e 94 2e 09 	call	0x125c	; 0x125c <USB_USBTask>
     4ea:	a1 14       	cp	r10, r1
     4ec:	b1 04       	cpc	r11, r1
     4ee:	49 f0       	breq	.+18     	; 0x502 <Endpoint_Read_Stream_LE+0x80>
     4f0:	f5 01       	movw	r30, r10
     4f2:	80 81       	ld	r24, Z
     4f4:	91 81       	ldd	r25, Z+1	; 0x01
     4f6:	e8 0e       	add	r14, r24
     4f8:	f9 1e       	adc	r15, r25
     4fa:	f1 82       	std	Z+1, r15	; 0x01
     4fc:	e0 82       	st	Z, r14
     4fe:	85 e0       	ldi	r24, 0x05	; 5
     500:	13 c0       	rjmp	.+38     	; 0x528 <Endpoint_Read_Stream_LE+0xa6>
     502:	0e 94 82 05 	call	0xb04	; 0xb04 <Endpoint_WaitUntilReady>
     506:	88 23       	and	r24, r24
     508:	51 f0       	breq	.+20     	; 0x51e <Endpoint_Read_Stream_LE+0x9c>
     50a:	0e c0       	rjmp	.+28     	; 0x528 <Endpoint_Read_Stream_LE+0xa6>
     50c:	f6 01       	movw	r30, r12
     50e:	80 81       	ld	r24, Z
     510:	f8 01       	movw	r30, r16
     512:	81 93       	st	Z+, r24
     514:	8f 01       	movw	r16, r30
     516:	21 97       	sbiw	r28, 0x01	; 1
     518:	ff ef       	ldi	r31, 0xFF	; 255
     51a:	ef 1a       	sub	r14, r31
     51c:	ff 0a       	sbc	r15, r31
     51e:	20 97       	sbiw	r28, 0x00	; 0
     520:	d9 f6       	brne	.-74     	; 0x4d8 <Endpoint_Read_Stream_LE+0x56>
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	01 c0       	rjmp	.+2      	; 0x528 <Endpoint_Read_Stream_LE+0xa6>
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	1f 91       	pop	r17
     52e:	0f 91       	pop	r16
     530:	ff 90       	pop	r15
     532:	ef 90       	pop	r14
     534:	df 90       	pop	r13
     536:	cf 90       	pop	r12
     538:	bf 90       	pop	r11
     53a:	af 90       	pop	r10
     53c:	9f 90       	pop	r9
     53e:	8f 90       	pop	r8
     540:	08 95       	ret

00000542 <Endpoint_Write_Control_Stream_LE>:
     542:	af 92       	push	r10
     544:	bf 92       	push	r11
     546:	cf 92       	push	r12
     548:	df 92       	push	r13
     54a:	ef 92       	push	r14
     54c:	ff 92       	push	r15
     54e:	0f 93       	push	r16
     550:	1f 93       	push	r17
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <USB_ControlRequest+0x6>
     55a:	30 91 95 02 	lds	r19, 0x0295	; 0x800295 <USB_ControlRequest+0x7>
     55e:	26 17       	cp	r18, r22
     560:	37 07       	cpc	r19, r23
     562:	58 f0       	brcs	.+22     	; 0x57a <Endpoint_Write_Control_Stream_LE+0x38>
     564:	61 15       	cp	r22, r1
     566:	71 05       	cpc	r23, r1
     568:	39 f4       	brne	.+14     	; 0x578 <Endpoint_Write_Control_Stream_LE+0x36>
     56a:	e8 ee       	ldi	r30, 0xE8	; 232
     56c:	f0 e0       	ldi	r31, 0x00	; 0
     56e:	20 81       	ld	r18, Z
     570:	2e 77       	andi	r18, 0x7E	; 126
     572:	20 83       	st	Z, r18
     574:	9b 01       	movw	r18, r22
     576:	01 c0       	rjmp	.+2      	; 0x57a <Endpoint_Write_Control_Stream_LE+0x38>
     578:	9b 01       	movw	r18, r22
     57a:	a8 2f       	mov	r26, r24
     57c:	b9 2f       	mov	r27, r25
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	e8 ee       	ldi	r30, 0xE8	; 232
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	63 ef       	ldi	r22, 0xF3	; 243
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	42 ef       	ldi	r20, 0xF2	; 242
     58a:	50 e0       	ldi	r21, 0x00	; 0
     58c:	0f 2e       	mov	r0, r31
     58e:	f1 ef       	ldi	r31, 0xF1	; 241
     590:	af 2e       	mov	r10, r31
     592:	b1 2c       	mov	r11, r1
     594:	f0 2d       	mov	r31, r0
     596:	ff 24       	eor	r15, r15
     598:	f3 94       	inc	r15
     59a:	e1 2c       	mov	r14, r1
     59c:	3b c0       	rjmp	.+118    	; 0x614 <Endpoint_Write_Control_Stream_LE+0xd2>
     59e:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <USB_DeviceState>
     5a2:	88 23       	and	r24, r24
     5a4:	09 f4       	brne	.+2      	; 0x5a8 <Endpoint_Write_Control_Stream_LE+0x66>
     5a6:	4d c0       	rjmp	.+154    	; 0x642 <Endpoint_Write_Control_Stream_LE+0x100>
     5a8:	85 30       	cpi	r24, 0x05	; 5
     5aa:	09 f4       	brne	.+2      	; 0x5ae <Endpoint_Write_Control_Stream_LE+0x6c>
     5ac:	4c c0       	rjmp	.+152    	; 0x646 <Endpoint_Write_Control_Stream_LE+0x104>
     5ae:	80 81       	ld	r24, Z
     5b0:	83 fd       	sbrc	r24, 3
     5b2:	4b c0       	rjmp	.+150    	; 0x64a <Endpoint_Write_Control_Stream_LE+0x108>
     5b4:	80 81       	ld	r24, Z
     5b6:	82 fd       	sbrc	r24, 2
     5b8:	3d c0       	rjmp	.+122    	; 0x634 <Endpoint_Write_Control_Stream_LE+0xf2>
     5ba:	80 81       	ld	r24, Z
     5bc:	80 ff       	sbrs	r24, 0
     5be:	2a c0       	rjmp	.+84     	; 0x614 <Endpoint_Write_Control_Stream_LE+0xd2>
     5c0:	eb 01       	movw	r28, r22
     5c2:	88 81       	ld	r24, Y
     5c4:	ea 01       	movw	r28, r20
     5c6:	08 81       	ld	r16, Y
     5c8:	10 e0       	ldi	r17, 0x00	; 0
     5ca:	18 2b       	or	r17, r24
     5cc:	21 15       	cp	r18, r1
     5ce:	31 05       	cpc	r19, r1
     5d0:	b1 f0       	breq	.+44     	; 0x5fe <Endpoint_Write_Control_Stream_LE+0xbc>
     5d2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <USB_Device_ControlEndpointSize>
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	08 17       	cp	r16, r24
     5da:	19 07       	cpc	r17, r25
     5dc:	80 f4       	brcc	.+32     	; 0x5fe <Endpoint_Write_Control_Stream_LE+0xbc>
     5de:	8d 91       	ld	r24, X+
     5e0:	e5 01       	movw	r28, r10
     5e2:	88 83       	st	Y, r24
     5e4:	21 50       	subi	r18, 0x01	; 1
     5e6:	31 09       	sbc	r19, r1
     5e8:	0f 5f       	subi	r16, 0xFF	; 255
     5ea:	1f 4f       	sbci	r17, 0xFF	; 255
     5ec:	21 15       	cp	r18, r1
     5ee:	31 05       	cpc	r19, r1
     5f0:	31 f0       	breq	.+12     	; 0x5fe <Endpoint_Write_Control_Stream_LE+0xbc>
     5f2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <USB_Device_ControlEndpointSize>
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	08 17       	cp	r16, r24
     5fa:	19 07       	cpc	r17, r25
     5fc:	80 f3       	brcs	.-32     	; 0x5de <Endpoint_Write_Control_Stream_LE+0x9c>
     5fe:	c0 90 22 01 	lds	r12, 0x0122	; 0x800122 <USB_Device_ControlEndpointSize>
     602:	d1 2c       	mov	r13, r1
     604:	9f 2d       	mov	r25, r15
     606:	c0 16       	cp	r12, r16
     608:	d1 06       	cpc	r13, r17
     60a:	09 f0       	breq	.+2      	; 0x60e <Endpoint_Write_Control_Stream_LE+0xcc>
     60c:	9e 2d       	mov	r25, r14
     60e:	80 81       	ld	r24, Z
     610:	8e 77       	andi	r24, 0x7E	; 126
     612:	80 83       	st	Z, r24
     614:	21 15       	cp	r18, r1
     616:	31 05       	cpc	r19, r1
     618:	11 f6       	brne	.-124    	; 0x59e <Endpoint_Write_Control_Stream_LE+0x5c>
     61a:	91 11       	cpse	r25, r1
     61c:	c0 cf       	rjmp	.-128    	; 0x59e <Endpoint_Write_Control_Stream_LE+0x5c>
     61e:	0a c0       	rjmp	.+20     	; 0x634 <Endpoint_Write_Control_Stream_LE+0xf2>
     620:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <USB_DeviceState>
     624:	88 23       	and	r24, r24
     626:	99 f0       	breq	.+38     	; 0x64e <Endpoint_Write_Control_Stream_LE+0x10c>
     628:	85 30       	cpi	r24, 0x05	; 5
     62a:	99 f0       	breq	.+38     	; 0x652 <Endpoint_Write_Control_Stream_LE+0x110>
     62c:	80 81       	ld	r24, Z
     62e:	83 ff       	sbrs	r24, 3
     630:	03 c0       	rjmp	.+6      	; 0x638 <Endpoint_Write_Control_Stream_LE+0xf6>
     632:	11 c0       	rjmp	.+34     	; 0x656 <Endpoint_Write_Control_Stream_LE+0x114>
     634:	e8 ee       	ldi	r30, 0xE8	; 232
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	80 81       	ld	r24, Z
     63a:	82 ff       	sbrs	r24, 2
     63c:	f1 cf       	rjmp	.-30     	; 0x620 <Endpoint_Write_Control_Stream_LE+0xde>
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	0b c0       	rjmp	.+22     	; 0x658 <Endpoint_Write_Control_Stream_LE+0x116>
     642:	82 e0       	ldi	r24, 0x02	; 2
     644:	09 c0       	rjmp	.+18     	; 0x658 <Endpoint_Write_Control_Stream_LE+0x116>
     646:	83 e0       	ldi	r24, 0x03	; 3
     648:	07 c0       	rjmp	.+14     	; 0x658 <Endpoint_Write_Control_Stream_LE+0x116>
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	05 c0       	rjmp	.+10     	; 0x658 <Endpoint_Write_Control_Stream_LE+0x116>
     64e:	82 e0       	ldi	r24, 0x02	; 2
     650:	03 c0       	rjmp	.+6      	; 0x658 <Endpoint_Write_Control_Stream_LE+0x116>
     652:	83 e0       	ldi	r24, 0x03	; 3
     654:	01 c0       	rjmp	.+2      	; 0x658 <Endpoint_Write_Control_Stream_LE+0x116>
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	1f 91       	pop	r17
     65e:	0f 91       	pop	r16
     660:	ff 90       	pop	r15
     662:	ef 90       	pop	r14
     664:	df 90       	pop	r13
     666:	cf 90       	pop	r12
     668:	bf 90       	pop	r11
     66a:	af 90       	pop	r10
     66c:	08 95       	ret

0000066e <Endpoint_Read_Control_Stream_LE>:
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	1f 93       	push	r17
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	61 15       	cp	r22, r1
     67a:	71 05       	cpc	r23, r1
     67c:	51 f5       	brne	.+84     	; 0x6d2 <Endpoint_Read_Control_Stream_LE+0x64>
     67e:	e8 ee       	ldi	r30, 0xE8	; 232
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	80 81       	ld	r24, Z
     684:	8b 77       	andi	r24, 0x7B	; 123
     686:	80 83       	st	Z, r24
     688:	45 c0       	rjmp	.+138    	; 0x714 <Endpoint_Read_Control_Stream_LE+0xa6>
     68a:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <USB_DeviceState>
     68e:	88 23       	and	r24, r24
     690:	09 f4       	brne	.+2      	; 0x694 <Endpoint_Read_Control_Stream_LE+0x26>
     692:	47 c0       	rjmp	.+142    	; 0x722 <Endpoint_Read_Control_Stream_LE+0xb4>
     694:	85 30       	cpi	r24, 0x05	; 5
     696:	09 f4       	brne	.+2      	; 0x69a <Endpoint_Read_Control_Stream_LE+0x2c>
     698:	46 c0       	rjmp	.+140    	; 0x726 <Endpoint_Read_Control_Stream_LE+0xb8>
     69a:	80 81       	ld	r24, Z
     69c:	83 fd       	sbrc	r24, 3
     69e:	45 c0       	rjmp	.+138    	; 0x72a <Endpoint_Read_Control_Stream_LE+0xbc>
     6a0:	80 81       	ld	r24, Z
     6a2:	82 ff       	sbrs	r24, 2
     6a4:	f2 cf       	rjmp	.-28     	; 0x68a <Endpoint_Read_Control_Stream_LE+0x1c>
     6a6:	4d c0       	rjmp	.+154    	; 0x742 <Endpoint_Read_Control_Stream_LE+0xd4>
     6a8:	ea 01       	movw	r28, r20
     6aa:	88 81       	ld	r24, Y
     6ac:	8d 93       	st	X+, r24
     6ae:	61 50       	subi	r22, 0x01	; 1
     6b0:	71 09       	sbc	r23, r1
     6b2:	41 f0       	breq	.+16     	; 0x6c4 <Endpoint_Read_Control_Stream_LE+0x56>
     6b4:	e9 01       	movw	r28, r18
     6b6:	18 81       	ld	r17, Y
     6b8:	e7 01       	movw	r28, r14
     6ba:	88 81       	ld	r24, Y
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	91 2b       	or	r25, r17
     6c0:	89 2b       	or	r24, r25
     6c2:	91 f7       	brne	.-28     	; 0x6a8 <Endpoint_Read_Control_Stream_LE+0x3a>
     6c4:	80 81       	ld	r24, Z
     6c6:	8b 77       	andi	r24, 0x7B	; 123
     6c8:	80 83       	st	Z, r24
     6ca:	61 15       	cp	r22, r1
     6cc:	71 05       	cpc	r23, r1
     6ce:	71 f4       	brne	.+28     	; 0x6ec <Endpoint_Read_Control_Stream_LE+0x7e>
     6d0:	21 c0       	rjmp	.+66     	; 0x714 <Endpoint_Read_Control_Stream_LE+0xa6>
     6d2:	a8 2f       	mov	r26, r24
     6d4:	b9 2f       	mov	r27, r25
     6d6:	e8 ee       	ldi	r30, 0xE8	; 232
     6d8:	f0 e0       	ldi	r31, 0x00	; 0
     6da:	23 ef       	ldi	r18, 0xF3	; 243
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	0f 2e       	mov	r0, r31
     6e0:	f2 ef       	ldi	r31, 0xF2	; 242
     6e2:	ef 2e       	mov	r14, r31
     6e4:	f1 2c       	mov	r15, r1
     6e6:	f0 2d       	mov	r31, r0
     6e8:	41 ef       	ldi	r20, 0xF1	; 241
     6ea:	50 e0       	ldi	r21, 0x00	; 0
     6ec:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <USB_DeviceState>
     6f0:	88 23       	and	r24, r24
     6f2:	e9 f0       	breq	.+58     	; 0x72e <Endpoint_Read_Control_Stream_LE+0xc0>
     6f4:	85 30       	cpi	r24, 0x05	; 5
     6f6:	e9 f0       	breq	.+58     	; 0x732 <Endpoint_Read_Control_Stream_LE+0xc4>
     6f8:	80 81       	ld	r24, Z
     6fa:	83 fd       	sbrc	r24, 3
     6fc:	1c c0       	rjmp	.+56     	; 0x736 <Endpoint_Read_Control_Stream_LE+0xc8>
     6fe:	80 81       	ld	r24, Z
     700:	82 fd       	sbrc	r24, 2
     702:	1f c0       	rjmp	.+62     	; 0x742 <Endpoint_Read_Control_Stream_LE+0xd4>
     704:	c2 cf       	rjmp	.-124    	; 0x68a <Endpoint_Read_Control_Stream_LE+0x1c>
     706:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <USB_DeviceState>
     70a:	88 23       	and	r24, r24
     70c:	b1 f0       	breq	.+44     	; 0x73a <Endpoint_Read_Control_Stream_LE+0xcc>
     70e:	85 30       	cpi	r24, 0x05	; 5
     710:	19 f4       	brne	.+6      	; 0x718 <Endpoint_Read_Control_Stream_LE+0xaa>
     712:	15 c0       	rjmp	.+42     	; 0x73e <Endpoint_Read_Control_Stream_LE+0xd0>
     714:	e8 ee       	ldi	r30, 0xE8	; 232
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	80 81       	ld	r24, Z
     71a:	80 ff       	sbrs	r24, 0
     71c:	f4 cf       	rjmp	.-24     	; 0x706 <Endpoint_Read_Control_Stream_LE+0x98>
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	1a c0       	rjmp	.+52     	; 0x756 <Endpoint_Read_Control_Stream_LE+0xe8>
     722:	82 e0       	ldi	r24, 0x02	; 2
     724:	18 c0       	rjmp	.+48     	; 0x756 <Endpoint_Read_Control_Stream_LE+0xe8>
     726:	83 e0       	ldi	r24, 0x03	; 3
     728:	16 c0       	rjmp	.+44     	; 0x756 <Endpoint_Read_Control_Stream_LE+0xe8>
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	14 c0       	rjmp	.+40     	; 0x756 <Endpoint_Read_Control_Stream_LE+0xe8>
     72e:	82 e0       	ldi	r24, 0x02	; 2
     730:	12 c0       	rjmp	.+36     	; 0x756 <Endpoint_Read_Control_Stream_LE+0xe8>
     732:	83 e0       	ldi	r24, 0x03	; 3
     734:	10 c0       	rjmp	.+32     	; 0x756 <Endpoint_Read_Control_Stream_LE+0xe8>
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	0e c0       	rjmp	.+28     	; 0x756 <Endpoint_Read_Control_Stream_LE+0xe8>
     73a:	82 e0       	ldi	r24, 0x02	; 2
     73c:	0c c0       	rjmp	.+24     	; 0x756 <Endpoint_Read_Control_Stream_LE+0xe8>
     73e:	83 e0       	ldi	r24, 0x03	; 3
     740:	0a c0       	rjmp	.+20     	; 0x756 <Endpoint_Read_Control_Stream_LE+0xe8>
     742:	e9 01       	movw	r28, r18
     744:	18 81       	ld	r17, Y
     746:	e7 01       	movw	r28, r14
     748:	88 81       	ld	r24, Y
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	91 2b       	or	r25, r17
     74e:	89 2b       	or	r24, r25
     750:	09 f0       	breq	.+2      	; 0x754 <Endpoint_Read_Control_Stream_LE+0xe6>
     752:	aa cf       	rjmp	.-172    	; 0x6a8 <Endpoint_Read_Control_Stream_LE+0x3a>
     754:	b7 cf       	rjmp	.-146    	; 0x6c4 <Endpoint_Read_Control_Stream_LE+0x56>
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	1f 91       	pop	r17
     75c:	ff 90       	pop	r15
     75e:	ef 90       	pop	r14
     760:	08 95       	ret

00000762 <Endpoint_Write_Control_PStream_LE>:
     762:	af 92       	push	r10
     764:	bf 92       	push	r11
     766:	cf 92       	push	r12
     768:	df 92       	push	r13
     76a:	ef 92       	push	r14
     76c:	ff 92       	push	r15
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <USB_ControlRequest+0x6>
     77a:	30 91 95 02 	lds	r19, 0x0295	; 0x800295 <USB_ControlRequest+0x7>
     77e:	26 17       	cp	r18, r22
     780:	37 07       	cpc	r19, r23
     782:	58 f0       	brcs	.+22     	; 0x79a <Endpoint_Write_Control_PStream_LE+0x38>
     784:	61 15       	cp	r22, r1
     786:	71 05       	cpc	r23, r1
     788:	39 f4       	brne	.+14     	; 0x798 <Endpoint_Write_Control_PStream_LE+0x36>
     78a:	e8 ee       	ldi	r30, 0xE8	; 232
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	20 81       	ld	r18, Z
     790:	2e 77       	andi	r18, 0x7E	; 126
     792:	20 83       	st	Z, r18
     794:	9b 01       	movw	r18, r22
     796:	01 c0       	rjmp	.+2      	; 0x79a <Endpoint_Write_Control_PStream_LE+0x38>
     798:	9b 01       	movw	r18, r22
     79a:	e8 2f       	mov	r30, r24
     79c:	f9 2f       	mov	r31, r25
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	a8 ee       	ldi	r26, 0xE8	; 232
     7a2:	b0 e0       	ldi	r27, 0x00	; 0
     7a4:	63 ef       	ldi	r22, 0xF3	; 243
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	42 ef       	ldi	r20, 0xF2	; 242
     7aa:	50 e0       	ldi	r21, 0x00	; 0
     7ac:	0f 2e       	mov	r0, r31
     7ae:	f1 ef       	ldi	r31, 0xF1	; 241
     7b0:	af 2e       	mov	r10, r31
     7b2:	b1 2c       	mov	r11, r1
     7b4:	f0 2d       	mov	r31, r0
     7b6:	ff 24       	eor	r15, r15
     7b8:	f3 94       	inc	r15
     7ba:	e1 2c       	mov	r14, r1
     7bc:	3c c0       	rjmp	.+120    	; 0x836 <Endpoint_Write_Control_PStream_LE+0xd4>
     7be:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <USB_DeviceState>
     7c2:	88 23       	and	r24, r24
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <Endpoint_Write_Control_PStream_LE+0x66>
     7c6:	4f c0       	rjmp	.+158    	; 0x866 <Endpoint_Write_Control_PStream_LE+0x104>
     7c8:	85 30       	cpi	r24, 0x05	; 5
     7ca:	09 f4       	brne	.+2      	; 0x7ce <Endpoint_Write_Control_PStream_LE+0x6c>
     7cc:	4e c0       	rjmp	.+156    	; 0x86a <Endpoint_Write_Control_PStream_LE+0x108>
     7ce:	8c 91       	ld	r24, X
     7d0:	83 fd       	sbrc	r24, 3
     7d2:	4d c0       	rjmp	.+154    	; 0x86e <Endpoint_Write_Control_PStream_LE+0x10c>
     7d4:	8c 91       	ld	r24, X
     7d6:	82 fd       	sbrc	r24, 2
     7d8:	3f c0       	rjmp	.+126    	; 0x858 <Endpoint_Write_Control_PStream_LE+0xf6>
     7da:	8c 91       	ld	r24, X
     7dc:	80 ff       	sbrs	r24, 0
     7de:	2b c0       	rjmp	.+86     	; 0x836 <Endpoint_Write_Control_PStream_LE+0xd4>
     7e0:	eb 01       	movw	r28, r22
     7e2:	88 81       	ld	r24, Y
     7e4:	ea 01       	movw	r28, r20
     7e6:	08 81       	ld	r16, Y
     7e8:	10 e0       	ldi	r17, 0x00	; 0
     7ea:	18 2b       	or	r17, r24
     7ec:	21 15       	cp	r18, r1
     7ee:	31 05       	cpc	r19, r1
     7f0:	b9 f0       	breq	.+46     	; 0x820 <Endpoint_Write_Control_PStream_LE+0xbe>
     7f2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <USB_Device_ControlEndpointSize>
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	08 17       	cp	r16, r24
     7fa:	19 07       	cpc	r17, r25
     7fc:	88 f4       	brcc	.+34     	; 0x820 <Endpoint_Write_Control_PStream_LE+0xbe>
     7fe:	84 91       	lpm	r24, Z
     800:	e5 01       	movw	r28, r10
     802:	88 83       	st	Y, r24
     804:	31 96       	adiw	r30, 0x01	; 1
     806:	21 50       	subi	r18, 0x01	; 1
     808:	31 09       	sbc	r19, r1
     80a:	0f 5f       	subi	r16, 0xFF	; 255
     80c:	1f 4f       	sbci	r17, 0xFF	; 255
     80e:	21 15       	cp	r18, r1
     810:	31 05       	cpc	r19, r1
     812:	31 f0       	breq	.+12     	; 0x820 <Endpoint_Write_Control_PStream_LE+0xbe>
     814:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <USB_Device_ControlEndpointSize>
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	08 17       	cp	r16, r24
     81c:	19 07       	cpc	r17, r25
     81e:	78 f3       	brcs	.-34     	; 0x7fe <Endpoint_Write_Control_PStream_LE+0x9c>
     820:	c0 90 22 01 	lds	r12, 0x0122	; 0x800122 <USB_Device_ControlEndpointSize>
     824:	d1 2c       	mov	r13, r1
     826:	9f 2d       	mov	r25, r15
     828:	c0 16       	cp	r12, r16
     82a:	d1 06       	cpc	r13, r17
     82c:	09 f0       	breq	.+2      	; 0x830 <Endpoint_Write_Control_PStream_LE+0xce>
     82e:	9e 2d       	mov	r25, r14
     830:	8c 91       	ld	r24, X
     832:	8e 77       	andi	r24, 0x7E	; 126
     834:	8c 93       	st	X, r24
     836:	21 15       	cp	r18, r1
     838:	31 05       	cpc	r19, r1
     83a:	09 f0       	breq	.+2      	; 0x83e <Endpoint_Write_Control_PStream_LE+0xdc>
     83c:	c0 cf       	rjmp	.-128    	; 0x7be <Endpoint_Write_Control_PStream_LE+0x5c>
     83e:	91 11       	cpse	r25, r1
     840:	be cf       	rjmp	.-132    	; 0x7be <Endpoint_Write_Control_PStream_LE+0x5c>
     842:	0a c0       	rjmp	.+20     	; 0x858 <Endpoint_Write_Control_PStream_LE+0xf6>
     844:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <USB_DeviceState>
     848:	88 23       	and	r24, r24
     84a:	99 f0       	breq	.+38     	; 0x872 <Endpoint_Write_Control_PStream_LE+0x110>
     84c:	85 30       	cpi	r24, 0x05	; 5
     84e:	99 f0       	breq	.+38     	; 0x876 <Endpoint_Write_Control_PStream_LE+0x114>
     850:	80 81       	ld	r24, Z
     852:	83 ff       	sbrs	r24, 3
     854:	03 c0       	rjmp	.+6      	; 0x85c <Endpoint_Write_Control_PStream_LE+0xfa>
     856:	11 c0       	rjmp	.+34     	; 0x87a <Endpoint_Write_Control_PStream_LE+0x118>
     858:	e8 ee       	ldi	r30, 0xE8	; 232
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	80 81       	ld	r24, Z
     85e:	82 ff       	sbrs	r24, 2
     860:	f1 cf       	rjmp	.-30     	; 0x844 <Endpoint_Write_Control_PStream_LE+0xe2>
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	0b c0       	rjmp	.+22     	; 0x87c <Endpoint_Write_Control_PStream_LE+0x11a>
     866:	82 e0       	ldi	r24, 0x02	; 2
     868:	09 c0       	rjmp	.+18     	; 0x87c <Endpoint_Write_Control_PStream_LE+0x11a>
     86a:	83 e0       	ldi	r24, 0x03	; 3
     86c:	07 c0       	rjmp	.+14     	; 0x87c <Endpoint_Write_Control_PStream_LE+0x11a>
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	05 c0       	rjmp	.+10     	; 0x87c <Endpoint_Write_Control_PStream_LE+0x11a>
     872:	82 e0       	ldi	r24, 0x02	; 2
     874:	03 c0       	rjmp	.+6      	; 0x87c <Endpoint_Write_Control_PStream_LE+0x11a>
     876:	83 e0       	ldi	r24, 0x03	; 3
     878:	01 c0       	rjmp	.+2      	; 0x87c <Endpoint_Write_Control_PStream_LE+0x11a>
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	ff 90       	pop	r15
     886:	ef 90       	pop	r14
     888:	df 90       	pop	r13
     88a:	cf 90       	pop	r12
     88c:	bf 90       	pop	r11
     88e:	af 90       	pop	r10
     890:	08 95       	ret

00000892 <Endpoint_Write_Control_EStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     892:	4f 92       	push	r4
     894:	5f 92       	push	r5
     896:	6f 92       	push	r6
     898:	7f 92       	push	r7
     89a:	8f 92       	push	r8
     89c:	9f 92       	push	r9
     89e:	af 92       	push	r10
     8a0:	bf 92       	push	r11
     8a2:	cf 92       	push	r12
     8a4:	df 92       	push	r13
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     8b2:	00 91 94 02 	lds	r16, 0x0294	; 0x800294 <USB_ControlRequest+0x6>
     8b6:	10 91 95 02 	lds	r17, 0x0295	; 0x800295 <USB_ControlRequest+0x7>
     8ba:	06 17       	cp	r16, r22
     8bc:	17 07       	cpc	r17, r23
     8be:	58 f0       	brcs	.+22     	; 0x8d6 <Endpoint_Write_Control_EStream_LE+0x44>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     8c0:	61 15       	cp	r22, r1
     8c2:	71 05       	cpc	r23, r1
     8c4:	39 f4       	brne	.+14     	; 0x8d4 <Endpoint_Write_Control_EStream_LE+0x42>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8c6:	e8 ee       	ldi	r30, 0xE8	; 232
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	20 81       	ld	r18, Z
     8cc:	2e 77       	andi	r18, 0x7E	; 126
     8ce:	20 83       	st	Z, r18
     8d0:	8b 01       	movw	r16, r22
     8d2:	01 c0       	rjmp	.+2      	; 0x8d6 <Endpoint_Write_Control_EStream_LE+0x44>
     8d4:	8b 01       	movw	r16, r22
     8d6:	e8 2e       	mov	r14, r24
     8d8:	f9 2e       	mov	r15, r25
     8da:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     8dc:	c8 ee       	ldi	r28, 0xE8	; 232
     8de:	d0 e0       	ldi	r29, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     8e0:	0f 2e       	mov	r0, r31
     8e2:	f3 ef       	ldi	r31, 0xF3	; 243
     8e4:	af 2e       	mov	r10, r31
     8e6:	b1 2c       	mov	r11, r1
     8e8:	f0 2d       	mov	r31, r0
     8ea:	0f 2e       	mov	r0, r31
     8ec:	f2 ef       	ldi	r31, 0xF2	; 242
     8ee:	6f 2e       	mov	r6, r31
     8f0:	71 2c       	mov	r7, r1
     8f2:	f0 2d       	mov	r31, r0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     8f4:	0f 2e       	mov	r0, r31
     8f6:	f1 ef       	ldi	r31, 0xF1	; 241
     8f8:	cf 2e       	mov	r12, r31
     8fa:	d1 2c       	mov	r13, r1
     8fc:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     8fe:	55 24       	eor	r5, r5
     900:	53 94       	inc	r5
     902:	41 2c       	mov	r4, r1
     904:	41 c0       	rjmp	.+130    	; 0x988 <Endpoint_Write_Control_EStream_LE+0xf6>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     906:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     90a:	88 23       	and	r24, r24
     90c:	09 f4       	brne	.+2      	; 0x910 <Endpoint_Write_Control_EStream_LE+0x7e>
     90e:	54 c0       	rjmp	.+168    	; 0x9b8 <Endpoint_Write_Control_EStream_LE+0x126>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     910:	85 30       	cpi	r24, 0x05	; 5
     912:	09 f4       	brne	.+2      	; 0x916 <Endpoint_Write_Control_EStream_LE+0x84>
     914:	53 c0       	rjmp	.+166    	; 0x9bc <Endpoint_Write_Control_EStream_LE+0x12a>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     916:	88 81       	ld	r24, Y
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     918:	83 fd       	sbrc	r24, 3
     91a:	52 c0       	rjmp	.+164    	; 0x9c0 <Endpoint_Write_Control_EStream_LE+0x12e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     91c:	88 81       	ld	r24, Y
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     91e:	82 fd       	sbrc	r24, 2
     920:	44 c0       	rjmp	.+136    	; 0x9aa <Endpoint_Write_Control_EStream_LE+0x118>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     922:	88 81       	ld	r24, Y
		  break;

		if (Endpoint_IsINReady())
     924:	80 ff       	sbrs	r24, 0
     926:	30 c0       	rjmp	.+96     	; 0x988 <Endpoint_Write_Control_EStream_LE+0xf6>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     928:	f5 01       	movw	r30, r10
     92a:	80 81       	ld	r24, Z
     92c:	f3 01       	movw	r30, r6
     92e:	80 80       	ld	r8, Z
     930:	91 2c       	mov	r9, r1
     932:	98 2a       	or	r9, r24
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     934:	01 15       	cp	r16, r1
     936:	11 05       	cpc	r17, r1
     938:	e1 f0       	breq	.+56     	; 0x972 <Endpoint_Write_Control_EStream_LE+0xe0>
     93a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <USB_Device_ControlEndpointSize>
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	88 16       	cp	r8, r24
     942:	99 06       	cpc	r9, r25
     944:	b0 f4       	brcc	.+44     	; 0x972 <Endpoint_Write_Control_EStream_LE+0xe0>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     946:	c7 01       	movw	r24, r14
     948:	0e 94 bf 14 	call	0x297e	; 0x297e <eeprom_read_byte>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     94c:	f6 01       	movw	r30, r12
     94e:	80 83       	st	Z, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     950:	ff ef       	ldi	r31, 0xFF	; 255
     952:	ef 1a       	sub	r14, r31
     954:	ff 0a       	sbc	r15, r31
				Length--;
     956:	01 50       	subi	r16, 0x01	; 1
     958:	11 09       	sbc	r17, r1
				BytesInEndpoint++;
     95a:	8f ef       	ldi	r24, 0xFF	; 255
     95c:	88 1a       	sub	r8, r24
     95e:	98 0a       	sbc	r9, r24

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     960:	01 15       	cp	r16, r1
     962:	11 05       	cpc	r17, r1
     964:	31 f0       	breq	.+12     	; 0x972 <Endpoint_Write_Control_EStream_LE+0xe0>
     966:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <USB_Device_ControlEndpointSize>
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	88 16       	cp	r8, r24
     96e:	99 06       	cpc	r9, r25
     970:	50 f3       	brcs	.-44     	; 0x946 <Endpoint_Write_Control_EStream_LE+0xb4>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     972:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <USB_Device_ControlEndpointSize>
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	95 2d       	mov	r25, r5
     97a:	28 15       	cp	r18, r8
     97c:	39 05       	cpc	r19, r9
     97e:	09 f0       	breq	.+2      	; 0x982 <Endpoint_Write_Control_EStream_LE+0xf0>
     980:	94 2d       	mov	r25, r4
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     982:	88 81       	ld	r24, Y
     984:	8e 77       	andi	r24, 0x7E	; 126
     986:	88 83       	st	Y, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     988:	01 15       	cp	r16, r1
     98a:	11 05       	cpc	r17, r1
     98c:	09 f0       	breq	.+2      	; 0x990 <Endpoint_Write_Control_EStream_LE+0xfe>
     98e:	bb cf       	rjmp	.-138    	; 0x906 <Endpoint_Write_Control_EStream_LE+0x74>
     990:	91 11       	cpse	r25, r1
     992:	b9 cf       	rjmp	.-142    	; 0x906 <Endpoint_Write_Control_EStream_LE+0x74>
     994:	0a c0       	rjmp	.+20     	; 0x9aa <Endpoint_Write_Control_EStream_LE+0x118>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     996:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     99a:	88 23       	and	r24, r24
     99c:	99 f0       	breq	.+38     	; 0x9c4 <Endpoint_Write_Control_EStream_LE+0x132>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     99e:	85 30       	cpi	r24, 0x05	; 5
     9a0:	99 f0       	breq	.+38     	; 0x9c8 <Endpoint_Write_Control_EStream_LE+0x136>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     9a2:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     9a4:	83 ff       	sbrs	r24, 3
     9a6:	03 c0       	rjmp	.+6      	; 0x9ae <Endpoint_Write_Control_EStream_LE+0x11c>
     9a8:	11 c0       	rjmp	.+34     	; 0x9cc <Endpoint_Write_Control_EStream_LE+0x13a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9aa:	e8 ee       	ldi	r30, 0xE8	; 232
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     9b0:	82 ff       	sbrs	r24, 2
     9b2:	f1 cf       	rjmp	.-30     	; 0x996 <Endpoint_Write_Control_EStream_LE+0x104>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	0b c0       	rjmp	.+22     	; 0x9ce <Endpoint_Write_Control_EStream_LE+0x13c>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     9b8:	82 e0       	ldi	r24, 0x02	; 2
     9ba:	09 c0       	rjmp	.+18     	; 0x9ce <Endpoint_Write_Control_EStream_LE+0x13c>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     9bc:	83 e0       	ldi	r24, 0x03	; 3
     9be:	07 c0       	rjmp	.+14     	; 0x9ce <Endpoint_Write_Control_EStream_LE+0x13c>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	05 c0       	rjmp	.+10     	; 0x9ce <Endpoint_Write_Control_EStream_LE+0x13c>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     9c4:	82 e0       	ldi	r24, 0x02	; 2
     9c6:	03 c0       	rjmp	.+6      	; 0x9ce <Endpoint_Write_Control_EStream_LE+0x13c>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     9c8:	83 e0       	ldi	r24, 0x03	; 3
     9ca:	01 c0       	rjmp	.+2      	; 0x9ce <Endpoint_Write_Control_EStream_LE+0x13c>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     9cc:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	1f 91       	pop	r17
     9d4:	0f 91       	pop	r16
     9d6:	ff 90       	pop	r15
     9d8:	ef 90       	pop	r14
     9da:	df 90       	pop	r13
     9dc:	cf 90       	pop	r12
     9de:	bf 90       	pop	r11
     9e0:	af 90       	pop	r10
     9e2:	9f 90       	pop	r9
     9e4:	8f 90       	pop	r8
     9e6:	7f 90       	pop	r7
     9e8:	6f 90       	pop	r6
     9ea:	5f 90       	pop	r5
     9ec:	4f 90       	pop	r4
     9ee:	08 95       	ret

000009f0 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     9f0:	8f 92       	push	r8
     9f2:	9f 92       	push	r9
     9f4:	bf 92       	push	r11
     9f6:	cf 92       	push	r12
     9f8:	df 92       	push	r13
     9fa:	ef 92       	push	r14
     9fc:	ff 92       	push	r15
     9fe:	0f 93       	push	r16
     a00:	1f 93       	push	r17
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	87 30       	cpi	r24, 0x07	; 7
     a08:	70 f1       	brcs	.+92     	; 0xa66 <Endpoint_ConfigureEndpoint_Prv+0x76>
     a0a:	26 c0       	rjmp	.+76     	; 0xa58 <Endpoint_ConfigureEndpoint_Prv+0x68>
     a0c:	29 2f       	mov	r18, r25
     a0e:	2f 70       	andi	r18, 0x0F	; 15
     a10:	e7 01       	movw	r28, r14
     a12:	28 83       	st	Y, r18
     a14:	89 17       	cp	r24, r25
     a16:	31 f0       	breq	.+12     	; 0xa24 <Endpoint_ConfigureEndpoint_Prv+0x34>
     a18:	e8 01       	movw	r28, r16
     a1a:	78 81       	ld	r23, Y
     a1c:	20 81       	ld	r18, Z
     a1e:	e4 01       	movw	r28, r8
     a20:	58 81       	ld	r21, Y
     a22:	03 c0       	rjmp	.+6      	; 0xa2a <Endpoint_ConfigureEndpoint_Prv+0x3a>
     a24:	24 2f       	mov	r18, r20
     a26:	76 2f       	mov	r23, r22
     a28:	5b 2d       	mov	r21, r11
     a2a:	21 ff       	sbrs	r18, 1
     a2c:	12 c0       	rjmp	.+36     	; 0xa52 <Endpoint_ConfigureEndpoint_Prv+0x62>
     a2e:	3c 91       	ld	r19, X
     a30:	3e 7f       	andi	r19, 0xFE	; 254
     a32:	3c 93       	st	X, r19
     a34:	30 81       	ld	r19, Z
     a36:	3d 7f       	andi	r19, 0xFD	; 253
     a38:	30 83       	st	Z, r19
     a3a:	3c 91       	ld	r19, X
     a3c:	31 60       	ori	r19, 0x01	; 1
     a3e:	3c 93       	st	X, r19
     a40:	e8 01       	movw	r28, r16
     a42:	78 83       	st	Y, r23
     a44:	20 83       	st	Z, r18
     a46:	e4 01       	movw	r28, r8
     a48:	58 83       	st	Y, r21
     a4a:	e6 01       	movw	r28, r12
     a4c:	28 81       	ld	r18, Y
     a4e:	22 23       	and	r18, r18
     a50:	44 f4       	brge	.+16     	; 0xa62 <Endpoint_ConfigureEndpoint_Prv+0x72>
     a52:	9f 5f       	subi	r25, 0xFF	; 255
     a54:	97 30       	cpi	r25, 0x07	; 7
     a56:	d1 f6       	brne	.-76     	; 0xa0c <Endpoint_ConfigureEndpoint_Prv+0x1c>
     a58:	8f 70       	andi	r24, 0x0F	; 15
     a5a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	21 c0       	rjmp	.+66     	; 0xaa4 <Endpoint_ConfigureEndpoint_Prv+0xb4>
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	1f c0       	rjmp	.+62     	; 0xaa4 <Endpoint_ConfigureEndpoint_Prv+0xb4>
     a66:	98 2f       	mov	r25, r24
     a68:	9f 70       	andi	r25, 0x0F	; 15
     a6a:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
     a6e:	98 2f       	mov	r25, r24
     a70:	24 2f       	mov	r18, r20
     a72:	76 2f       	mov	r23, r22
     a74:	50 e0       	ldi	r21, 0x00	; 0
     a76:	ab ee       	ldi	r26, 0xEB	; 235
     a78:	b0 e0       	ldi	r27, 0x00	; 0
     a7a:	ed ee       	ldi	r30, 0xED	; 237
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	0c ee       	ldi	r16, 0xEC	; 236
     a80:	10 e0       	ldi	r17, 0x00	; 0
     a82:	0f 2e       	mov	r0, r31
     a84:	f0 ef       	ldi	r31, 0xF0	; 240
     a86:	8f 2e       	mov	r8, r31
     a88:	91 2c       	mov	r9, r1
     a8a:	f0 2d       	mov	r31, r0
     a8c:	0f 2e       	mov	r0, r31
     a8e:	fe ee       	ldi	r31, 0xEE	; 238
     a90:	cf 2e       	mov	r12, r31
     a92:	d1 2c       	mov	r13, r1
     a94:	f0 2d       	mov	r31, r0
     a96:	0f 2e       	mov	r0, r31
     a98:	f9 ee       	ldi	r31, 0xE9	; 233
     a9a:	ef 2e       	mov	r14, r31
     a9c:	f1 2c       	mov	r15, r1
     a9e:	f0 2d       	mov	r31, r0
     aa0:	b1 2c       	mov	r11, r1
     aa2:	c3 cf       	rjmp	.-122    	; 0xa2a <Endpoint_ConfigureEndpoint_Prv+0x3a>
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	1f 91       	pop	r17
     aaa:	0f 91       	pop	r16
     aac:	ff 90       	pop	r15
     aae:	ef 90       	pop	r14
     ab0:	df 90       	pop	r13
     ab2:	cf 90       	pop	r12
     ab4:	bf 90       	pop	r11
     ab6:	9f 90       	pop	r9
     ab8:	8f 90       	pop	r8
     aba:	08 95       	ret

00000abc <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     abc:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <USB_ControlRequest>
     ac0:	88 23       	and	r24, r24
     ac2:	44 f0       	brlt	.+16     	; 0xad4 <Endpoint_ClearStatusStage+0x18>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ac4:	e8 ee       	ldi	r30, 0xE8	; 232
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	14 c0       	rjmp	.+40     	; 0xaf2 <Endpoint_ClearStatusStage+0x36>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     aca:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <USB_DeviceState>
     ace:	81 11       	cpse	r24, r1
     ad0:	03 c0       	rjmp	.+6      	; 0xad8 <Endpoint_ClearStatusStage+0x1c>
     ad2:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ad4:	e8 ee       	ldi	r30, 0xE8	; 232
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     ada:	82 ff       	sbrs	r24, 2
     adc:	f6 cf       	rjmp	.-20     	; 0xaca <Endpoint_ClearStatusStage+0xe>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ade:	e8 ee       	ldi	r30, 0xE8	; 232
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	80 81       	ld	r24, Z
     ae4:	8b 77       	andi	r24, 0x7B	; 123
     ae6:	80 83       	st	Z, r24
     ae8:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     aea:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <USB_DeviceState>
     aee:	88 23       	and	r24, r24
     af0:	41 f0       	breq	.+16     	; 0xb02 <__stack+0x3>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     af2:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     af4:	80 ff       	sbrs	r24, 0
     af6:	f9 cf       	rjmp	.-14     	; 0xaea <Endpoint_ClearStatusStage+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     af8:	e8 ee       	ldi	r30, 0xE8	; 232
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	80 81       	ld	r24, Z
     afe:	8e 77       	andi	r24, 0x7E	; 126
     b00:	80 83       	st	Z, r24
     b02:	08 95       	ret

00000b04 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     b0c:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
     b10:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
     b14:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     b16:	ac ee       	ldi	r26, 0xEC	; 236
     b18:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b1a:	e8 ee       	ldi	r30, 0xE8	; 232
     b1c:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     b1e:	0b ee       	ldi	r16, 0xEB	; 235
     b20:	10 e0       	ldi	r17, 0x00	; 0
     b22:	44 ee       	ldi	r20, 0xE4	; 228
     b24:	50 e0       	ldi	r21, 0x00	; 0
     b26:	01 c0       	rjmp	.+2      	; 0xb2a <Endpoint_WaitUntilReady+0x26>
     b28:	9c 01       	movw	r18, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     b2a:	9c 91       	ld	r25, X
     b2c:	89 2f       	mov	r24, r25
     b2e:	81 70       	andi	r24, 0x01	; 1
     b30:	90 fd       	sbrc	r25, 0
     b32:	1d c0       	rjmp	.+58     	; 0xb6e <Endpoint_WaitUntilReady+0x6a>
     b34:	20 c0       	rjmp	.+64     	; 0xb76 <Endpoint_WaitUntilReady+0x72>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b36:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b3a:	88 23       	and	r24, r24
     b3c:	81 f0       	breq	.+32     	; 0xb5e <Endpoint_WaitUntilReady+0x5a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b3e:	85 30       	cpi	r24, 0x05	; 5
     b40:	81 f0       	breq	.+32     	; 0xb62 <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     b42:	e8 01       	movw	r28, r16
     b44:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     b46:	85 fd       	sbrc	r24, 5
     b48:	0e c0       	rjmp	.+28     	; 0xb66 <Endpoint_WaitUntilReady+0x62>
     b4a:	ea 01       	movw	r28, r20
     b4c:	88 81       	ld	r24, Y
     b4e:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b50:	28 17       	cp	r18, r24
     b52:	39 07       	cpc	r19, r25
     b54:	51 f3       	breq	.-44     	; 0xb2a <Endpoint_WaitUntilReady+0x26>
     b56:	61 50       	subi	r22, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     b58:	39 f7       	brne	.-50     	; 0xb28 <Endpoint_WaitUntilReady+0x24>
			  return ENDPOINT_READYWAIT_Timeout;
     b5a:	84 e0       	ldi	r24, 0x04	; 4
     b5c:	0f c0       	rjmp	.+30     	; 0xb7c <Endpoint_WaitUntilReady+0x78>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <Endpoint_WaitUntilReady+0x78>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     b62:	83 e0       	ldi	r24, 0x03	; 3
     b64:	0b c0       	rjmp	.+22     	; 0xb7c <Endpoint_WaitUntilReady+0x78>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	09 c0       	rjmp	.+18     	; 0xb7c <Endpoint_WaitUntilReady+0x78>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	07 c0       	rjmp	.+14     	; 0xb7c <Endpoint_WaitUntilReady+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b6e:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     b70:	80 ff       	sbrs	r24, 0
     b72:	e1 cf       	rjmp	.-62     	; 0xb36 <Endpoint_WaitUntilReady+0x32>
     b74:	fa cf       	rjmp	.-12     	; 0xb6a <Endpoint_WaitUntilReady+0x66>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b76:	90 81       	ld	r25, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     b78:	92 ff       	sbrs	r25, 2
     b7a:	dd cf       	rjmp	.-70     	; 0xb36 <Endpoint_WaitUntilReady+0x32>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	08 95       	ret

00000b86 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	00 d0       	rcall	.+0      	; 0xb8c <USB_ResetInterface+0x6>
     b8c:	1f 92       	push	r1
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     b92:	0e 94 76 06 	call	0xcec	; 0xcec <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b96:	0e 94 7e 06 	call	0xcfc	; 0xcfc <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     b9a:	e8 ed       	ldi	r30, 0xD8	; 216
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
     ba4:	80 81       	ld	r24, Z
     ba6:	80 68       	ori	r24, 0x80	; 128
     ba8:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     baa:	80 81       	ld	r24, Z
     bac:	8f 7d       	andi	r24, 0xDF	; 223
     bae:	80 83       	st	Z, r24
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
		#endif

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
     bb0:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <USB_Options>
     bb4:	82 ff       	sbrs	r24, 2
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     bb6:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     bb8:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
     bbc:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     bc0:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     bc4:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <USB_Device_CurrentlySelfPowered>

	#if defined(ARCH_HAS_MULTI_ADDRESS_SPACE) && \
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;

	if (CALLBACK_USB_GetDescriptor((DTYPE_Device << 8), 0, (void*)&DeviceDescriptorPtr, &DescriptorAddressSpace) != NO_DESCRIPTOR)
     bc8:	9e 01       	movw	r18, r28
     bca:	2d 5f       	subi	r18, 0xFD	; 253
     bcc:	3f 4f       	sbci	r19, 0xFF	; 255
     bce:	ae 01       	movw	r20, r28
     bd0:	4f 5f       	subi	r20, 0xFF	; 255
     bd2:	5f 4f       	sbci	r21, 0xFF	; 255
     bd4:	60 e0       	ldi	r22, 0x00	; 0
     bd6:	70 e0       	ldi	r23, 0x00	; 0
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	91 e0       	ldi	r25, 0x01	; 1
     bdc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <CALLBACK_USB_GetDescriptor>
     be0:	89 2b       	or	r24, r25
     be2:	c9 f0       	breq	.+50     	; 0xc16 <USB_ResetInterface+0x90>
	{
		if (DescriptorAddressSpace == MEMSPACE_FLASH)
     be4:	8b 81       	ldd	r24, Y+3	; 0x03
     be6:	81 11       	cpse	r24, r1
     be8:	07 c0       	rjmp	.+14     	; 0xbf8 <USB_ResetInterface+0x72>
		  USB_Device_ControlEndpointSize = pgm_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
     bea:	e9 81       	ldd	r30, Y+1	; 0x01
     bec:	fa 81       	ldd	r31, Y+2	; 0x02
     bee:	37 96       	adiw	r30, 0x07	; 7
     bf0:	e4 91       	lpm	r30, Z
     bf2:	e0 93 22 01 	sts	0x0122, r30	; 0x800122 <USB_Device_ControlEndpointSize>
     bf6:	0f c0       	rjmp	.+30     	; 0xc16 <USB_ResetInterface+0x90>
		else if (DescriptorAddressSpace == MEMSPACE_EEPROM)
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	41 f4       	brne	.+16     	; 0xc0c <USB_ResetInterface+0x86>
		  USB_Device_ControlEndpointSize = eeprom_read_byte(&DeviceDescriptorPtr->Endpoint0Size);
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	9a 81       	ldd	r25, Y+2	; 0x02
     c00:	07 96       	adiw	r24, 0x07	; 7
     c02:	0e 94 bf 14 	call	0x297e	; 0x297e <eeprom_read_byte>
     c06:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <USB_Device_ControlEndpointSize>
     c0a:	05 c0       	rjmp	.+10     	; 0xc16 <USB_ResetInterface+0x90>
		else
		  USB_Device_ControlEndpointSize = DeviceDescriptorPtr->Endpoint0Size;
     c0c:	e9 81       	ldd	r30, Y+1	; 0x01
     c0e:	fa 81       	ldd	r31, Y+2	; 0x02
     c10:	87 81       	ldd	r24, Z+7	; 0x07
     c12:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <USB_Device_ControlEndpointSize>
	}
	#endif
	#endif

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
     c16:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <USB_Options>
     c1a:	80 ff       	sbrs	r24, 0
     c1c:	06 c0       	rjmp	.+12     	; 0xc2a <USB_ResetInterface+0xa4>
		/* Inline Functions: */
			#if defined(USB_DEVICE_OPT_LOWSPEED)
			static inline void USB_Device_SetLowSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetLowSpeed(void)
			{
				UDCON |=  (1 << LSM);
     c1e:	e0 ee       	ldi	r30, 0xE0	; 224
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	84 60       	ori	r24, 0x04	; 4
     c26:	80 83       	st	Z, r24
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <USB_ResetInterface+0xae>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     c2a:	e0 ee       	ldi	r30, 0xE0	; 224
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	8b 7f       	andi	r24, 0xFB	; 251
     c32:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     c34:	e8 ed       	ldi	r30, 0xD8	; 216
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	81 60       	ori	r24, 0x01	; 1
     c3c:	80 83       	st	Z, r24
	  USB_Device_SetFullSpeed();

	USB_INT_Enable(USB_INT_VBUSTI);
	#endif

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
     c3e:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <USB_Device_ControlEndpointSize>
     c42:	30 e0       	ldi	r19, 0x00	; 0
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     c44:	29 30       	cpi	r18, 0x09	; 9
     c46:	31 05       	cpc	r19, r1
     c48:	50 f0       	brcs	.+20     	; 0xc5e <USB_ResetInterface+0xd8>
     c4a:	88 e0       	ldi	r24, 0x08	; 8
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	40 e0       	ldi	r20, 0x00	; 0
				{
					MaskVal++;
     c50:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     c56:	82 17       	cp	r24, r18
     c58:	93 07       	cpc	r25, r19
     c5a:	d0 f3       	brcs	.-12     	; 0xc50 <USB_ResetInterface+0xca>
     c5c:	01 c0       	rjmp	.+2      	; 0xc60 <USB_ResetInterface+0xda>
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     c5e:	40 e0       	ldi	r20, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     c60:	42 95       	swap	r20
     c62:	40 7f       	andi	r20, 0xF0	; 240
     c64:	42 60       	ori	r20, 0x02	; 2
     c66:	60 e0       	ldi	r22, 0x00	; 0
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     c6e:	e1 ee       	ldi	r30, 0xE1	; 225
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	8e 7f       	andi	r24, 0xFE	; 254
     c76:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     c78:	e2 ee       	ldi	r30, 0xE2	; 226
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	81 60       	ori	r24, 0x01	; 1
     c80:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     c82:	80 81       	ld	r24, Z
     c84:	88 60       	ori	r24, 0x08	; 8
     c86:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c88:	e0 ee       	ldi	r30, 0xE0	; 224
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	8e 7f       	andi	r24, 0xFE	; 254
     c90:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     c92:	e8 ed       	ldi	r30, 0xD8	; 216
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	80 61       	ori	r24, 0x10	; 16
     c9a:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	08 95       	ret

00000ca8 <USB_Init>:
               const uint8_t Options
               #endif
               )
{
	#if !defined(USE_STATIC_OPTIONS)
	USB_Options = Options;
     ca8:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <USB_Options>
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     cac:	e8 ed       	ldi	r30, 0xD8	; 216
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	8f 7e       	andi	r24, 0xEF	; 239
     cb4:	80 83       	st	Z, r24
	 * the loaded application. This causes VBUS detection to fail unless we first force
	 * it off to reset it. */
	USB_OTGPAD_Off();
	#endif

	if (!(USB_Options & USB_OPT_REG_DISABLED))
     cb6:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <USB_Options>
     cba:	81 fd       	sbrc	r24, 1
     cbc:	06 c0       	rjmp	.+12     	; 0xcca <USB_Init+0x22>

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     cbe:	e7 ed       	ldi	r30, 0xD7	; 215
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	81 60       	ori	r24, 0x01	; 1
     cc6:	80 83       	st	Z, r24
     cc8:	05 c0       	rjmp	.+10     	; 0xcd4 <USB_Init+0x2c>

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     cca:	e7 ed       	ldi	r30, 0xD7	; 215
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	8e 7f       	andi	r24, 0xFE	; 254
     cd2:	80 83       	st	Z, r24
	  USB_REG_On();
	else
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
     cd4:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <USB_Options>
     cd8:	82 fd       	sbrc	r24, 2
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <USB_Init+0x38>
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     cdc:	84 e0       	ldi	r24, 0x04	; 4
     cde:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <USB_IsInitialized>

	USB_ResetInterface();
     ce6:	0e 94 c3 05 	call	0xb86	; 0xb86 <USB_ResetInterface>
     cea:	08 95       	ret

00000cec <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     cec:	e8 ed       	ldi	r30, 0xD8	; 216
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	8e 7f       	andi	r24, 0xFE	; 254
     cf4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     cf6:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
     cfa:	08 95       	ret

00000cfc <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     cfc:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__DATA_REGION_ORIGIN__+0x7a>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     d00:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
     d04:	08 95       	ret

00000d06 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     d06:	1f 92       	push	r1
     d08:	0f 92       	push	r0
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	0f 92       	push	r0
     d0e:	11 24       	eor	r1, r1
     d10:	2f 93       	push	r18
     d12:	3f 93       	push	r19
     d14:	4f 93       	push	r20
     d16:	5f 93       	push	r21
     d18:	6f 93       	push	r22
     d1a:	7f 93       	push	r23
     d1c:	8f 93       	push	r24
     d1e:	9f 93       	push	r25
     d20:	af 93       	push	r26
     d22:	bf 93       	push	r27
     d24:	ef 93       	push	r30
     d26:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     d28:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     d2c:	82 ff       	sbrs	r24, 2
     d2e:	0b c0       	rjmp	.+22     	; 0xd46 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     d30:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
     d34:	82 ff       	sbrs	r24, 2
     d36:	07 c0       	rjmp	.+14     	; 0xd46 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     d38:	e1 ee       	ldi	r30, 0xE1	; 225
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	8b 7f       	andi	r24, 0xFB	; 251
     d40:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     d42:	0e 94 2d 09 	call	0x125a	; 0x125a <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     d46:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__DATA_REGION_ORIGIN__+0x7a>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     d4a:	80 ff       	sbrs	r24, 0
     d4c:	26 c0       	rjmp	.+76     	; 0xd9a <__vector_10+0x94>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     d4e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
     d52:	80 ff       	sbrs	r24, 0
     d54:	22 c0       	rjmp	.+68     	; 0xd9a <__vector_10+0x94>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     d56:	ea ed       	ldi	r30, 0xDA	; 218
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	8e 7f       	andi	r24, 0xFE	; 254
     d5e:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     d60:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     d64:	80 ff       	sbrs	r24, 0
     d66:	11 c0       	rjmp	.+34     	; 0xd8a <__vector_10+0x84>
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
     d68:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <USB_Options>
     d6c:	82 fd       	sbrc	r24, 2
     d6e:	07 c0       	rjmp	.+14     	; 0xd7e <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     d70:	80 e1       	ldi	r24, 0x10	; 16
     d72:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     d74:	82 e1       	ldi	r24, 0x12	; 18
     d76:	89 bd       	out	0x29, r24	; 41
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     d78:	09 b4       	in	r0, 0x29	; 41
     d7a:	00 fe       	sbrs	r0, 0
     d7c:	fd cf       	rjmp	.-6      	; 0xd78 <__vector_10+0x72>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <USB_DeviceState>
			EVENT_USB_Device_Connect();
     d84:	0e 94 3c 01 	call	0x278	; 0x278 <EVENT_USB_Device_Connect>
     d88:	08 c0       	rjmp	.+16     	; 0xd9a <__vector_10+0x94>
		}
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
     d8a:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <USB_Options>
     d8e:	82 ff       	sbrs	r24, 2
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     d90:	19 bc       	out	0x29, r1	; 41
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     d92:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
     d96:	0e 94 3d 01 	call	0x27a	; 0x27a <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     d9a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     d9e:	80 ff       	sbrs	r24, 0
     da0:	1a c0       	rjmp	.+52     	; 0xdd6 <__vector_10+0xd0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     da2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
     da6:	80 ff       	sbrs	r24, 0
     da8:	16 c0       	rjmp	.+44     	; 0xdd6 <__vector_10+0xd0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     daa:	e2 ee       	ldi	r30, 0xE2	; 226
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	8e 7f       	andi	r24, 0xFE	; 254
     db2:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     db4:	80 81       	ld	r24, Z
     db6:	80 61       	ori	r24, 0x10	; 16
     db8:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     dba:	e8 ed       	ldi	r30, 0xD8	; 216
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	80 62       	ori	r24, 0x20	; 32
     dc2:	80 83       	st	Z, r24
		USB_INT_Disable(USB_INT_SUSPI);
		USB_INT_Enable(USB_INT_WAKEUPI);

		USB_CLK_Freeze();

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
     dc4:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <USB_Options>
     dc8:	82 ff       	sbrs	r24, 2
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     dca:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     dcc:	85 e0       	ldi	r24, 0x05	; 5
     dce:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <USB_DeviceState>
		EVENT_USB_Device_Suspend();
     dd2:	0e 94 2d 09 	call	0x125a	; 0x125a <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     dd6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     dda:	84 ff       	sbrs	r24, 4
     ddc:	34 c0       	rjmp	.+104    	; 0xe46 <__vector_10+0x140>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     dde:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
     de2:	84 ff       	sbrs	r24, 4
     de4:	30 c0       	rjmp	.+96     	; 0xe46 <__vector_10+0x140>
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
     de6:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <USB_Options>
     dea:	82 fd       	sbrc	r24, 2
     dec:	07 c0       	rjmp	.+14     	; 0xdfc <__vector_10+0xf6>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     dee:	80 e1       	ldi	r24, 0x10	; 16
     df0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     df2:	82 e1       	ldi	r24, 0x12	; 18
     df4:	89 bd       	out	0x29, r24	; 41
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     df6:	09 b4       	in	r0, 0x29	; 41
     df8:	00 fe       	sbrs	r0, 0
     dfa:	fd cf       	rjmp	.-6      	; 0xdf6 <__vector_10+0xf0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     dfc:	e8 ed       	ldi	r30, 0xD8	; 216
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	8f 7d       	andi	r24, 0xDF	; 223
     e04:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     e06:	e1 ee       	ldi	r30, 0xE1	; 225
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	8f 7e       	andi	r24, 0xEF	; 239
     e0e:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     e10:	e2 ee       	ldi	r30, 0xE2	; 226
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	8f 7e       	andi	r24, 0xEF	; 239
     e18:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     e1a:	80 81       	ld	r24, Z
     e1c:	81 60       	ori	r24, 0x01	; 1
     e1e:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     e20:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <USB_Device_ConfigurationNumber>
     e24:	88 23       	and	r24, r24
     e26:	21 f0       	breq	.+8      	; 0xe30 <__vector_10+0x12a>
		  USB_DeviceState = DEVICE_STATE_Configured;
     e28:	84 e0       	ldi	r24, 0x04	; 4
     e2a:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <USB_DeviceState>
     e2e:	09 c0       	rjmp	.+18     	; 0xe42 <__vector_10+0x13c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     e30:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     e34:	88 23       	and	r24, r24
     e36:	14 f0       	brlt	.+4      	; 0xe3c <__vector_10+0x136>
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	01 c0       	rjmp	.+2      	; 0xe3e <__vector_10+0x138>
     e3c:	83 e0       	ldi	r24, 0x03	; 3
     e3e:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     e42:	0e 94 2d 09 	call	0x125a	; 0x125a <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     e46:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     e4a:	83 ff       	sbrs	r24, 3
     e4c:	33 c0       	rjmp	.+102    	; 0xeb4 <__vector_10+0x1ae>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     e4e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
     e52:	83 ff       	sbrs	r24, 3
     e54:	2f c0       	rjmp	.+94     	; 0xeb4 <__vector_10+0x1ae>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     e56:	e1 ee       	ldi	r30, 0xE1	; 225
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	87 7f       	andi	r24, 0xF7	; 247
     e5e:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     e60:	82 e0       	ldi	r24, 0x02	; 2
     e62:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     e66:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     e6a:	80 81       	ld	r24, Z
     e6c:	8e 7f       	andi	r24, 0xFE	; 254
     e6e:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     e70:	e2 ee       	ldi	r30, 0xE2	; 226
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	8e 7f       	andi	r24, 0xFE	; 254
     e78:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     e7a:	80 81       	ld	r24, Z
     e7c:	80 61       	ori	r24, 0x10	; 16
     e7e:	80 83       	st	Z, r24

		USB_INT_Clear(USB_INT_SUSPI);
		USB_INT_Disable(USB_INT_SUSPI);
		USB_INT_Enable(USB_INT_WAKEUPI);

		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
     e80:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <USB_Device_ControlEndpointSize>
     e84:	30 e0       	ldi	r19, 0x00	; 0
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     e86:	29 30       	cpi	r18, 0x09	; 9
     e88:	31 05       	cpc	r19, r1
     e8a:	50 f0       	brcs	.+20     	; 0xea0 <__vector_10+0x19a>
     e8c:	88 e0       	ldi	r24, 0x08	; 8
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	40 e0       	ldi	r20, 0x00	; 0
				{
					MaskVal++;
     e92:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     e98:	82 17       	cp	r24, r18
     e9a:	93 07       	cpc	r25, r19
     e9c:	d0 f3       	brcs	.-12     	; 0xe92 <__vector_10+0x18c>
     e9e:	01 c0       	rjmp	.+2      	; 0xea2 <__vector_10+0x19c>
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     ea0:	40 e0       	ldi	r20, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     ea2:	42 95       	swap	r20
     ea4:	40 7f       	andi	r20, 0xF0	; 240
     ea6:	42 60       	ori	r20, 0x02	; 2
     ea8:	60 e0       	ldi	r22, 0x00	; 0
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     eb0:	0e 94 2d 09 	call	0x125a	; 0x125a <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     eb4:	ff 91       	pop	r31
     eb6:	ef 91       	pop	r30
     eb8:	bf 91       	pop	r27
     eba:	af 91       	pop	r26
     ebc:	9f 91       	pop	r25
     ebe:	8f 91       	pop	r24
     ec0:	7f 91       	pop	r23
     ec2:	6f 91       	pop	r22
     ec4:	5f 91       	pop	r21
     ec6:	4f 91       	pop	r20
     ec8:	3f 91       	pop	r19
     eca:	2f 91       	pop	r18
     ecc:	0f 90       	pop	r0
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	0f 90       	pop	r0
     ed2:	1f 90       	pop	r1
     ed4:	18 95       	reti

00000ed6 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     ed6:	0f 93       	push	r16
     ed8:	1f 93       	push	r17
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	ab 97       	sbiw	r28, 0x2b	; 43
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	ee e8       	ldi	r30, 0x8E	; 142
     ef0:	f2 e0       	ldi	r31, 0x02	; 2
     ef2:	26 e9       	ldi	r18, 0x96	; 150
     ef4:	32 e0       	ldi	r19, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     ef6:	a1 ef       	ldi	r26, 0xF1	; 241
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	8c 91       	ld	r24, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     efc:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     efe:	2e 17       	cp	r18, r30
     f00:	3f 07       	cpc	r19, r31
     f02:	d9 f7       	brne	.-10     	; 0xefa <USB_Device_ProcessControlRequest+0x24>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     f04:	0e 94 56 01 	call	0x2ac	; 0x2ac <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f08:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	if (Endpoint_IsSETUPReceived())
     f0c:	83 ff       	sbrs	r24, 3
     f0e:	80 c1       	rjmp	.+768    	; 0x1210 <USB_Device_ProcessControlRequest+0x33a>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     f10:	ee e8       	ldi	r30, 0x8E	; 142
     f12:	f2 e0       	ldi	r31, 0x02	; 2
     f14:	20 81       	ld	r18, Z

		switch (USB_ControlRequest.bRequest)
     f16:	31 81       	ldd	r19, Z+1	; 0x01
     f18:	83 2f       	mov	r24, r19
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	8a 30       	cpi	r24, 0x0A	; 10
     f1e:	91 05       	cpc	r25, r1
     f20:	08 f0       	brcs	.+2      	; 0xf24 <USB_Device_ProcessControlRequest+0x4e>
     f22:	76 c1       	rjmp	.+748    	; 0x1210 <USB_Device_ProcessControlRequest+0x33a>
     f24:	fc 01       	movw	r30, r24
     f26:	ea 5a       	subi	r30, 0xAA	; 170
     f28:	ff 4f       	sbci	r31, 0xFF	; 255
     f2a:	0c 94 7f 14 	jmp	0x28fe	; 0x28fe <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     f2e:	20 38       	cpi	r18, 0x80	; 128
     f30:	21 f0       	breq	.+8      	; 0xf3a <USB_Device_ProcessControlRequest+0x64>
     f32:	22 38       	cpi	r18, 0x82	; 130
     f34:	09 f0       	breq	.+2      	; 0xf38 <USB_Device_ProcessControlRequest+0x62>
     f36:	6c c1       	rjmp	.+728    	; 0x1210 <USB_Device_ProcessControlRequest+0x33a>
     f38:	08 c0       	rjmp	.+16     	; 0xf4a <USB_Device_ProcessControlRequest+0x74>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     f3a:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     f3e:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <USB_Device_RemoteWakeupEnabled>
     f42:	99 23       	and	r25, r25
     f44:	89 f0       	breq	.+34     	; 0xf68 <USB_Device_ProcessControlRequest+0x92>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     f46:	82 60       	ori	r24, 0x02	; 2
     f48:	0f c0       	rjmp	.+30     	; 0xf68 <USB_Device_ProcessControlRequest+0x92>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     f4a:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <USB_ControlRequest+0x4>
     f4e:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     f50:	87 30       	cpi	r24, 0x07	; 7
     f52:	08 f0       	brcs	.+2      	; 0xf56 <USB_Device_ProcessControlRequest+0x80>
     f54:	5d c1       	rjmp	.+698    	; 0x1210 <USB_Device_ProcessControlRequest+0x33a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f56:	e9 ee       	ldi	r30, 0xE9	; 233
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     f5c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
     f60:	85 fb       	bst	r24, 5
     f62:	88 27       	eor	r24, r24
     f64:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f66:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f68:	e8 ee       	ldi	r30, 0xE8	; 232
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	90 81       	ld	r25, Z
     f6e:	97 7f       	andi	r25, 0xF7	; 247
     f70:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     f72:	a1 ef       	ldi	r26, 0xF1	; 241
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
     f78:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f7a:	80 81       	ld	r24, Z
     f7c:	8e 77       	andi	r24, 0x7E	; 126
     f7e:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     f80:	0e 94 5e 05 	call	0xabc	; 0xabc <Endpoint_ClearStatusStage>
     f84:	45 c1       	rjmp	.+650    	; 0x1210 <USB_Device_ProcessControlRequest+0x33a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     f86:	22 23       	and	r18, r18
     f88:	09 f4       	brne	.+2      	; 0xf8c <USB_Device_ProcessControlRequest+0xb6>
     f8a:	51 c1       	rjmp	.+674    	; 0x122e <USB_Device_ProcessControlRequest+0x358>
     f8c:	22 30       	cpi	r18, 0x02	; 2
     f8e:	09 f0       	breq	.+2      	; 0xf92 <USB_Device_ProcessControlRequest+0xbc>
     f90:	3f c1       	rjmp	.+638    	; 0x1210 <USB_Device_ProcessControlRequest+0x33a>
     f92:	52 c1       	rjmp	.+676    	; 0x1238 <USB_Device_ProcessControlRequest+0x362>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	33 30       	cpi	r19, 0x03	; 3
     f98:	09 f0       	breq	.+2      	; 0xf9c <USB_Device_ProcessControlRequest+0xc6>
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <USB_Device_RemoteWakeupEnabled>
     fa0:	2c c0       	rjmp	.+88     	; 0xffa <USB_Device_ProcessControlRequest+0x124>
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     fa2:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <USB_ControlRequest+0x4>
     fa6:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     fa8:	9f ef       	ldi	r25, 0xFF	; 255
     faa:	98 0f       	add	r25, r24
     fac:	96 30       	cpi	r25, 0x06	; 6
     fae:	08 f0       	brcs	.+2      	; 0xfb2 <USB_Device_ProcessControlRequest+0xdc>
     fb0:	2f c1       	rjmp	.+606    	; 0x1210 <USB_Device_ProcessControlRequest+0x33a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fb2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     fb6:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     fba:	90 ff       	sbrs	r25, 0
     fbc:	1e c0       	rjmp	.+60     	; 0xffa <USB_Device_ProcessControlRequest+0x124>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     fbe:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <USB_ControlRequest+0x1>
     fc2:	93 30       	cpi	r25, 0x03	; 3
     fc4:	31 f4       	brne	.+12     	; 0xfd2 <USB_Device_ProcessControlRequest+0xfc>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     fc6:	eb ee       	ldi	r30, 0xEB	; 235
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	80 62       	ori	r24, 0x20	; 32
     fce:	80 83       	st	Z, r24
     fd0:	14 c0       	rjmp	.+40     	; 0xffa <USB_Device_ProcessControlRequest+0x124>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     fd2:	eb ee       	ldi	r30, 0xEB	; 235
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	90 81       	ld	r25, Z
     fd8:	90 61       	ori	r25, 0x10	; 16
     fda:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     fdc:	21 e0       	ldi	r18, 0x01	; 1
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	a9 01       	movw	r20, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <USB_Device_ProcessControlRequest+0x112>
     fe4:	44 0f       	add	r20, r20
     fe6:	55 1f       	adc	r21, r21
     fe8:	8a 95       	dec	r24
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <USB_Device_ProcessControlRequest+0x10e>
     fec:	aa ee       	ldi	r26, 0xEA	; 234
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	4c 93       	st	X, r20
				UERST = 0;
     ff2:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     ff4:	80 81       	ld	r24, Z
     ff6:	88 60       	ori	r24, 0x08	; 8
     ff8:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ffa:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ffe:	e8 ee       	ldi	r30, 0xE8	; 232
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	87 7f       	andi	r24, 0xF7	; 247
    1006:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1008:	0e 94 5e 05 	call	0xabc	; 0xabc <Endpoint_ClearStatusStage>
    100c:	01 c1       	rjmp	.+514    	; 0x1210 <USB_Device_ProcessControlRequest+0x33a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    100e:	21 11       	cpse	r18, r1
    1010:	ff c0       	rjmp	.+510    	; 0x1210 <USB_Device_ProcessControlRequest+0x33a>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1012:	10 91 90 02 	lds	r17, 0x0290	; 0x800290 <USB_ControlRequest+0x2>
    1016:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1018:	e3 ee       	ldi	r30, 0xE3	; 227
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	80 78       	andi	r24, 0x80	; 128
    1020:	81 2b       	or	r24, r17
    1022:	80 83       	st	Z, r24
    1024:	e8 ee       	ldi	r30, 0xE8	; 232
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	87 7f       	andi	r24, 0xF7	; 247
    102c:	80 83       	st	Z, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    102e:	0e 94 5e 05 	call	0xabc	; 0xabc <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1032:	e8 ee       	ldi	r30, 0xE8	; 232
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
    1038:	80 ff       	sbrs	r24, 0
    103a:	fd cf       	rjmp	.-6      	; 0x1036 <USB_Device_ProcessControlRequest+0x160>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    103c:	e3 ee       	ldi	r30, 0xE3	; 227
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	80 68       	ori	r24, 0x80	; 128
    1044:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1046:	11 11       	cpse	r17, r1
    1048:	02 c0       	rjmp	.+4      	; 0x104e <USB_Device_ProcessControlRequest+0x178>
    104a:	82 e0       	ldi	r24, 0x02	; 2
    104c:	01 c0       	rjmp	.+2      	; 0x1050 <USB_Device_ProcessControlRequest+0x17a>
    104e:	83 e0       	ldi	r24, 0x03	; 3
    1050:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <USB_DeviceState>
    1054:	dd c0       	rjmp	.+442    	; 0x1210 <USB_Device_ProcessControlRequest+0x33a>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1056:	20 58       	subi	r18, 0x80	; 128
    1058:	22 30       	cpi	r18, 0x02	; 2
    105a:	08 f0       	brcs	.+2      	; 0x105e <USB_Device_ProcessControlRequest+0x188>
    105c:	d9 c0       	rjmp	.+434    	; 0x1210 <USB_Device_ProcessControlRequest+0x33a>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    105e:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <USB_ControlRequest+0x2>
    1062:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <USB_ControlRequest+0x3>
    1066:	8c 3d       	cpi	r24, 0xDC	; 220
    1068:	53 e0       	ldi	r21, 0x03	; 3
    106a:	95 07       	cpc	r25, r21
    106c:	a1 f5       	brne	.+104    	; 0x10d6 <USB_Device_ProcessControlRequest+0x200>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    106e:	83 e0       	ldi	r24, 0x03	; 3
    1070:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1072:	8a e2       	ldi	r24, 0x2A	; 42
    1074:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1076:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1078:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    107a:	de 01       	movw	r26, r28
    107c:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    107e:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1080:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1082:	41 e2       	ldi	r20, 0x21	; 33
    1084:	e3 2f       	mov	r30, r19
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    108c:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
    108e:	20 ff       	sbrs	r18, 0
    1090:	03 c0       	rjmp	.+6      	; 0x1098 <USB_Device_ProcessControlRequest+0x1c2>
					{
						SerialByte >>= 4;
    1092:	82 95       	swap	r24
    1094:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    1096:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1098:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    109a:	8a 30       	cpi	r24, 0x0A	; 10
    109c:	18 f0       	brcs	.+6      	; 0x10a4 <USB_Device_ProcessControlRequest+0x1ce>
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	c7 96       	adiw	r24, 0x37	; 55
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <USB_Device_ProcessControlRequest+0x1d2>
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	c0 96       	adiw	r24, 0x30	; 48
    10a8:	8d 93       	st	X+, r24
    10aa:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    10ac:	2f 5f       	subi	r18, 0xFF	; 255
    10ae:	24 31       	cpi	r18, 0x14	; 20
    10b0:	49 f7       	brne	.-46     	; 0x1084 <USB_Device_ProcessControlRequest+0x1ae>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    10b2:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10b4:	08 ee       	ldi	r16, 0xE8	; 232
    10b6:	10 e0       	ldi	r17, 0x00	; 0
    10b8:	f8 01       	movw	r30, r16
    10ba:	80 81       	ld	r24, Z
    10bc:	87 7f       	andi	r24, 0xF7	; 247
    10be:	80 83       	st	Z, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    10c0:	6a e2       	ldi	r22, 0x2A	; 42
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	ce 01       	movw	r24, r28
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	0e 94 a1 02 	call	0x542	; 0x542 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    10cc:	f8 01       	movw	r30, r16
    10ce:	80 81       	ld	r24, Z
    10d0:	8b 77       	andi	r24, 0x7B	; 123
    10d2:	80 83       	st	Z, r24
    10d4:	9d c0       	rjmp	.+314    	; 0x1210 <USB_Device_ProcessControlRequest+0x33a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    10d6:	60 91 92 02 	lds	r22, 0x0292	; 0x800292 <USB_ControlRequest+0x4>
    10da:	70 91 93 02 	lds	r23, 0x0293	; 0x800293 <USB_ControlRequest+0x5>
    10de:	9e 01       	movw	r18, r28
    10e0:	25 5d       	subi	r18, 0xD5	; 213
    10e2:	3f 4f       	sbci	r19, 0xFF	; 255
    10e4:	ae 01       	movw	r20, r28
    10e6:	4f 5f       	subi	r20, 0xFF	; 255
    10e8:	5f 4f       	sbci	r21, 0xFF	; 255
    10ea:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <CALLBACK_USB_GetDescriptor>
    10ee:	bc 01       	movw	r22, r24
    10f0:	89 2b       	or	r24, r25
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <USB_Device_ProcessControlRequest+0x220>
    10f4:	8d c0       	rjmp	.+282    	; 0x1210 <USB_Device_ProcessControlRequest+0x33a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10f6:	e8 ee       	ldi	r30, 0xE8	; 232
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	87 7f       	andi	r24, 0xF7	; 247
    10fe:	80 83       	st	Z, r24
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
	#else
	if (DescriptorAddressSpace == MEMSPACE_FLASH)
    1100:	8b a5       	ldd	r24, Y+43	; 0x2b
    1102:	81 11       	cpse	r24, r1
    1104:	05 c0       	rjmp	.+10     	; 0x1110 <USB_Device_ProcessControlRequest+0x23a>
	  Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	9a 81       	ldd	r25, Y+2	; 0x02
    110a:	0e 94 b1 03 	call	0x762	; 0x762 <Endpoint_Write_Control_PStream_LE>
    110e:	0b c0       	rjmp	.+22     	; 0x1126 <USB_Device_ProcessControlRequest+0x250>
	else if (DescriptorAddressSpace == MEMSPACE_EEPROM)
    1110:	81 30       	cpi	r24, 0x01	; 1
    1112:	29 f4       	brne	.+10     	; 0x111e <USB_Device_ProcessControlRequest+0x248>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	9a 81       	ldd	r25, Y+2	; 0x02
    1118:	0e 94 49 04 	call	0x892	; 0x892 <Endpoint_Write_Control_EStream_LE>
    111c:	04 c0       	rjmp	.+8      	; 0x1126 <USB_Device_ProcessControlRequest+0x250>
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	9a 81       	ldd	r25, Y+2	; 0x02
    1122:	0e 94 a1 02 	call	0x542	; 0x542 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1126:	e8 ee       	ldi	r30, 0xE8	; 232
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	8b 77       	andi	r24, 0x7B	; 123
    112e:	80 83       	st	Z, r24
    1130:	6f c0       	rjmp	.+222    	; 0x1210 <USB_Device_ProcessControlRequest+0x33a>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1132:	20 38       	cpi	r18, 0x80	; 128
    1134:	09 f0       	breq	.+2      	; 0x1138 <USB_Device_ProcessControlRequest+0x262>
    1136:	6c c0       	rjmp	.+216    	; 0x1210 <USB_Device_ProcessControlRequest+0x33a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1138:	e8 ee       	ldi	r30, 0xE8	; 232
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	87 7f       	andi	r24, 0xF7	; 247
    1140:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1142:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1146:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    114a:	80 81       	ld	r24, Z
    114c:	8e 77       	andi	r24, 0x7E	; 126
    114e:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1150:	0e 94 5e 05 	call	0xabc	; 0xabc <Endpoint_ClearStatusStage>
    1154:	5d c0       	rjmp	.+186    	; 0x1210 <USB_Device_ProcessControlRequest+0x33a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1156:	21 11       	cpse	r18, r1
    1158:	5b c0       	rjmp	.+182    	; 0x1210 <USB_Device_ProcessControlRequest+0x33a>
		#else
			uint8_t MemoryAddressSpace;
		#endif
	#endif

	if (CALLBACK_USB_GetDescriptor((DTYPE_Device << 8), 0, (void*)&DevDescriptorPtr
    115a:	9e 01       	movw	r18, r28
    115c:	25 5d       	subi	r18, 0xD5	; 213
    115e:	3f 4f       	sbci	r19, 0xFF	; 255
    1160:	ae 01       	movw	r20, r28
    1162:	4f 5f       	subi	r20, 0xFF	; 255
    1164:	5f 4f       	sbci	r21, 0xFF	; 255
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	70 e0       	ldi	r23, 0x00	; 0
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	91 e0       	ldi	r25, 0x01	; 1
    116e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <CALLBACK_USB_GetDescriptor>
    1172:	89 2b       	or	r24, r25
    1174:	09 f4       	brne	.+2      	; 0x1178 <USB_Device_ProcessControlRequest+0x2a2>
    1176:	4c c0       	rjmp	.+152    	; 0x1210 <USB_Device_ProcessControlRequest+0x33a>
	{
		return;
	}

	#if defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	if (MemoryAddressSpace == MEMSPACE_FLASH)
    1178:	8b a5       	ldd	r24, Y+43	; 0x2b
    117a:	81 11       	cpse	r24, r1
    117c:	0e c0       	rjmp	.+28     	; 0x119a <USB_Device_ProcessControlRequest+0x2c4>
	{
		if (((uint8_t)USB_ControlRequest.wValue > pgm_read_byte(&DevDescriptorPtr->NumberOfConfigurations)))
    117e:	e9 81       	ldd	r30, Y+1	; 0x01
    1180:	fa 81       	ldd	r31, Y+2	; 0x02
    1182:	71 96       	adiw	r30, 0x11	; 17
    1184:	84 91       	lpm	r24, Z
    1186:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <USB_ControlRequest+0x2>
    118a:	30 91 91 02 	lds	r19, 0x0291	; 0x800291 <USB_ControlRequest+0x3>
    118e:	33 27       	eor	r19, r19
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	82 17       	cp	r24, r18
    1194:	93 07       	cpc	r25, r19
    1196:	e4 f1       	brlt	.+120    	; 0x1210 <USB_Device_ProcessControlRequest+0x33a>
    1198:	1d c0       	rjmp	.+58     	; 0x11d4 <USB_Device_ProcessControlRequest+0x2fe>
		  return;
	}
	else if (MemoryAddressSpace == MEMSPACE_EEPROM)
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	79 f4       	brne	.+30     	; 0x11bc <USB_Device_ProcessControlRequest+0x2e6>
	{
		if (((uint8_t)USB_ControlRequest.wValue > eeprom_read_byte(&DevDescriptorPtr->NumberOfConfigurations)))
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	9a 81       	ldd	r25, Y+2	; 0x02
    11a2:	41 96       	adiw	r24, 0x11	; 17
    11a4:	0e 94 bf 14 	call	0x297e	; 0x297e <eeprom_read_byte>
    11a8:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <USB_ControlRequest+0x2>
    11ac:	30 91 91 02 	lds	r19, 0x0291	; 0x800291 <USB_ControlRequest+0x3>
    11b0:	33 27       	eor	r19, r19
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	82 17       	cp	r24, r18
    11b6:	93 07       	cpc	r25, r19
    11b8:	5c f1       	brlt	.+86     	; 0x1210 <USB_Device_ProcessControlRequest+0x33a>
    11ba:	0c c0       	rjmp	.+24     	; 0x11d4 <USB_Device_ProcessControlRequest+0x2fe>
		  return;
	}
	else
	{
		if ((uint8_t)USB_ControlRequest.wValue > DevDescriptorPtr->NumberOfConfigurations)
    11bc:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <USB_ControlRequest+0x2>
    11c0:	30 91 91 02 	lds	r19, 0x0291	; 0x800291 <USB_ControlRequest+0x3>
    11c4:	33 27       	eor	r19, r19
    11c6:	e9 81       	ldd	r30, Y+1	; 0x01
    11c8:	fa 81       	ldd	r31, Y+2	; 0x02
    11ca:	81 89       	ldd	r24, Z+17	; 0x11
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	82 17       	cp	r24, r18
    11d0:	93 07       	cpc	r25, r19
    11d2:	f4 f0       	brlt	.+60     	; 0x1210 <USB_Device_ProcessControlRequest+0x33a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    11d4:	e8 ee       	ldi	r30, 0xE8	; 232
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	87 7f       	andi	r24, 0xF7	; 247
    11dc:	80 83       	st	Z, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    11de:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <USB_ControlRequest+0x2>
    11e2:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    11e6:	0e 94 5e 05 	call	0xabc	; 0xabc <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    11ea:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <USB_Device_ConfigurationNumber>
    11ee:	88 23       	and	r24, r24
    11f0:	21 f0       	breq	.+8      	; 0x11fa <USB_Device_ProcessControlRequest+0x324>
	  USB_DeviceState = DEVICE_STATE_Configured;
    11f2:	84 e0       	ldi	r24, 0x04	; 4
    11f4:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <USB_DeviceState>
    11f8:	09 c0       	rjmp	.+18     	; 0x120c <USB_Device_ProcessControlRequest+0x336>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    11fa:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    11fe:	88 23       	and	r24, r24
    1200:	14 f0       	brlt	.+4      	; 0x1206 <USB_Device_ProcessControlRequest+0x330>
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	01 c0       	rjmp	.+2      	; 0x1208 <USB_Device_ProcessControlRequest+0x332>
    1206:	84 e0       	ldi	r24, 0x04	; 4
    1208:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    120c:	0e 94 3e 01 	call	0x27c	; 0x27c <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1210:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1214:	83 ff       	sbrs	r24, 3
    1216:	16 c0       	rjmp	.+44     	; 0x1244 <USB_Device_ProcessControlRequest+0x36e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1218:	e8 ee       	ldi	r30, 0xE8	; 232
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	87 7f       	andi	r24, 0xF7	; 247
    1220:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1222:	eb ee       	ldi	r30, 0xEB	; 235
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	80 62       	ori	r24, 0x20	; 32
    122a:	80 83       	st	Z, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    122c:	0b c0       	rjmp	.+22     	; 0x1244 <USB_Device_ProcessControlRequest+0x36e>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    122e:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <USB_ControlRequest+0x2>
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	69 f7       	brne	.-38     	; 0x1210 <USB_Device_ProcessControlRequest+0x33a>
    1236:	ae ce       	rjmp	.-676    	; 0xf94 <USB_Device_ProcessControlRequest+0xbe>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1238:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <USB_ControlRequest+0x2>
    123c:	88 23       	and	r24, r24
    123e:	09 f4       	brne	.+2      	; 0x1242 <USB_Device_ProcessControlRequest+0x36c>
    1240:	b0 ce       	rjmp	.-672    	; 0xfa2 <USB_Device_ProcessControlRequest+0xcc>
    1242:	db ce       	rjmp	.-586    	; 0xffa <USB_Device_ProcessControlRequest+0x124>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1244:	ab 96       	adiw	r28, 0x2b	; 43
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	cd bf       	out	0x3d, r28	; 61
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	1f 91       	pop	r17
    1256:	0f 91       	pop	r16
    1258:	08 95       	ret

0000125a <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    125a:	08 95       	ret

0000125c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    125c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    125e:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <USB_DeviceState>
    1262:	88 23       	and	r24, r24
    1264:	a1 f0       	breq	.+40     	; 0x128e <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1266:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    126a:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    126c:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    1270:	98 2f       	mov	r25, r24
    1272:	91 70       	andi	r25, 0x01	; 1
    1274:	80 fd       	sbrc	r24, 0
    1276:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1278:	c9 2b       	or	r28, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    127a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    127e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1282:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1284:	0e 94 6b 07 	call	0xed6	; 0xed6 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1288:	cf 70       	andi	r28, 0x0F	; 15
    128a:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    128e:	cf 91       	pop	r28
    1290:	08 95       	ret

00001292 <__vector_default>:
	return ADMUX;
}

void watchdogInit()
{
	WDTCSR |= (1<<WDE);
    1292:	1f 92       	push	r1
    1294:	0f 92       	push	r0
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	0f 92       	push	r0
    129a:	11 24       	eor	r1, r1
    129c:	0f 90       	pop	r0
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	0f 90       	pop	r0
    12a2:	1f 90       	pop	r1
    12a4:	18 95       	reti

000012a6 <alterFanSpeed>:
    12a6:	82 30       	cpi	r24, 0x02	; 2
    12a8:	91 05       	cpc	r25, r1
    12aa:	09 f4       	brne	.+2      	; 0x12ae <alterFanSpeed+0x8>
    12ac:	8b c0       	rjmp	.+278    	; 0x13c4 <alterFanSpeed+0x11e>
    12ae:	34 f4       	brge	.+12     	; 0x12bc <alterFanSpeed+0x16>
    12b0:	00 97       	sbiw	r24, 0x00	; 0
    12b2:	71 f0       	breq	.+28     	; 0x12d0 <alterFanSpeed+0x2a>
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	09 f4       	brne	.+2      	; 0x12ba <alterFanSpeed+0x14>
    12b8:	48 c0       	rjmp	.+144    	; 0x134a <alterFanSpeed+0xa4>
    12ba:	08 95       	ret
    12bc:	84 30       	cpi	r24, 0x04	; 4
    12be:	91 05       	cpc	r25, r1
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <alterFanSpeed+0x1e>
    12c2:	fa c0       	rjmp	.+500    	; 0x14b8 <alterFanSpeed+0x212>
    12c4:	0c f4       	brge	.+2      	; 0x12c8 <alterFanSpeed+0x22>
    12c6:	bb c0       	rjmp	.+374    	; 0x143e <alterFanSpeed+0x198>
    12c8:	05 97       	sbiw	r24, 0x05	; 5
    12ca:	09 f4       	brne	.+2      	; 0x12ce <alterFanSpeed+0x28>
    12cc:	32 c1       	rjmp	.+612    	; 0x1532 <alterFanSpeed+0x28c>
    12ce:	08 95       	ret
    12d0:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <g_fanPercentages>
    12d4:	88 23       	and	r24, r24
    12d6:	61 f1       	breq	.+88     	; 0x1330 <alterFanSpeed+0x8a>
    12d8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <g_timer3FanMask>
    12dc:	84 60       	ori	r24, 0x04	; 4
    12de:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <g_timer3FanMask>
    12e2:	5a 9a       	sbi	0x0b, 2	; 11
    12e4:	2a 9a       	sbi	0x05, 2	; 5
    12e6:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <g_fanPercentages>
    12ea:	84 36       	cpi	r24, 0x64	; 100
    12ec:	31 f4       	brne	.+12     	; 0x12fa <alterFanSpeed+0x54>
    12ee:	e1 e7       	ldi	r30, 0x71	; 113
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	8d 7f       	andi	r24, 0xFD	; 253
    12f6:	80 83       	st	Z, r24
    12f8:	08 95       	ret
    12fa:	e1 e7       	ldi	r30, 0x71	; 113
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	82 60       	ori	r24, 0x02	; 2
    1302:	80 83       	st	Z, r24
    1304:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <g_fanPercentages>
    1308:	0a 2e       	mov	r0, r26
    130a:	00 0c       	add	r0, r0
    130c:	bb 0b       	sbc	r27, r27
    130e:	2e ef       	ldi	r18, 0xFE	; 254
    1310:	33 e0       	ldi	r19, 0x03	; 3
    1312:	0e 94 85 14 	call	0x290a	; 0x290a <__usmulhisi3>
    1316:	24 e6       	ldi	r18, 0x64	; 100
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	40 e0       	ldi	r20, 0x00	; 0
    131c:	50 e0       	ldi	r21, 0x00	; 0
    131e:	0e 94 3e 14 	call	0x287c	; 0x287c <__udivmodsi4>
    1322:	2f 5f       	subi	r18, 0xFF	; 255
    1324:	3f 4f       	sbci	r19, 0xFF	; 255
    1326:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__DATA_REGION_ORIGIN__+0x39>
    132a:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__DATA_REGION_ORIGIN__+0x38>
    132e:	08 95       	ret
    1330:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <g_timer3FanMask>
    1334:	8b 7f       	andi	r24, 0xFB	; 251
    1336:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <g_timer3FanMask>
    133a:	e1 e7       	ldi	r30, 0x71	; 113
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	8d 7f       	andi	r24, 0xFD	; 253
    1342:	80 83       	st	Z, r24
    1344:	5a 98       	cbi	0x0b, 2	; 11
    1346:	2a 98       	cbi	0x05, 2	; 5
    1348:	08 95       	ret
    134a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <g_fanPercentages+0x1>
    134e:	88 23       	and	r24, r24
    1350:	61 f1       	breq	.+88     	; 0x13aa <alterFanSpeed+0x104>
    1352:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <g_timer3FanMask>
    1356:	88 60       	ori	r24, 0x08	; 8
    1358:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <g_timer3FanMask>
    135c:	5b 9a       	sbi	0x0b, 3	; 11
    135e:	2b 9a       	sbi	0x05, 3	; 5
    1360:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <g_fanPercentages+0x1>
    1364:	84 36       	cpi	r24, 0x64	; 100
    1366:	31 f4       	brne	.+12     	; 0x1374 <alterFanSpeed+0xce>
    1368:	e1 e7       	ldi	r30, 0x71	; 113
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	8b 7f       	andi	r24, 0xFB	; 251
    1370:	80 83       	st	Z, r24
    1372:	08 95       	ret
    1374:	e1 e7       	ldi	r30, 0x71	; 113
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	84 60       	ori	r24, 0x04	; 4
    137c:	80 83       	st	Z, r24
    137e:	a0 91 2c 01 	lds	r26, 0x012C	; 0x80012c <g_fanPercentages+0x1>
    1382:	0a 2e       	mov	r0, r26
    1384:	00 0c       	add	r0, r0
    1386:	bb 0b       	sbc	r27, r27
    1388:	2e ef       	ldi	r18, 0xFE	; 254
    138a:	33 e0       	ldi	r19, 0x03	; 3
    138c:	0e 94 85 14 	call	0x290a	; 0x290a <__usmulhisi3>
    1390:	24 e6       	ldi	r18, 0x64	; 100
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	40 e0       	ldi	r20, 0x00	; 0
    1396:	50 e0       	ldi	r21, 0x00	; 0
    1398:	0e 94 3e 14 	call	0x287c	; 0x287c <__udivmodsi4>
    139c:	2f 5f       	subi	r18, 0xFF	; 255
    139e:	3f 4f       	sbci	r19, 0xFF	; 255
    13a0:	30 93 9b 00 	sts	0x009B, r19	; 0x80009b <__DATA_REGION_ORIGIN__+0x3b>
    13a4:	20 93 9a 00 	sts	0x009A, r18	; 0x80009a <__DATA_REGION_ORIGIN__+0x3a>
    13a8:	08 95       	ret
    13aa:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <g_timer3FanMask>
    13ae:	87 7f       	andi	r24, 0xF7	; 247
    13b0:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <g_timer3FanMask>
    13b4:	e1 e7       	ldi	r30, 0x71	; 113
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	8b 7f       	andi	r24, 0xFB	; 251
    13bc:	80 83       	st	Z, r24
    13be:	5b 98       	cbi	0x0b, 3	; 11
    13c0:	2b 98       	cbi	0x05, 3	; 5
    13c2:	08 95       	ret
    13c4:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <g_fanPercentages+0x2>
    13c8:	88 23       	and	r24, r24
    13ca:	61 f1       	breq	.+88     	; 0x1424 <alterFanSpeed+0x17e>
    13cc:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <g_timer3FanMask>
    13d0:	80 61       	ori	r24, 0x10	; 16
    13d2:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <g_timer3FanMask>
    13d6:	5c 9a       	sbi	0x0b, 4	; 11
    13d8:	2c 9a       	sbi	0x05, 4	; 5
    13da:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <g_fanPercentages+0x2>
    13de:	84 36       	cpi	r24, 0x64	; 100
    13e0:	31 f4       	brne	.+12     	; 0x13ee <alterFanSpeed+0x148>
    13e2:	e1 e7       	ldi	r30, 0x71	; 113
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	87 7f       	andi	r24, 0xF7	; 247
    13ea:	80 83       	st	Z, r24
    13ec:	08 95       	ret
    13ee:	e1 e7       	ldi	r30, 0x71	; 113
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	88 60       	ori	r24, 0x08	; 8
    13f6:	80 83       	st	Z, r24
    13f8:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <g_fanPercentages+0x2>
    13fc:	0a 2e       	mov	r0, r26
    13fe:	00 0c       	add	r0, r0
    1400:	bb 0b       	sbc	r27, r27
    1402:	2e ef       	ldi	r18, 0xFE	; 254
    1404:	33 e0       	ldi	r19, 0x03	; 3
    1406:	0e 94 85 14 	call	0x290a	; 0x290a <__usmulhisi3>
    140a:	24 e6       	ldi	r18, 0x64	; 100
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	40 e0       	ldi	r20, 0x00	; 0
    1410:	50 e0       	ldi	r21, 0x00	; 0
    1412:	0e 94 3e 14 	call	0x287c	; 0x287c <__udivmodsi4>
    1416:	2f 5f       	subi	r18, 0xFF	; 255
    1418:	3f 4f       	sbci	r19, 0xFF	; 255
    141a:	30 93 9d 00 	sts	0x009D, r19	; 0x80009d <__DATA_REGION_ORIGIN__+0x3d>
    141e:	20 93 9c 00 	sts	0x009C, r18	; 0x80009c <__DATA_REGION_ORIGIN__+0x3c>
    1422:	08 95       	ret
    1424:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <g_timer3FanMask>
    1428:	8f 7e       	andi	r24, 0xEF	; 239
    142a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <g_timer3FanMask>
    142e:	e1 e7       	ldi	r30, 0x71	; 113
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	87 7f       	andi	r24, 0xF7	; 247
    1436:	80 83       	st	Z, r24
    1438:	5c 98       	cbi	0x0b, 4	; 11
    143a:	2c 98       	cbi	0x05, 4	; 5
    143c:	08 95       	ret
    143e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <g_fanPercentages+0x3>
    1442:	88 23       	and	r24, r24
    1444:	61 f1       	breq	.+88     	; 0x149e <alterFanSpeed+0x1f8>
    1446:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <g_timer1FanMask>
    144a:	80 62       	ori	r24, 0x20	; 32
    144c:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <g_timer1FanMask>
    1450:	5d 9a       	sbi	0x0b, 5	; 11
    1452:	2d 9a       	sbi	0x05, 5	; 5
    1454:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <g_fanPercentages+0x3>
    1458:	84 36       	cpi	r24, 0x64	; 100
    145a:	31 f4       	brne	.+12     	; 0x1468 <alterFanSpeed+0x1c2>
    145c:	ef e6       	ldi	r30, 0x6F	; 111
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	8d 7f       	andi	r24, 0xFD	; 253
    1464:	80 83       	st	Z, r24
    1466:	08 95       	ret
    1468:	ef e6       	ldi	r30, 0x6F	; 111
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	82 60       	ori	r24, 0x02	; 2
    1470:	80 83       	st	Z, r24
    1472:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <g_fanPercentages+0x3>
    1476:	0a 2e       	mov	r0, r26
    1478:	00 0c       	add	r0, r0
    147a:	bb 0b       	sbc	r27, r27
    147c:	2e ef       	ldi	r18, 0xFE	; 254
    147e:	33 e0       	ldi	r19, 0x03	; 3
    1480:	0e 94 85 14 	call	0x290a	; 0x290a <__usmulhisi3>
    1484:	24 e6       	ldi	r18, 0x64	; 100
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	40 e0       	ldi	r20, 0x00	; 0
    148a:	50 e0       	ldi	r21, 0x00	; 0
    148c:	0e 94 3e 14 	call	0x287c	; 0x287c <__udivmodsi4>
    1490:	2f 5f       	subi	r18, 0xFF	; 255
    1492:	3f 4f       	sbci	r19, 0xFF	; 255
    1494:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1498:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    149c:	08 95       	ret
    149e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <g_timer1FanMask>
    14a2:	8f 7d       	andi	r24, 0xDF	; 223
    14a4:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <g_timer1FanMask>
    14a8:	ef e6       	ldi	r30, 0x6F	; 111
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	8d 7f       	andi	r24, 0xFD	; 253
    14b0:	80 83       	st	Z, r24
    14b2:	5d 98       	cbi	0x0b, 5	; 11
    14b4:	2d 98       	cbi	0x05, 5	; 5
    14b6:	08 95       	ret
    14b8:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <g_fanPercentages+0x4>
    14bc:	88 23       	and	r24, r24
    14be:	61 f1       	breq	.+88     	; 0x1518 <alterFanSpeed+0x272>
    14c0:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <g_timer1FanMask>
    14c4:	80 64       	ori	r24, 0x40	; 64
    14c6:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <g_timer1FanMask>
    14ca:	5e 9a       	sbi	0x0b, 6	; 11
    14cc:	2e 9a       	sbi	0x05, 6	; 5
    14ce:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <g_fanPercentages+0x4>
    14d2:	84 36       	cpi	r24, 0x64	; 100
    14d4:	31 f4       	brne	.+12     	; 0x14e2 <alterFanSpeed+0x23c>
    14d6:	ef e6       	ldi	r30, 0x6F	; 111
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	8b 7f       	andi	r24, 0xFB	; 251
    14de:	80 83       	st	Z, r24
    14e0:	08 95       	ret
    14e2:	ef e6       	ldi	r30, 0x6F	; 111
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	84 60       	ori	r24, 0x04	; 4
    14ea:	80 83       	st	Z, r24
    14ec:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <g_fanPercentages+0x4>
    14f0:	0a 2e       	mov	r0, r26
    14f2:	00 0c       	add	r0, r0
    14f4:	bb 0b       	sbc	r27, r27
    14f6:	2e ef       	ldi	r18, 0xFE	; 254
    14f8:	33 e0       	ldi	r19, 0x03	; 3
    14fa:	0e 94 85 14 	call	0x290a	; 0x290a <__usmulhisi3>
    14fe:	24 e6       	ldi	r18, 0x64	; 100
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	40 e0       	ldi	r20, 0x00	; 0
    1504:	50 e0       	ldi	r21, 0x00	; 0
    1506:	0e 94 3e 14 	call	0x287c	; 0x287c <__udivmodsi4>
    150a:	2f 5f       	subi	r18, 0xFF	; 255
    150c:	3f 4f       	sbci	r19, 0xFF	; 255
    150e:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    1512:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
    1516:	08 95       	ret
    1518:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <g_timer1FanMask>
    151c:	8f 7b       	andi	r24, 0xBF	; 191
    151e:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <g_timer1FanMask>
    1522:	ef e6       	ldi	r30, 0x6F	; 111
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	8b 7f       	andi	r24, 0xFB	; 251
    152a:	80 83       	st	Z, r24
    152c:	5e 98       	cbi	0x0b, 6	; 11
    152e:	2e 98       	cbi	0x05, 6	; 5
    1530:	08 95       	ret
    1532:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <g_fanPercentages+0x5>
    1536:	88 23       	and	r24, r24
    1538:	61 f1       	breq	.+88     	; 0x1592 <alterFanSpeed+0x2ec>
    153a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <g_timer1FanMask>
    153e:	80 68       	ori	r24, 0x80	; 128
    1540:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <g_timer1FanMask>
    1544:	5f 9a       	sbi	0x0b, 7	; 11
    1546:	2f 9a       	sbi	0x05, 7	; 5
    1548:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <g_fanPercentages+0x5>
    154c:	84 36       	cpi	r24, 0x64	; 100
    154e:	31 f4       	brne	.+12     	; 0x155c <alterFanSpeed+0x2b6>
    1550:	ef e6       	ldi	r30, 0x6F	; 111
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	87 7f       	andi	r24, 0xF7	; 247
    1558:	80 83       	st	Z, r24
    155a:	08 95       	ret
    155c:	ef e6       	ldi	r30, 0x6F	; 111
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	88 60       	ori	r24, 0x08	; 8
    1564:	80 83       	st	Z, r24
    1566:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <g_fanPercentages+0x5>
    156a:	0a 2e       	mov	r0, r26
    156c:	00 0c       	add	r0, r0
    156e:	bb 0b       	sbc	r27, r27
    1570:	2e ef       	ldi	r18, 0xFE	; 254
    1572:	33 e0       	ldi	r19, 0x03	; 3
    1574:	0e 94 85 14 	call	0x290a	; 0x290a <__usmulhisi3>
    1578:	24 e6       	ldi	r18, 0x64	; 100
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e0       	ldi	r20, 0x00	; 0
    157e:	50 e0       	ldi	r21, 0x00	; 0
    1580:	0e 94 3e 14 	call	0x287c	; 0x287c <__udivmodsi4>
    1584:	2f 5f       	subi	r18, 0xFF	; 255
    1586:	3f 4f       	sbci	r19, 0xFF	; 255
    1588:	30 93 8d 00 	sts	0x008D, r19	; 0x80008d <__DATA_REGION_ORIGIN__+0x2d>
    158c:	20 93 8c 00 	sts	0x008C, r18	; 0x80008c <__DATA_REGION_ORIGIN__+0x2c>
    1590:	08 95       	ret
    1592:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <g_timer1FanMask>
    1596:	8f 77       	andi	r24, 0x7F	; 127
    1598:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <g_timer1FanMask>
    159c:	ef e6       	ldi	r30, 0x6F	; 111
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	87 7f       	andi	r24, 0xF7	; 247
    15a4:	80 83       	st	Z, r24
    15a6:	5f 98       	cbi	0x0b, 7	; 11
    15a8:	2f 98       	cbi	0x05, 7	; 5
    15aa:	08 95       	ret

000015ac <getFanPercent>:
    15ac:	2f 92       	push	r2
    15ae:	3f 92       	push	r3
    15b0:	4f 92       	push	r4
    15b2:	5f 92       	push	r5
    15b4:	6f 92       	push	r6
    15b6:	7f 92       	push	r7
    15b8:	8f 92       	push	r8
    15ba:	9f 92       	push	r9
    15bc:	af 92       	push	r10
    15be:	bf 92       	push	r11
    15c0:	cf 92       	push	r12
    15c2:	df 92       	push	r13
    15c4:	ef 92       	push	r14
    15c6:	ff 92       	push	r15
    15c8:	0f 93       	push	r16
    15ca:	1f 93       	push	r17
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	28 97       	sbiw	r28, 0x08	; 8
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	f8 94       	cli
    15da:	de bf       	out	0x3e, r29	; 62
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	cd bf       	out	0x3d, r28	; 61
    15e0:	00 e0       	ldi	r16, 0x00	; 0
    15e2:	10 e0       	ldi	r17, 0x00	; 0
    15e4:	0f 2e       	mov	r0, r31
    15e6:	f5 e1       	ldi	r31, 0x15	; 21
    15e8:	df 2e       	mov	r13, r31
    15ea:	f0 2d       	mov	r31, r0
    15ec:	d0 9e       	mul	r13, r16
    15ee:	f0 01       	movw	r30, r0
    15f0:	d1 9e       	mul	r13, r17
    15f2:	f0 0d       	add	r31, r0
    15f4:	11 24       	eor	r1, r1
    15f6:	e4 51       	subi	r30, 0x14	; 20
    15f8:	fe 4f       	sbci	r31, 0xFE	; 254
    15fa:	84 89       	ldd	r24, Z+20	; 0x14
    15fc:	81 11       	cpse	r24, r1
    15fe:	05 c0       	rjmp	.+10     	; 0x160a <getFanPercent+0x5e>
    1600:	e0 90 25 01 	lds	r14, 0x0125	; 0x800125 <g_cpuTemp>
    1604:	f0 90 26 01 	lds	r15, 0x0126	; 0x800126 <g_cpuTemp+0x1>
    1608:	13 c0       	rjmp	.+38     	; 0x1630 <getFanPercent+0x84>
    160a:	d0 9e       	mul	r13, r16
    160c:	f0 01       	movw	r30, r0
    160e:	d1 9e       	mul	r13, r17
    1610:	f0 0d       	add	r31, r0
    1612:	11 24       	eor	r1, r1
    1614:	e4 51       	subi	r30, 0x14	; 20
    1616:	fe 4f       	sbci	r31, 0xFE	; 254
    1618:	84 89       	ldd	r24, Z+20	; 0x14
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	29 f4       	brne	.+10     	; 0x1628 <getFanPercent+0x7c>
    161e:	e0 90 29 01 	lds	r14, 0x0129	; 0x800129 <g_temp1>
    1622:	f0 90 2a 01 	lds	r15, 0x012A	; 0x80012a <g_temp1+0x1>
    1626:	04 c0       	rjmp	.+8      	; 0x1630 <getFanPercent+0x84>
    1628:	e0 90 27 01 	lds	r14, 0x0127	; 0x800127 <g_temp2>
    162c:	f0 90 28 01 	lds	r15, 0x0128	; 0x800128 <g_temp2+0x1>
    1630:	d0 9e       	mul	r13, r16
    1632:	f0 01       	movw	r30, r0
    1634:	d1 9e       	mul	r13, r17
    1636:	f0 0d       	add	r31, r0
    1638:	11 24       	eor	r1, r1
    163a:	e4 51       	subi	r30, 0x14	; 20
    163c:	fe 4f       	sbci	r31, 0xFE	; 254
    163e:	80 81       	ld	r24, Z
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	e8 16       	cp	r14, r24
    1644:	f9 06       	cpc	r15, r25
    1646:	24 f1       	brlt	.+72     	; 0x1690 <getFanPercent+0xe4>
    1648:	22 e0       	ldi	r18, 0x02	; 2
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	3a 83       	std	Y+2, r19	; 0x02
    164e:	29 83       	std	Y+1, r18	; 0x01
    1650:	9f 01       	movw	r18, r30
    1652:	10 c0       	rjmp	.+32     	; 0x1674 <getFanPercent+0xc8>
    1654:	d0 9e       	mul	r13, r16
    1656:	f0 01       	movw	r30, r0
    1658:	d1 9e       	mul	r13, r17
    165a:	f0 0d       	add	r31, r0
    165c:	11 24       	eor	r1, r1
    165e:	e4 51       	subi	r30, 0x14	; 20
    1660:	fe 4f       	sbci	r31, 0xFE	; 254
    1662:	83 89       	ldd	r24, Z+19	; 0x13
    1664:	f8 01       	movw	r30, r16
    1666:	e5 5d       	subi	r30, 0xD5	; 213
    1668:	fe 4f       	sbci	r31, 0xFE	; 254
    166a:	80 83       	st	Z, r24
    166c:	c8 01       	movw	r24, r16
    166e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <alterFanSpeed>
    1672:	b0 c0       	rjmp	.+352    	; 0x17d4 <getFanPercent+0x228>
    1674:	e9 81       	ldd	r30, Y+1	; 0x01
    1676:	fa 81       	ldd	r31, Y+2	; 0x02
    1678:	e2 0f       	add	r30, r18
    167a:	f3 1f       	adc	r31, r19
    167c:	80 81       	ld	r24, Z
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	e8 16       	cp	r14, r24
    1682:	f9 06       	cpc	r15, r25
    1684:	0c f0       	brlt	.+2      	; 0x1688 <getFanPercent+0xdc>
    1686:	9d c0       	rjmp	.+314    	; 0x17c2 <getFanPercent+0x216>
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	9a 81       	ldd	r25, Y+2	; 0x02
    168c:	89 2b       	or	r24, r25
    168e:	81 f4       	brne	.+32     	; 0x16b0 <getFanPercent+0x104>
    1690:	d0 9e       	mul	r13, r16
    1692:	f0 01       	movw	r30, r0
    1694:	d1 9e       	mul	r13, r17
    1696:	f0 0d       	add	r31, r0
    1698:	11 24       	eor	r1, r1
    169a:	e4 51       	subi	r30, 0x14	; 20
    169c:	fe 4f       	sbci	r31, 0xFE	; 254
    169e:	81 81       	ldd	r24, Z+1	; 0x01
    16a0:	f8 01       	movw	r30, r16
    16a2:	e5 5d       	subi	r30, 0xD5	; 213
    16a4:	fe 4f       	sbci	r31, 0xFE	; 254
    16a6:	80 83       	st	Z, r24
    16a8:	c8 01       	movw	r24, r16
    16aa:	0e 94 53 09 	call	0x12a6	; 0x12a6 <alterFanSpeed>
    16ae:	92 c0       	rjmp	.+292    	; 0x17d4 <getFanPercent+0x228>
    16b0:	d0 9e       	mul	r13, r16
    16b2:	c0 01       	movw	r24, r0
    16b4:	d1 9e       	mul	r13, r17
    16b6:	90 0d       	add	r25, r0
    16b8:	11 24       	eor	r1, r1
    16ba:	fc 01       	movw	r30, r24
    16bc:	e4 51       	subi	r30, 0x14	; 20
    16be:	fe 4f       	sbci	r31, 0xFE	; 254
    16c0:	1f 01       	movw	r2, r30
    16c2:	e9 81       	ldd	r30, Y+1	; 0x01
    16c4:	fa 81       	ldd	r31, Y+2	; 0x02
    16c6:	e2 0d       	add	r30, r2
    16c8:	f3 1d       	adc	r31, r3
    16ca:	60 81       	ld	r22, Z
    16cc:	70 e0       	ldi	r23, 0x00	; 0
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	0e 94 0b 13 	call	0x2616	; 0x2616 <__floatunsisf>
    16d6:	4b 01       	movw	r8, r22
    16d8:	5c 01       	movw	r10, r24
    16da:	e9 81       	ldd	r30, Y+1	; 0x01
    16dc:	fa 81       	ldd	r31, Y+2	; 0x02
    16de:	31 96       	adiw	r30, 0x01	; 1
    16e0:	e2 0d       	add	r30, r2
    16e2:	f3 1d       	adc	r31, r3
    16e4:	c0 80       	ld	r12, Z
    16e6:	e9 81       	ldd	r30, Y+1	; 0x01
    16e8:	fa 81       	ldd	r31, Y+2	; 0x02
    16ea:	32 97       	sbiw	r30, 0x02	; 2
    16ec:	e2 0d       	add	r30, r2
    16ee:	f3 1d       	adc	r31, r3
    16f0:	60 81       	ld	r22, Z
    16f2:	70 e0       	ldi	r23, 0x00	; 0
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	0e 94 0b 13 	call	0x2616	; 0x2616 <__floatunsisf>
    16fc:	2b 01       	movw	r4, r22
    16fe:	3c 01       	movw	r6, r24
    1700:	29 81       	ldd	r18, Y+1	; 0x01
    1702:	3a 81       	ldd	r19, Y+2	; 0x02
    1704:	21 50       	subi	r18, 0x01	; 1
    1706:	31 09       	sbc	r19, r1
    1708:	22 0d       	add	r18, r2
    170a:	33 1d       	adc	r19, r3
    170c:	f9 01       	movw	r30, r18
    170e:	f0 81       	ld	r31, Z
    1710:	fd 83       	std	Y+5, r31	; 0x05
    1712:	9b 01       	movw	r18, r22
    1714:	ac 01       	movw	r20, r24
    1716:	c5 01       	movw	r24, r10
    1718:	b4 01       	movw	r22, r8
    171a:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__cmpsf2>
    171e:	81 11       	cpse	r24, r1
    1720:	05 c0       	rjmp	.+10     	; 0x172c <getFanPercent+0x180>
    1722:	f8 01       	movw	r30, r16
    1724:	e5 5d       	subi	r30, 0xD5	; 213
    1726:	fe 4f       	sbci	r31, 0xFE	; 254
    1728:	c0 82       	st	Z, r12
    172a:	47 c0       	rjmp	.+142    	; 0x17ba <getFanPercent+0x20e>
    172c:	6c 2d       	mov	r22, r12
    172e:	70 e0       	ldi	r23, 0x00	; 0
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	0e 94 0b 13 	call	0x2616	; 0x2616 <__floatunsisf>
    1738:	69 83       	std	Y+1, r22	; 0x01
    173a:	7a 83       	std	Y+2, r23	; 0x02
    173c:	8b 83       	std	Y+3, r24	; 0x03
    173e:	9c 83       	std	Y+4, r25	; 0x04
    1740:	2d 81       	ldd	r18, Y+5	; 0x05
    1742:	62 2f       	mov	r22, r18
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	0e 94 0b 13 	call	0x2616	; 0x2616 <__floatunsisf>
    174e:	29 81       	ldd	r18, Y+1	; 0x01
    1750:	3a 81       	ldd	r19, Y+2	; 0x02
    1752:	4b 81       	ldd	r20, Y+3	; 0x03
    1754:	5c 81       	ldd	r21, Y+4	; 0x04
    1756:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <__subsf3>
    175a:	6d 83       	std	Y+5, r22	; 0x05
    175c:	7e 83       	std	Y+6, r23	; 0x06
    175e:	8f 83       	std	Y+7, r24	; 0x07
    1760:	98 87       	std	Y+8, r25	; 0x08
    1762:	a5 01       	movw	r20, r10
    1764:	94 01       	movw	r18, r8
    1766:	c3 01       	movw	r24, r6
    1768:	b2 01       	movw	r22, r4
    176a:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <__subsf3>
    176e:	9b 01       	movw	r18, r22
    1770:	ac 01       	movw	r20, r24
    1772:	6d 81       	ldd	r22, Y+5	; 0x05
    1774:	7e 81       	ldd	r23, Y+6	; 0x06
    1776:	8f 81       	ldd	r24, Y+7	; 0x07
    1778:	98 85       	ldd	r25, Y+8	; 0x08
    177a:	0e 94 63 12 	call	0x24c6	; 0x24c6 <__divsf3>
    177e:	2b 01       	movw	r4, r22
    1780:	3c 01       	movw	r6, r24
    1782:	b7 01       	movw	r22, r14
    1784:	ff 0c       	add	r15, r15
    1786:	88 0b       	sbc	r24, r24
    1788:	99 0b       	sbc	r25, r25
    178a:	0e 94 0d 13 	call	0x261a	; 0x261a <__floatsisf>
    178e:	a5 01       	movw	r20, r10
    1790:	94 01       	movw	r18, r8
    1792:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <__subsf3>
    1796:	9b 01       	movw	r18, r22
    1798:	ac 01       	movw	r20, r24
    179a:	c3 01       	movw	r24, r6
    179c:	b2 01       	movw	r22, r4
    179e:	0e 94 bd 13 	call	0x277a	; 0x277a <__mulsf3>
    17a2:	29 81       	ldd	r18, Y+1	; 0x01
    17a4:	3a 81       	ldd	r19, Y+2	; 0x02
    17a6:	4b 81       	ldd	r20, Y+3	; 0x03
    17a8:	5c 81       	ldd	r21, Y+4	; 0x04
    17aa:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <__addsf3>
    17ae:	0e 94 d5 12 	call	0x25aa	; 0x25aa <__fixsfsi>
    17b2:	f8 01       	movw	r30, r16
    17b4:	e5 5d       	subi	r30, 0xD5	; 213
    17b6:	fe 4f       	sbci	r31, 0xFE	; 254
    17b8:	60 83       	st	Z, r22
    17ba:	c8 01       	movw	r24, r16
    17bc:	0e 94 53 09 	call	0x12a6	; 0x12a6 <alterFanSpeed>
    17c0:	09 c0       	rjmp	.+18     	; 0x17d4 <getFanPercent+0x228>
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	9a 81       	ldd	r25, Y+2	; 0x02
    17c6:	02 96       	adiw	r24, 0x02	; 2
    17c8:	9a 83       	std	Y+2, r25	; 0x02
    17ca:	89 83       	std	Y+1, r24	; 0x01
    17cc:	42 97       	sbiw	r24, 0x12	; 18
    17ce:	09 f0       	breq	.+2      	; 0x17d2 <getFanPercent+0x226>
    17d0:	51 cf       	rjmp	.-350    	; 0x1674 <getFanPercent+0xc8>
    17d2:	40 cf       	rjmp	.-384    	; 0x1654 <getFanPercent+0xa8>
    17d4:	0f 5f       	subi	r16, 0xFF	; 255
    17d6:	1f 4f       	sbci	r17, 0xFF	; 255
    17d8:	06 30       	cpi	r16, 0x06	; 6
    17da:	11 05       	cpc	r17, r1
    17dc:	09 f0       	breq	.+2      	; 0x17e0 <getFanPercent+0x234>
    17de:	06 cf       	rjmp	.-500    	; 0x15ec <getFanPercent+0x40>
    17e0:	28 96       	adiw	r28, 0x08	; 8
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	f8 94       	cli
    17e6:	de bf       	out	0x3e, r29	; 62
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	cd bf       	out	0x3d, r28	; 61
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	1f 91       	pop	r17
    17f2:	0f 91       	pop	r16
    17f4:	ff 90       	pop	r15
    17f6:	ef 90       	pop	r14
    17f8:	df 90       	pop	r13
    17fa:	cf 90       	pop	r12
    17fc:	bf 90       	pop	r11
    17fe:	af 90       	pop	r10
    1800:	9f 90       	pop	r9
    1802:	8f 90       	pop	r8
    1804:	7f 90       	pop	r7
    1806:	6f 90       	pop	r6
    1808:	5f 90       	pop	r5
    180a:	4f 90       	pop	r4
    180c:	3f 90       	pop	r3
    180e:	2f 90       	pop	r2
    1810:	08 95       	ret

00001812 <updateCpuTemp>:
    1812:	ef 92       	push	r14
    1814:	ff 92       	push	r15
    1816:	0f 93       	push	r16
    1818:	1f 93       	push	r17
    181a:	cf 93       	push	r28
    181c:	df 93       	push	r29
    181e:	fc 01       	movw	r30, r24
    1820:	32 96       	adiw	r30, 0x02	; 2
    1822:	8c 01       	movw	r16, r24
    1824:	0b 5f       	subi	r16, 0xFB	; 251
    1826:	1f 4f       	sbci	r17, 0xFF	; 255
    1828:	64 e6       	ldi	r22, 0x64	; 100
    182a:	70 e0       	ldi	r23, 0x00	; 0
    182c:	c0 e0       	ldi	r28, 0x00	; 0
    182e:	d0 e0       	ldi	r29, 0x00	; 0
    1830:	0f 2e       	mov	r0, r31
    1832:	fa e0       	ldi	r31, 0x0A	; 10
    1834:	ef 2e       	mov	r14, r31
    1836:	f1 2c       	mov	r15, r1
    1838:	f0 2d       	mov	r31, r0
    183a:	21 91       	ld	r18, Z+
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	20 53       	subi	r18, 0x30	; 48
    1840:	31 09       	sbc	r19, r1
    1842:	26 9f       	mul	r18, r22
    1844:	c0 01       	movw	r24, r0
    1846:	27 9f       	mul	r18, r23
    1848:	90 0d       	add	r25, r0
    184a:	36 9f       	mul	r19, r22
    184c:	90 0d       	add	r25, r0
    184e:	11 24       	eor	r1, r1
    1850:	c8 0f       	add	r28, r24
    1852:	d9 1f       	adc	r29, r25
    1854:	cb 01       	movw	r24, r22
    1856:	b7 01       	movw	r22, r14
    1858:	0e 94 2a 14 	call	0x2854	; 0x2854 <__divmodhi4>
    185c:	e0 17       	cp	r30, r16
    185e:	f1 07       	cpc	r31, r17
    1860:	61 f7       	brne	.-40     	; 0x183a <updateCpuTemp+0x28>
    1862:	d0 93 26 01 	sts	0x0126, r29	; 0x800126 <g_cpuTemp+0x1>
    1866:	c0 93 25 01 	sts	0x0125, r28	; 0x800125 <g_cpuTemp>
    186a:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <getFanPercent>
    186e:	df 91       	pop	r29
    1870:	cf 91       	pop	r28
    1872:	1f 91       	pop	r17
    1874:	0f 91       	pop	r16
    1876:	ff 90       	pop	r15
    1878:	ef 90       	pop	r14
    187a:	08 95       	ret

0000187c <useProfileFromPC>:
    187c:	af 92       	push	r10
    187e:	bf 92       	push	r11
    1880:	df 92       	push	r13
    1882:	ef 92       	push	r14
    1884:	ff 92       	push	r15
    1886:	0f 93       	push	r16
    1888:	1f 93       	push	r17
    188a:	cf 93       	push	r28
    188c:	df 93       	push	r29
    188e:	8c 01       	movw	r16, r24
    1890:	fc 01       	movw	r30, r24
    1892:	c2 81       	ldd	r28, Z+2	; 0x02
    1894:	d0 e0       	ldi	r29, 0x00	; 0
    1896:	5e 01       	movw	r10, r28
    1898:	f0 e3       	ldi	r31, 0x30	; 48
    189a:	af 1a       	sub	r10, r31
    189c:	b1 08       	sbc	r11, r1
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	45 e1       	ldi	r20, 0x15	; 21
    18a4:	4a 9d       	mul	r20, r10
    18a6:	90 01       	movw	r18, r0
    18a8:	4b 9d       	mul	r20, r11
    18aa:	30 0d       	add	r19, r0
    18ac:	11 24       	eor	r1, r1
    18ae:	24 51       	subi	r18, 0x14	; 20
    18b0:	3e 4f       	sbci	r19, 0xFE	; 254
    18b2:	44 e6       	ldi	r20, 0x64	; 100
    18b4:	f9 01       	movw	r30, r18
    18b6:	e8 0f       	add	r30, r24
    18b8:	f9 1f       	adc	r31, r25
    18ba:	10 82       	st	Z, r1
    18bc:	fc 01       	movw	r30, r24
    18be:	31 96       	adiw	r30, 0x01	; 1
    18c0:	e2 0f       	add	r30, r18
    18c2:	f3 1f       	adc	r31, r19
    18c4:	40 83       	st	Z, r20
    18c6:	02 96       	adiw	r24, 0x02	; 2
    18c8:	84 31       	cpi	r24, 0x14	; 20
    18ca:	91 05       	cpc	r25, r1
    18cc:	99 f7       	brne	.-26     	; 0x18b4 <useProfileFromPC+0x38>
    18ce:	85 e1       	ldi	r24, 0x15	; 21
    18d0:	8a 9d       	mul	r24, r10
    18d2:	f0 01       	movw	r30, r0
    18d4:	8b 9d       	mul	r24, r11
    18d6:	f0 0d       	add	r31, r0
    18d8:	11 24       	eor	r1, r1
    18da:	e4 51       	subi	r30, 0x14	; 20
    18dc:	fe 4f       	sbci	r31, 0xFE	; 254
    18de:	82 e0       	ldi	r24, 0x02	; 2
    18e0:	84 8b       	std	Z+20, r24	; 0x14
    18e2:	f8 01       	movw	r30, r16
    18e4:	a3 81       	ldd	r26, Z+3	; 0x03
    18e6:	ae 52       	subi	r26, 0x2E	; 46
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	aa 0f       	add	r26, r26
    18ec:	bb 1f       	adc	r27, r27
    18ee:	1a 16       	cp	r1, r26
    18f0:	1b 06       	cpc	r1, r27
    18f2:	0c f0       	brlt	.+2      	; 0x18f6 <useProfileFromPC+0x7a>
    18f4:	47 c0       	rjmp	.+142    	; 0x1984 <useProfileFromPC+0x108>
    18f6:	34 96       	adiw	r30, 0x04	; 4
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	44 e0       	ldi	r20, 0x04	; 4
    18fe:	50 e0       	ldi	r21, 0x00	; 0
    1900:	0f 2e       	mov	r0, r31
    1902:	f4 e6       	ldi	r31, 0x64	; 100
    1904:	df 2e       	mov	r13, r31
    1906:	f0 2d       	mov	r31, r0
    1908:	85 e1       	ldi	r24, 0x15	; 21
    190a:	8a 9d       	mul	r24, r10
    190c:	b0 01       	movw	r22, r0
    190e:	8b 9d       	mul	r24, r11
    1910:	70 0d       	add	r23, r0
    1912:	11 24       	eor	r1, r1
    1914:	64 51       	subi	r22, 0x14	; 20
    1916:	7e 4f       	sbci	r23, 0xFE	; 254
    1918:	90 81       	ld	r25, Z
    191a:	90 53       	subi	r25, 0x30	; 48
    191c:	82 81       	ldd	r24, Z+2	; 0x02
    191e:	80 53       	subi	r24, 0x30	; 48
    1920:	9d 9d       	mul	r25, r13
    1922:	80 0d       	add	r24, r0
    1924:	11 24       	eor	r1, r1
    1926:	91 81       	ldd	r25, Z+1	; 0x01
    1928:	99 0f       	add	r25, r25
    192a:	90 56       	subi	r25, 0x60	; 96
    192c:	f9 2e       	mov	r15, r25
    192e:	ff 0c       	add	r15, r15
    1930:	ff 0c       	add	r15, r15
    1932:	9f 0d       	add	r25, r15
    1934:	f8 2e       	mov	r15, r24
    1936:	f9 0e       	add	r15, r25
    1938:	93 81       	ldd	r25, Z+3	; 0x03
    193a:	90 53       	subi	r25, 0x30	; 48
    193c:	85 81       	ldd	r24, Z+5	; 0x05
    193e:	80 53       	subi	r24, 0x30	; 48
    1940:	e8 2e       	mov	r14, r24
    1942:	9d 9d       	mul	r25, r13
    1944:	e0 0c       	add	r14, r0
    1946:	11 24       	eor	r1, r1
    1948:	94 81       	ldd	r25, Z+4	; 0x04
    194a:	99 0f       	add	r25, r25
    194c:	90 56       	subi	r25, 0x60	; 96
    194e:	89 2f       	mov	r24, r25
    1950:	88 0f       	add	r24, r24
    1952:	88 0f       	add	r24, r24
    1954:	98 0f       	add	r25, r24
    1956:	8e 2d       	mov	r24, r14
    1958:	89 0f       	add	r24, r25
    195a:	4a 5f       	subi	r20, 0xFA	; 250
    195c:	5f 4f       	sbci	r21, 0xFF	; 255
    195e:	eb 01       	movw	r28, r22
    1960:	c2 0f       	add	r28, r18
    1962:	d3 1f       	adc	r29, r19
    1964:	f8 82       	st	Y, r15
    1966:	79 01       	movw	r14, r18
    1968:	9f ef       	ldi	r25, 0xFF	; 255
    196a:	e9 1a       	sub	r14, r25
    196c:	f9 0a       	sbc	r15, r25
    196e:	eb 01       	movw	r28, r22
    1970:	ce 0d       	add	r28, r14
    1972:	df 1d       	adc	r29, r15
    1974:	88 83       	st	Y, r24
    1976:	2e 5f       	subi	r18, 0xFE	; 254
    1978:	3f 4f       	sbci	r19, 0xFF	; 255
    197a:	36 96       	adiw	r30, 0x06	; 6
    197c:	2a 17       	cp	r18, r26
    197e:	3b 07       	cpc	r19, r27
    1980:	5c f2       	brlt	.-106    	; 0x1918 <useProfileFromPC+0x9c>
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <useProfileFromPC+0x10c>
    1984:	44 e0       	ldi	r20, 0x04	; 4
    1986:	50 e0       	ldi	r21, 0x00	; 0
    1988:	f8 01       	movw	r30, r16
    198a:	e4 0f       	add	r30, r20
    198c:	f5 1f       	adc	r31, r21
    198e:	80 81       	ld	r24, Z
    1990:	80 53       	subi	r24, 0x30	; 48
    1992:	95 e1       	ldi	r25, 0x15	; 21
    1994:	9a 9d       	mul	r25, r10
    1996:	f0 01       	movw	r30, r0
    1998:	9b 9d       	mul	r25, r11
    199a:	f0 0d       	add	r31, r0
    199c:	11 24       	eor	r1, r1
    199e:	e4 51       	subi	r30, 0x14	; 20
    19a0:	fe 4f       	sbci	r31, 0xFE	; 254
    19a2:	84 8b       	std	Z+20, r24	; 0x14
    19a4:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <getFanPercent>
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	ff 90       	pop	r15
    19b2:	ef 90       	pop	r14
    19b4:	df 90       	pop	r13
    19b6:	bf 90       	pop	r11
    19b8:	af 90       	pop	r10
    19ba:	08 95       	ret

000019bc <handleRequests>:
    19bc:	fc 01       	movw	r30, r24
    19be:	91 81       	ldd	r25, Z+1	; 0x01
    19c0:	93 33       	cpi	r25, 0x33	; 51
    19c2:	a1 f0       	breq	.+40     	; 0x19ec <handleRequests+0x30>
    19c4:	28 f4       	brcc	.+10     	; 0x19d0 <handleRequests+0x14>
    19c6:	91 33       	cpi	r25, 0x31	; 49
    19c8:	41 f0       	breq	.+16     	; 0x19da <handleRequests+0x1e>
    19ca:	92 33       	cpi	r25, 0x32	; 50
    19cc:	59 f0       	breq	.+22     	; 0x19e4 <handleRequests+0x28>
    19ce:	17 c0       	rjmp	.+46     	; 0x19fe <handleRequests+0x42>
    19d0:	94 33       	cpi	r25, 0x34	; 52
    19d2:	79 f0       	breq	.+30     	; 0x19f2 <handleRequests+0x36>
    19d4:	95 33       	cpi	r25, 0x35	; 53
    19d6:	81 f0       	breq	.+32     	; 0x19f8 <handleRequests+0x3c>
    19d8:	12 c0       	rjmp	.+36     	; 0x19fe <handleRequests+0x42>
    19da:	86 e0       	ldi	r24, 0x06	; 6
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <sendNumberOfFansTicket>
    19e2:	0d c0       	rjmp	.+26     	; 0x19fe <handleRequests+0x42>
    19e4:	cf 01       	movw	r24, r30
    19e6:	0e 94 3e 0c 	call	0x187c	; 0x187c <useProfileFromPC>
    19ea:	09 c0       	rjmp	.+18     	; 0x19fe <handleRequests+0x42>
    19ec:	0e 94 0e 01 	call	0x21c	; 0x21c <saveProfile>
    19f0:	06 c0       	rjmp	.+12     	; 0x19fe <handleRequests+0x42>
    19f2:	0e 94 17 01 	call	0x22e	; 0x22e <useProfileFromEEprom>
    19f6:	03 c0       	rjmp	.+6      	; 0x19fe <handleRequests+0x42>
    19f8:	cf 01       	movw	r24, r30
    19fa:	0e 94 09 0c 	call	0x1812	; 0x1812 <updateCpuTemp>
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	08 95       	ret

00001a04 <incrementAdmux>:
    1a04:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    1a08:	81 30       	cpi	r24, 0x01	; 1
    1a0a:	21 f4       	brne	.+8      	; 0x1a14 <incrementAdmux+0x10>
    1a0c:	84 e0       	ldi	r24, 0x04	; 4
    1a0e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    1a12:	0c c0       	rjmp	.+24     	; 0x1a2c <incrementAdmux+0x28>
    1a14:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    1a18:	87 30       	cpi	r24, 0x07	; 7
    1a1a:	19 f4       	brne	.+6      	; 0x1a22 <incrementAdmux+0x1e>
    1a1c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    1a20:	05 c0       	rjmp	.+10     	; 0x1a2c <incrementAdmux+0x28>
    1a22:	ec e7       	ldi	r30, 0x7C	; 124
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	8f 5f       	subi	r24, 0xFF	; 255
    1a2a:	80 83       	st	Z, r24
    1a2c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	08 95       	ret

00001a34 <main>:
}

int main(void)
{
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	ca 5c       	subi	r28, 0xCA	; 202
    1a3e:	d1 09       	sbc	r29, r1
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	f8 94       	cli
    1a44:	de bf       	out	0x3e, r29	; 62
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	cd bf       	out	0x3d, r28	; 61
	cli();
    1a4a:	f8 94       	cli
	
	CLKPR = (1<<CLKPCE);
    1a4c:	e1 e6       	ldi	r30, 0x61	; 97
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 e8       	ldi	r24, 0x80	; 128
    1a52:	80 83       	st	Z, r24
	CLKPR = 0;
    1a54:	10 82       	st	Z, r1
	
	MCUCR |= (1<<JTD);
    1a56:	85 b7       	in	r24, 0x35	; 53
    1a58:	80 68       	ori	r24, 0x80	; 128
    1a5a:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<JTD);
    1a5c:	85 b7       	in	r24, 0x35	; 53
    1a5e:	80 68       	ori	r24, 0x80	; 128
    1a60:	85 bf       	out	0x35, r24	; 53
	
	DDRD = 0xff;
    1a62:	8f ef       	ldi	r24, 0xFF	; 255
    1a64:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xff;
    1a66:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xff;
    1a68:	85 b9       	out	0x05, r24	; 5
	DDRF = 0;
    1a6a:	10 ba       	out	0x10, r1	; 16
	//watchdogInit();
	TWIInit();
    1a6c:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <TWIInit>
	analogCompInit();
    1a70:	0e 94 14 10 	call	0x2028	; 0x2028 <analogCompInit>
	pwmInit();
    1a74:	0e 94 30 10 	call	0x2060	; 0x2060 <pwmInit>
	SetupHardware();
    1a78:	0e 94 22 01 	call	0x244	; 0x244 <SetupHardware>
	
	useProfileFromEEprom();
    1a7c:	0e 94 17 01 	call	0x22e	; 0x22e <useProfileFromEEprom>
		
	sei();
    1a80:	78 94       	sei
	
    while (1) 
    {	
		uint8_t buffer[200] = {};
    1a82:	0f 2e       	mov	r0, r31
    1a84:	f8 ec       	ldi	r31, 0xC8	; 200
    1a86:	8f 2e       	mov	r8, r31
    1a88:	f0 2d       	mov	r31, r0
    1a8a:	8e 01       	movw	r16, r28
    1a8c:	0f 5f       	subi	r16, 0xFF	; 255
    1a8e:	1f 4f       	sbci	r17, 0xFF	; 255
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a90:	0f 2e       	mov	r0, r31
    1a92:	f9 ee       	ldi	r31, 0xE9	; 233
    1a94:	cf 2e       	mov	r12, r31
    1a96:	d1 2c       	mov	r13, r1
    1a98:	f0 2d       	mov	r31, r0
    1a9a:	68 94       	set
    1a9c:	99 24       	eor	r9, r9
    1a9e:	91 f8       	bld	r9, 1
		
		Endpoint_SelectEndpoint(CDC_HOST_TO_DEVICE_EPADDR);
		if(g_oneSecond)
		{
			g_seconds++;
			TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN) | (1<<TWEA)| (1<<TWIE);
    1aa0:	0f 2e       	mov	r0, r31
    1aa2:	fc eb       	ldi	r31, 0xBC	; 188
    1aa4:	af 2e       	mov	r10, r31
    1aa6:	b1 2c       	mov	r11, r1
    1aa8:	f0 2d       	mov	r31, r0
    1aaa:	0f 2e       	mov	r0, r31
    1aac:	f5 ee       	ldi	r31, 0xE5	; 229
    1aae:	7f 2e       	mov	r7, r31
    1ab0:	f0 2d       	mov	r31, r0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1ab2:	0f 2e       	mov	r0, r31
    1ab4:	f8 ee       	ldi	r31, 0xE8	; 232
    1ab6:	ef 2e       	mov	r14, r31
    1ab8:	f1 2c       	mov	r15, r1
    1aba:	f0 2d       	mov	r31, r0
		
	sei();
	
    while (1) 
    {	
		uint8_t buffer[200] = {};
    1abc:	f8 01       	movw	r30, r16
    1abe:	88 2d       	mov	r24, r8
    1ac0:	11 92       	st	Z+, r1
    1ac2:	8a 95       	dec	r24
    1ac4:	e9 f7       	brne	.-6      	; 0x1ac0 <main+0x8c>
		uint16_t bytesRead = 0;
    1ac6:	c7 53       	subi	r28, 0x37	; 55
    1ac8:	df 4f       	sbci	r29, 0xFF	; 255
    1aca:	19 82       	std	Y+1, r1	; 0x01
    1acc:	18 82       	st	Y, r1
    1ace:	c9 5c       	subi	r28, 0xC9	; 201
    1ad0:	d0 40       	sbci	r29, 0x00	; 0
		
		USB_USBTask();
    1ad2:	0e 94 2e 09 	call	0x125c	; 0x125c <USB_USBTask>
		CDC_Device_USBTask(&VirtualSerial1_CDC_Interface);
    1ad6:	87 e0       	ldi	r24, 0x07	; 7
    1ad8:	91 e0       	ldi	r25, 0x01	; 1
    1ada:	0e 94 c8 01 	call	0x390	; 0x390 <CDC_Device_USBTask>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ade:	f6 01       	movw	r30, r12
    1ae0:	90 82       	st	Z, r9
		
		Endpoint_SelectEndpoint(CDC_HOST_TO_DEVICE_EPADDR);
		if(g_oneSecond)
    1ae2:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <g_oneSecond>
    1ae6:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <g_oneSecond+0x1>
    1aea:	89 2b       	or	r24, r25
    1aec:	a9 f0       	breq	.+42     	; 0x1b18 <main+0xe4>
		{
			g_seconds++;
    1aee:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <__data_end>
    1af2:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <__data_end+0x1>
    1af6:	01 96       	adiw	r24, 0x01	; 1
    1af8:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <__data_end+0x1>
    1afc:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <__data_end>
			TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN) | (1<<TWEA)| (1<<TWIE);
    1b00:	f5 01       	movw	r30, r10
    1b02:	70 82       	st	Z, r7
			
			prepareForTach();
    1b04:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <prepareForTach>
			g_oneSecond = 0;
    1b08:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <g_oneSecond+0x1>
    1b0c:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <g_oneSecond>
			sendCommonTicket(6);
    1b10:	86 e0       	ldi	r24, 0x06	; 6
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <sendCommonTicket>
		}
		if(g_thirdTime)
    1b18:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <g_thirdTime>
    1b1c:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <g_thirdTime+0x1>
    1b20:	89 2b       	or	r24, r25
    1b22:	19 f0       	breq	.+6      	; 0x1b2a <main+0xf6>
		{
			handleTach();
    1b24:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <handleTach>
    1b28:	18 c0       	rjmp	.+48     	; 0x1b5a <main+0x126>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b2a:	f7 01       	movw	r30, r14
    1b2c:	80 81       	ld	r24, Z
			
		}
		else if(Endpoint_IsOUTReceived())
    1b2e:	82 ff       	sbrs	r24, 2
    1b30:	14 c0       	rjmp	.+40     	; 0x1b5a <main+0x126>
		{
			Endpoint_WaitUntilReady();
    1b32:	0e 94 82 05 	call	0xb04	; 0xb04 <Endpoint_WaitUntilReady>
			Endpoint_Read_Stream_LE(buffer, 200, &bytesRead);
    1b36:	ae 01       	movw	r20, r28
    1b38:	47 53       	subi	r20, 0x37	; 55
    1b3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b3c:	68 ec       	ldi	r22, 0xC8	; 200
    1b3e:	70 e0       	ldi	r23, 0x00	; 0
    1b40:	c8 01       	movw	r24, r16
    1b42:	0e 94 41 02 	call	0x482	; 0x482 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1b46:	f7 01       	movw	r30, r14
    1b48:	80 81       	ld	r24, Z
    1b4a:	8b 77       	andi	r24, 0x7B	; 123
    1b4c:	80 83       	st	Z, r24
			Endpoint_ClearOUT();
			
			//If it is a request then handle it
			if(buffer[0] == '!')
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	81 32       	cpi	r24, 0x21	; 33
    1b52:	19 f4       	brne	.+6      	; 0x1b5a <main+0x126>
			{
				handleRequests(buffer);
    1b54:	c8 01       	movw	r24, r16
    1b56:	0e 94 de 0c 	call	0x19bc	; 0x19bc <handleRequests>
			}
		}
		if(g_seconds > 10)
    1b5a:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <__data_end>
    1b5e:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <__data_end+0x1>
    1b62:	0b 97       	sbiw	r24, 0x0b	; 11
    1b64:	0c f4       	brge	.+2      	; 0x1b68 <main+0x134>
    1b66:	aa cf       	rjmp	.-172    	; 0x1abc <main+0x88>
		{
			g_seconds = 0;
    1b68:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <__data_end+0x1>
    1b6c:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <__data_end>
			getFanPercent();
    1b70:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <getFanPercent>
		}
    }
    1b74:	a3 cf       	rjmp	.-186    	; 0x1abc <main+0x88>

00001b76 <rpmToString>:
		for (int i = 0; i < 3; i++)
		{
			string[2-i] = temp_l % 10 + '0';
			temp_l /= 10;
		}
}
    1b76:	cf 93       	push	r28
    1b78:	df 93       	push	r29
    1b7a:	fb 01       	movw	r30, r22
    1b7c:	34 96       	adiw	r30, 0x04	; 4
    1b7e:	9b 01       	movw	r18, r22
    1b80:	ca e0       	ldi	r28, 0x0A	; 10
    1b82:	d0 e0       	ldi	r29, 0x00	; 0
    1b84:	be 01       	movw	r22, r28
    1b86:	0e 94 2a 14 	call	0x2854	; 0x2854 <__divmodhi4>
    1b8a:	80 5d       	subi	r24, 0xD0	; 208
    1b8c:	82 93       	st	-Z, r24
    1b8e:	86 2f       	mov	r24, r22
    1b90:	97 2f       	mov	r25, r23
    1b92:	e2 17       	cp	r30, r18
    1b94:	f3 07       	cpc	r31, r19
    1b96:	b1 f7       	brne	.-20     	; 0x1b84 <rpmToString+0xe>
    1b98:	df 91       	pop	r29
    1b9a:	cf 91       	pop	r28
    1b9c:	08 95       	ret

00001b9e <sendNumberOfFansTicket>:

int sendNumberOfFansTicket(int nOfFans)
{
    1b9e:	cf 93       	push	r28
    1ba0:	df 93       	push	r29
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <sendNumberOfFansTicket+0x6>
    1ba4:	00 d0       	rcall	.+0      	; 0x1ba6 <sendNumberOfFansTicket+0x8>
    1ba6:	1f 92       	push	r1
    1ba8:	cd b7       	in	r28, 0x3d	; 61
    1baa:	de b7       	in	r29, 0x3e	; 62
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bac:	91 e0       	ldi	r25, 0x01	; 1
    1bae:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
	Endpoint_SelectEndpoint(CDC_DEVICE_TO_HOST_EPADDR);
	
	uint8_t buffer[5] = {"%%%& "};
    1bb2:	95 e0       	ldi	r25, 0x05	; 5
    1bb4:	e3 e4       	ldi	r30, 0x43	; 67
    1bb6:	f1 e0       	ldi	r31, 0x01	; 1
    1bb8:	de 01       	movw	r26, r28
    1bba:	11 96       	adiw	r26, 0x01	; 1
    1bbc:	01 90       	ld	r0, Z+
    1bbe:	0d 92       	st	X+, r0
    1bc0:	9a 95       	dec	r25
    1bc2:	e1 f7       	brne	.-8      	; 0x1bbc <sendNumberOfFansTicket+0x1e>
	buffer[4] = (nOfFans + '0');
    1bc4:	80 5d       	subi	r24, 0xD0	; 208
    1bc6:	8d 83       	std	Y+5, r24	; 0x05
	
	Endpoint_Write_Stream_LE(buffer, 5, NULL);
    1bc8:	40 e0       	ldi	r20, 0x00	; 0
    1bca:	50 e0       	ldi	r21, 0x00	; 0
    1bcc:	65 e0       	ldi	r22, 0x05	; 5
    1bce:	70 e0       	ldi	r23, 0x00	; 0
    1bd0:	ce 01       	movw	r24, r28
    1bd2:	01 96       	adiw	r24, 0x01	; 1
    1bd4:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <Endpoint_Write_Stream_LE>
	
	buffer[0] = '7';
    1bd8:	87 e3       	ldi	r24, 0x37	; 55
    1bda:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = '5';
    1bdc:	85 e3       	ldi	r24, 0x35	; 53
    1bde:	8a 83       	std	Y+2, r24	; 0x02
	buffer[2] = '3';
    1be0:	83 e3       	ldi	r24, 0x33	; 51
    1be2:	8b 83       	std	Y+3, r24	; 0x03
	buffer[3] = '\r';
    1be4:	8d e0       	ldi	r24, 0x0D	; 13
    1be6:	8c 83       	std	Y+4, r24	; 0x04
	buffer[4] = '\n';
    1be8:	8a e0       	ldi	r24, 0x0A	; 10
    1bea:	8d 83       	std	Y+5, r24	; 0x05
	
	Endpoint_Write_Stream_LE(buffer, 5, NULL);
    1bec:	40 e0       	ldi	r20, 0x00	; 0
    1bee:	50 e0       	ldi	r21, 0x00	; 0
    1bf0:	65 e0       	ldi	r22, 0x05	; 5
    1bf2:	70 e0       	ldi	r23, 0x00	; 0
    1bf4:	ce 01       	movw	r24, r28
    1bf6:	01 96       	adiw	r24, 0x01	; 1
    1bf8:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1bfc:	e8 ee       	ldi	r30, 0xE8	; 232
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	8e 77       	andi	r24, 0x7E	; 126
    1c04:	80 83       	st	Z, r24
	
	Endpoint_ClearIN();
	
	return 1;
	
}
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	0f 90       	pop	r0
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	df 91       	pop	r29
    1c16:	cf 91       	pop	r28
    1c18:	08 95       	ret

00001c1a <sendCommonTicket>:
}

*/

int sendCommonTicket(int nOfFans)
{
    1c1a:	df 92       	push	r13
    1c1c:	ef 92       	push	r14
    1c1e:	ff 92       	push	r15
    1c20:	0f 93       	push	r16
    1c22:	1f 93       	push	r17
    1c24:	cf 93       	push	r28
    1c26:	df 93       	push	r29
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    1c2c:	2b 97       	sbiw	r28, 0x0b	; 11
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	f8 94       	cli
    1c32:	de bf       	out	0x3e, r29	; 62
    1c34:	0f be       	out	0x3f, r0	; 63
    1c36:	cd bf       	out	0x3d, r28	; 61
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c38:	91 e0       	ldi	r25, 0x01	; 1
    1c3a:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
	Endpoint_SelectEndpoint(CDC_DEVICE_TO_HOST_EPADDR);
	
	uint8_t buffer[6] = {"%%%&& "};
    1c3e:	96 e0       	ldi	r25, 0x06	; 6
    1c40:	e9 e4       	ldi	r30, 0x49	; 73
    1c42:	f1 e0       	ldi	r31, 0x01	; 1
    1c44:	de 01       	movw	r26, r28
    1c46:	11 96       	adiw	r26, 0x01	; 1
    1c48:	01 90       	ld	r0, Z+
    1c4a:	0d 92       	st	X+, r0
    1c4c:	9a 95       	dec	r25
    1c4e:	e1 f7       	brne	.-8      	; 0x1c48 <sendCommonTicket+0x2e>
	buffer[5] = (nOfFans + '0');
    1c50:	80 5d       	subi	r24, 0xD0	; 208
    1c52:	8e 83       	std	Y+6, r24	; 0x06
	
	Endpoint_Write_Stream_LE(buffer, 6, NULL);
    1c54:	40 e0       	ldi	r20, 0x00	; 0
    1c56:	50 e0       	ldi	r21, 0x00	; 0
    1c58:	66 e0       	ldi	r22, 0x06	; 6
    1c5a:	70 e0       	ldi	r23, 0x00	; 0
    1c5c:	ce 01       	movw	r24, r28
    1c5e:	01 96       	adiw	r24, 0x01	; 1
    1c60:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <Endpoint_Write_Stream_LE>
	
	uint8_t string[5] = {"00000"};
    1c64:	85 e0       	ldi	r24, 0x05	; 5
    1c66:	e0 e5       	ldi	r30, 0x50	; 80
    1c68:	f1 e0       	ldi	r31, 0x01	; 1
    1c6a:	de 01       	movw	r26, r28
    1c6c:	17 96       	adiw	r26, 0x07	; 7
    1c6e:	01 90       	ld	r0, Z+
    1c70:	0d 92       	st	X+, r0
    1c72:	8a 95       	dec	r24
    1c74:	e1 f7       	brne	.-8      	; 0x1c6e <sendCommonTicket+0x54>
    1c76:	10 e3       	ldi	r17, 0x30	; 48
	for (int i = 0; i < 6; i++)
    1c78:	e1 2c       	mov	r14, r1
    1c7a:	f1 2c       	mov	r15, r1
		{
			rpmToString(g_fanSpeeds[i], string);
		}
		else
		{
			string[0] = '9';
    1c7c:	09 e3       	ldi	r16, 0x39	; 57
			string[1] = '9';
			string[2] = '9';
			string[3] = '9';
		}
		buffer[0] = '#';
    1c7e:	0f 2e       	mov	r0, r31
    1c80:	f3 e2       	ldi	r31, 0x23	; 35
    1c82:	df 2e       	mov	r13, r31
    1c84:	f0 2d       	mov	r31, r0
	Endpoint_Write_Stream_LE(buffer, 6, NULL);
	
	uint8_t string[5] = {"00000"};
	for (int i = 0; i < 6; i++)
	{
		if (g_fanTypes[i])
    1c86:	f7 01       	movw	r30, r14
    1c88:	ee 0f       	add	r30, r30
    1c8a:	ff 1f       	adc	r31, r31
    1c8c:	ef 5c       	subi	r30, 0xCF	; 207
    1c8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c90:	80 81       	ld	r24, Z
    1c92:	91 81       	ldd	r25, Z+1	; 0x01
    1c94:	89 2b       	or	r24, r25
    1c96:	69 f0       	breq	.+26     	; 0x1cb2 <sendCommonTicket+0x98>
		{
			rpmToString(g_fanSpeeds[i], string);
    1c98:	f7 01       	movw	r30, r14
    1c9a:	ee 0f       	add	r30, r30
    1c9c:	ff 1f       	adc	r31, r31
    1c9e:	e6 59       	subi	r30, 0x96	; 150
    1ca0:	fd 4f       	sbci	r31, 0xFD	; 253
    1ca2:	80 81       	ld	r24, Z
    1ca4:	91 81       	ldd	r25, Z+1	; 0x01
    1ca6:	be 01       	movw	r22, r28
    1ca8:	69 5f       	subi	r22, 0xF9	; 249
    1caa:	7f 4f       	sbci	r23, 0xFF	; 255
    1cac:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <rpmToString>
    1cb0:	04 c0       	rjmp	.+8      	; 0x1cba <sendCommonTicket+0xa0>
		}
		else
		{
			string[0] = '9';
    1cb2:	0f 83       	std	Y+7, r16	; 0x07
			string[1] = '9';
    1cb4:	08 87       	std	Y+8, r16	; 0x08
			string[2] = '9';
    1cb6:	09 87       	std	Y+9, r16	; 0x09
			string[3] = '9';
    1cb8:	0a 87       	std	Y+10, r16	; 0x0a
		}
		buffer[0] = '#';
    1cba:	d9 82       	std	Y+1, r13	; 0x01
		buffer[1] = (i + '0');
    1cbc:	1a 83       	std	Y+2, r17	; 0x02
		for (int j = 0; j < 4; j++)
		{
			buffer[j + 2] = string[j];
    1cbe:	8f 81       	ldd	r24, Y+7	; 0x07
    1cc0:	8b 83       	std	Y+3, r24	; 0x03
    1cc2:	88 85       	ldd	r24, Y+8	; 0x08
    1cc4:	8c 83       	std	Y+4, r24	; 0x04
    1cc6:	89 85       	ldd	r24, Y+9	; 0x09
    1cc8:	8d 83       	std	Y+5, r24	; 0x05
    1cca:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ccc:	8e 83       	std	Y+6, r24	; 0x06
		}
		Endpoint_Write_Stream_LE(buffer, 6, NULL);
    1cce:	40 e0       	ldi	r20, 0x00	; 0
    1cd0:	50 e0       	ldi	r21, 0x00	; 0
    1cd2:	66 e0       	ldi	r22, 0x06	; 6
    1cd4:	70 e0       	ldi	r23, 0x00	; 0
    1cd6:	ce 01       	movw	r24, r28
    1cd8:	01 96       	adiw	r24, 0x01	; 1
    1cda:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <Endpoint_Write_Stream_LE>
	buffer[5] = (nOfFans + '0');
	
	Endpoint_Write_Stream_LE(buffer, 6, NULL);
	
	uint8_t string[5] = {"00000"};
	for (int i = 0; i < 6; i++)
    1cde:	8f ef       	ldi	r24, 0xFF	; 255
    1ce0:	e8 1a       	sub	r14, r24
    1ce2:	f8 0a       	sbc	r15, r24
    1ce4:	1f 5f       	subi	r17, 0xFF	; 255
    1ce6:	16 33       	cpi	r17, 0x36	; 54
    1ce8:	71 f6       	brne	.-100    	; 0x1c86 <sendCommonTicket+0x6c>
			buffer[j + 2] = string[j];
		}
		Endpoint_Write_Stream_LE(buffer, 6, NULL);
	}
	
	putTempInString(g_temp1, string, 0);
    1cea:	40 e0       	ldi	r20, 0x00	; 0
    1cec:	50 e0       	ldi	r21, 0x00	; 0
    1cee:	be 01       	movw	r22, r28
    1cf0:	69 5f       	subi	r22, 0xF9	; 249
    1cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf4:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <g_temp1>
    1cf8:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <g_temp1+0x1>
    1cfc:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <putTempInString>
	Endpoint_Write_Stream_LE(string, sizeof(string), NULL);
    1d00:	40 e0       	ldi	r20, 0x00	; 0
    1d02:	50 e0       	ldi	r21, 0x00	; 0
    1d04:	65 e0       	ldi	r22, 0x05	; 5
    1d06:	70 e0       	ldi	r23, 0x00	; 0
    1d08:	ce 01       	movw	r24, r28
    1d0a:	07 96       	adiw	r24, 0x07	; 7
    1d0c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <Endpoint_Write_Stream_LE>
	putTempInString(g_temp2, string, 1);
    1d10:	41 e0       	ldi	r20, 0x01	; 1
    1d12:	50 e0       	ldi	r21, 0x00	; 0
    1d14:	be 01       	movw	r22, r28
    1d16:	69 5f       	subi	r22, 0xF9	; 249
    1d18:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <g_temp2>
    1d1e:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <g_temp2+0x1>
    1d22:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <putTempInString>
	Endpoint_Write_Stream_LE(string, sizeof(string), NULL);
    1d26:	40 e0       	ldi	r20, 0x00	; 0
    1d28:	50 e0       	ldi	r21, 0x00	; 0
    1d2a:	65 e0       	ldi	r22, 0x05	; 5
    1d2c:	70 e0       	ldi	r23, 0x00	; 0
    1d2e:	ce 01       	movw	r24, r28
    1d30:	07 96       	adiw	r24, 0x07	; 7
    1d32:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <Endpoint_Write_Stream_LE>
	
	rpmToString(OCR1A, string);
    1d36:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1d3a:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1d3e:	be 01       	movw	r22, r28
    1d40:	69 5f       	subi	r22, 0xF9	; 249
    1d42:	7f 4f       	sbci	r23, 0xFF	; 255
    1d44:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <rpmToString>
	Endpoint_Write_Stream_LE(string, 4, NULL);
    1d48:	40 e0       	ldi	r20, 0x00	; 0
    1d4a:	50 e0       	ldi	r21, 0x00	; 0
    1d4c:	64 e0       	ldi	r22, 0x04	; 4
    1d4e:	70 e0       	ldi	r23, 0x00	; 0
    1d50:	ce 01       	movw	r24, r28
    1d52:	07 96       	adiw	r24, 0x07	; 7
    1d54:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <Endpoint_Write_Stream_LE>
	rpmToString(OCR1C, string);
    1d58:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <__DATA_REGION_ORIGIN__+0x2c>
    1d5c:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <__DATA_REGION_ORIGIN__+0x2d>
    1d60:	be 01       	movw	r22, r28
    1d62:	69 5f       	subi	r22, 0xF9	; 249
    1d64:	7f 4f       	sbci	r23, 0xFF	; 255
    1d66:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <rpmToString>
	Endpoint_Write_Stream_LE(string, 4, NULL);
    1d6a:	40 e0       	ldi	r20, 0x00	; 0
    1d6c:	50 e0       	ldi	r21, 0x00	; 0
    1d6e:	64 e0       	ldi	r22, 0x04	; 4
    1d70:	70 e0       	ldi	r23, 0x00	; 0
    1d72:	ce 01       	movw	r24, r28
    1d74:	07 96       	adiw	r24, 0x07	; 7
    1d76:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <Endpoint_Write_Stream_LE>
	
	buffer[0] = '7';
    1d7a:	87 e3       	ldi	r24, 0x37	; 55
    1d7c:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = '5';
    1d7e:	85 e3       	ldi	r24, 0x35	; 53
    1d80:	8a 83       	std	Y+2, r24	; 0x02
	buffer[2] = '0';
    1d82:	80 e3       	ldi	r24, 0x30	; 48
    1d84:	8b 83       	std	Y+3, r24	; 0x03
	buffer[3] = '3';
    1d86:	83 e3       	ldi	r24, 0x33	; 51
    1d88:	8c 83       	std	Y+4, r24	; 0x04
	buffer[4] = '\r';
    1d8a:	8d e0       	ldi	r24, 0x0D	; 13
    1d8c:	8d 83       	std	Y+5, r24	; 0x05
	buffer[5] = '\n';
    1d8e:	8a e0       	ldi	r24, 0x0A	; 10
    1d90:	8e 83       	std	Y+6, r24	; 0x06
	
	Endpoint_Write_Stream_LE(buffer, 6, NULL);
    1d92:	40 e0       	ldi	r20, 0x00	; 0
    1d94:	50 e0       	ldi	r21, 0x00	; 0
    1d96:	66 e0       	ldi	r22, 0x06	; 6
    1d98:	70 e0       	ldi	r23, 0x00	; 0
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	01 96       	adiw	r24, 0x01	; 1
    1d9e:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1da2:	e8 ee       	ldi	r30, 0xE8	; 232
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	8e 77       	andi	r24, 0x7E	; 126
    1daa:	80 83       	st	Z, r24
	
	//temp1 = 0;
	//temp2 = 0;
	
	return 1;
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	2b 96       	adiw	r28, 0x0b	; 11
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	f8 94       	cli
    1db6:	de bf       	out	0x3e, r29	; 62
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	cd bf       	out	0x3d, r28	; 61
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	1f 91       	pop	r17
    1dc2:	0f 91       	pop	r16
    1dc4:	ff 90       	pop	r15
    1dc6:	ef 90       	pop	r14
    1dc8:	df 90       	pop	r13
    1dca:	08 95       	ret

00001dcc <__vector_35>:
static volatile uint16_t g_firstTime = 0;
static volatile uint16_t g_secondTime = 0;
volatile uint16_t g_thirdTime = 0;

ISR(TIMER3_OVF_vect)
{
    1dcc:	1f 92       	push	r1
    1dce:	0f 92       	push	r0
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	0f 92       	push	r0
    1dd4:	11 24       	eor	r1, r1
    1dd6:	2f 93       	push	r18
    1dd8:	8f 93       	push	r24
    1dda:	9f 93       	push	r25
	PORTD |= g_timer3FanMask;
    1ddc:	9b b1       	in	r25, 0x0b	; 11
    1dde:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <g_timer3FanMask>
    1de2:	89 2b       	or	r24, r25
    1de4:	8b b9       	out	0x0b, r24	; 11
	PORTB |= g_timer3FanMask;
    1de6:	95 b1       	in	r25, 0x05	; 5
    1de8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <g_timer3FanMask>
    1dec:	89 2b       	or	r24, r25
    1dee:	85 b9       	out	0x05, r24	; 5
	
	g_countoTo15656++;
    1df0:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <g_countoTo15656>
    1df4:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <g_countoTo15656+0x1>
    1df8:	01 96       	adiw	r24, 0x01	; 1
    1dfa:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <g_countoTo15656+0x1>
    1dfe:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <g_countoTo15656>
	if(g_countoTo15656 >= 15656)
    1e02:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <g_countoTo15656>
    1e06:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <g_countoTo15656+0x1>
    1e0a:	88 32       	cpi	r24, 0x28	; 40
    1e0c:	9d 43       	sbci	r25, 0x3D	; 61
    1e0e:	54 f0       	brlt	.+20     	; 0x1e24 <__vector_35+0x58>
	{
		g_countoTo15656 = 0;
    1e10:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <g_countoTo15656+0x1>
    1e14:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <g_countoTo15656>
		g_oneSecond = 1;
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <g_oneSecond+0x1>
    1e20:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <g_oneSecond>
	}
}
    1e24:	9f 91       	pop	r25
    1e26:	8f 91       	pop	r24
    1e28:	2f 91       	pop	r18
    1e2a:	0f 90       	pop	r0
    1e2c:	0f be       	out	0x3f, r0	; 63
    1e2e:	0f 90       	pop	r0
    1e30:	1f 90       	pop	r1
    1e32:	18 95       	reti

00001e34 <__vector_20>:

ISR(TIMER1_OVF_vect)
{
    1e34:	1f 92       	push	r1
    1e36:	0f 92       	push	r0
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	0f 92       	push	r0
    1e3c:	11 24       	eor	r1, r1
    1e3e:	8f 93       	push	r24
    1e40:	9f 93       	push	r25
	//wdt_reset();
	PORTD |= g_timer1FanMask;
    1e42:	9b b1       	in	r25, 0x0b	; 11
    1e44:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <g_timer1FanMask>
    1e48:	89 2b       	or	r24, r25
    1e4a:	8b b9       	out	0x0b, r24	; 11
	PORTB |= g_timer1FanMask;
    1e4c:	95 b1       	in	r25, 0x05	; 5
    1e4e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <g_timer1FanMask>
    1e52:	89 2b       	or	r24, r25
    1e54:	85 b9       	out	0x05, r24	; 5
}
    1e56:	9f 91       	pop	r25
    1e58:	8f 91       	pop	r24
    1e5a:	0f 90       	pop	r0
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	0f 90       	pop	r0
    1e60:	1f 90       	pop	r1
    1e62:	18 95       	reti

00001e64 <__vector_16>:

ISR(TIMER1_CAPT_vect)
{
    1e64:	1f 92       	push	r1
    1e66:	0f 92       	push	r0
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	0f 92       	push	r0
    1e6c:	11 24       	eor	r1, r1
    1e6e:	8f 93       	push	r24
    1e70:	9f 93       	push	r25
    1e72:	ef 93       	push	r30
    1e74:	ff 93       	push	r31
	if(!g_zeroRpmTest)
    1e76:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <g_zeroRpmTest>
    1e7a:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <g_zeroRpmTest+0x1>
    1e7e:	89 2b       	or	r24, r25
    1e80:	39 f4       	brne	.+14     	; 0x1e90 <__vector_16+0x2c>
	{
		g_zeroRpmTest = 1;
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <g_zeroRpmTest+0x1>
    1e8a:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <g_zeroRpmTest>
    1e8e:	22 c0       	rjmp	.+68     	; 0x1ed4 <__vector_16+0x70>
	}
	else if (!g_secondTime)
    1e90:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <g_secondTime>
    1e94:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <g_secondTime+0x1>
    1e98:	89 2b       	or	r24, r25
    1e9a:	49 f4       	brne	.+18     	; 0x1eae <__vector_16+0x4a>
	{
		g_secondTime = g_countoTo15656;
    1e9c:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <g_countoTo15656>
    1ea0:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <g_countoTo15656+0x1>
    1ea4:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <g_secondTime+0x1>
    1ea8:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <g_secondTime>
    1eac:	13 c0       	rjmp	.+38     	; 0x1ed4 <__vector_16+0x70>
	}
	else if (!g_thirdTime)
    1eae:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <g_thirdTime>
    1eb2:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <g_thirdTime+0x1>
    1eb6:	89 2b       	or	r24, r25
    1eb8:	69 f4       	brne	.+26     	; 0x1ed4 <__vector_16+0x70>
	{
		TIMSK1 &= ~(1<<ICIE1);
    1eba:	ef e6       	ldi	r30, 0x6F	; 111
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	8f 7d       	andi	r24, 0xDF	; 223
    1ec2:	80 83       	st	Z, r24
		g_thirdTime = g_countoTo15656;
    1ec4:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <g_countoTo15656>
    1ec8:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <g_countoTo15656+0x1>
    1ecc:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <g_thirdTime+0x1>
    1ed0:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <g_thirdTime>
	}
}
    1ed4:	ff 91       	pop	r31
    1ed6:	ef 91       	pop	r30
    1ed8:	9f 91       	pop	r25
    1eda:	8f 91       	pop	r24
    1edc:	0f 90       	pop	r0
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	0f 90       	pop	r0
    1ee2:	1f 90       	pop	r1
    1ee4:	18 95       	reti

00001ee6 <__vector_32>:

#ifdef ALL_PWM


ISR(TIMER3_COMPA_vect)
{
    1ee6:	1f 92       	push	r1
    1ee8:	0f 92       	push	r0
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	0f 92       	push	r0
    1eee:	11 24       	eor	r1, r1
	PORTD &= ~(1<<PORTD2);
    1ef0:	5a 98       	cbi	0x0b, 2	; 11
}
    1ef2:	0f 90       	pop	r0
    1ef4:	0f be       	out	0x3f, r0	; 63
    1ef6:	0f 90       	pop	r0
    1ef8:	1f 90       	pop	r1
    1efa:	18 95       	reti

00001efc <__vector_33>:
ISR(TIMER3_COMPB_vect)
{
    1efc:	1f 92       	push	r1
    1efe:	0f 92       	push	r0
    1f00:	0f b6       	in	r0, 0x3f	; 63
    1f02:	0f 92       	push	r0
    1f04:	11 24       	eor	r1, r1
	PORTD &= ~(1<<PORTD3);
    1f06:	5b 98       	cbi	0x0b, 3	; 11
}
    1f08:	0f 90       	pop	r0
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	0f 90       	pop	r0
    1f0e:	1f 90       	pop	r1
    1f10:	18 95       	reti

00001f12 <__vector_34>:
ISR(TIMER3_COMPC_vect)
{
    1f12:	1f 92       	push	r1
    1f14:	0f 92       	push	r0
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	0f 92       	push	r0
    1f1a:	11 24       	eor	r1, r1
	PORTD &= ~(1<<PORTD4);
    1f1c:	5c 98       	cbi	0x0b, 4	; 11
}
    1f1e:	0f 90       	pop	r0
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	0f 90       	pop	r0
    1f24:	1f 90       	pop	r1
    1f26:	18 95       	reti

00001f28 <__vector_17>:
ISR(TIMER1_COMPA_vect)
{
    1f28:	1f 92       	push	r1
    1f2a:	0f 92       	push	r0
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	0f 92       	push	r0
    1f30:	11 24       	eor	r1, r1
	PORTD &= ~(1<<PORTD5);
    1f32:	5d 98       	cbi	0x0b, 5	; 11
}
    1f34:	0f 90       	pop	r0
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	0f 90       	pop	r0
    1f3a:	1f 90       	pop	r1
    1f3c:	18 95       	reti

00001f3e <__vector_18>:
ISR(TIMER1_COMPB_vect)
{
    1f3e:	1f 92       	push	r1
    1f40:	0f 92       	push	r0
    1f42:	0f b6       	in	r0, 0x3f	; 63
    1f44:	0f 92       	push	r0
    1f46:	11 24       	eor	r1, r1
	PORTD &= ~(1<<PORTD6);
    1f48:	5e 98       	cbi	0x0b, 6	; 11
}
    1f4a:	0f 90       	pop	r0
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	0f 90       	pop	r0
    1f50:	1f 90       	pop	r1
    1f52:	18 95       	reti

00001f54 <__vector_19>:
ISR(TIMER1_COMPC_vect)
{
    1f54:	1f 92       	push	r1
    1f56:	0f 92       	push	r0
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	0f 92       	push	r0
    1f5c:	11 24       	eor	r1, r1
	PORTD &= ~(1<<PORTD7);
    1f5e:	5f 98       	cbi	0x0b, 7	; 11
}
    1f60:	0f 90       	pop	r0
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	0f 90       	pop	r0
    1f66:	1f 90       	pop	r1
    1f68:	18 95       	reti

00001f6a <handleTach>:
#endif


int handleTach(void)
{
	uint64_t rpm = (469680/(g_thirdTime - g_secondTime));
    1f6a:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <g_thirdTime>
    1f6e:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <g_thirdTime+0x1>
    1f72:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <g_secondTime>
    1f76:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <g_secondTime+0x1>
    1f7a:	28 1b       	sub	r18, r24
    1f7c:	39 0b       	sbc	r19, r25
    1f7e:	40 e0       	ldi	r20, 0x00	; 0
    1f80:	50 e0       	ldi	r21, 0x00	; 0
    1f82:	60 eb       	ldi	r22, 0xB0	; 176
    1f84:	7a e2       	ldi	r23, 0x2A	; 42
    1f86:	87 e0       	ldi	r24, 0x07	; 7
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__divmodsi4>
	int8_t fan = ADMUX;
    1f8e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    1f92:	e8 2f       	mov	r30, r24
	if(fan > 1)
    1f94:	82 30       	cpi	r24, 0x02	; 2
    1f96:	14 f0       	brlt	.+4      	; 0x1f9c <handleTach+0x32>
	{
		fan -= 2;
    1f98:	ee ef       	ldi	r30, 0xFE	; 254
    1f9a:	e8 0f       	add	r30, r24
	}
	g_fanSpeeds[fan] = rpm;
    1f9c:	82 2f       	mov	r24, r18
    1f9e:	93 2f       	mov	r25, r19
    1fa0:	ee 0f       	add	r30, r30
    1fa2:	ff 0b       	sbc	r31, r31
    1fa4:	e6 59       	subi	r30, 0x96	; 150
    1fa6:	fd 4f       	sbci	r31, 0xFD	; 253
    1fa8:	91 83       	std	Z+1, r25	; 0x01
    1faa:	80 83       	st	Z, r24
	
	g_firstTime = 0;
    1fac:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <g_firstTime+0x1>
    1fb0:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <g_firstTime>
	g_secondTime = 0;
    1fb4:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <g_secondTime+0x1>
    1fb8:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <g_secondTime>
	g_thirdTime = 0;
    1fbc:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <g_thirdTime+0x1>
    1fc0:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <g_thirdTime>
	
	return rpm;
}
    1fc4:	08 95       	ret

00001fc6 <prepareForTach>:

void prepareForTach(void)
{
	if(!g_zeroRpmTest)
    1fc6:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <g_zeroRpmTest>
    1fca:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <g_zeroRpmTest+0x1>
    1fce:	89 2b       	or	r24, r25
    1fd0:	91 f4       	brne	.+36     	; 0x1ff6 <prepareForTach+0x30>
	{
		TIMSK1 &= ~(1<<ICIE1);
    1fd2:	ef e6       	ldi	r30, 0x6F	; 111
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	8f 7d       	andi	r24, 0xDF	; 223
    1fda:	80 83       	st	Z, r24
		int8_t fan = ADMUX;
    1fdc:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    1fe0:	e8 2f       	mov	r30, r24
		if(fan > 1)
    1fe2:	82 30       	cpi	r24, 0x02	; 2
    1fe4:	14 f0       	brlt	.+4      	; 0x1fea <prepareForTach+0x24>
		{
			fan -= 2;
    1fe6:	ee ef       	ldi	r30, 0xFE	; 254
    1fe8:	e8 0f       	add	r30, r24
		}
		g_fanSpeeds[fan] = 0;
    1fea:	ee 0f       	add	r30, r30
    1fec:	ff 0b       	sbc	r31, r31
    1fee:	e6 59       	subi	r30, 0x96	; 150
    1ff0:	fd 4f       	sbci	r31, 0xFD	; 253
    1ff2:	11 82       	std	Z+1, r1	; 0x01
    1ff4:	10 82       	st	Z, r1
	}
	g_zeroRpmTest = 0;
    1ff6:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <g_zeroRpmTest+0x1>
    1ffa:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <g_zeroRpmTest>
	
	incrementAdmux();
    1ffe:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <incrementAdmux>
	
	g_firstTime = 0;
    2002:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <g_firstTime+0x1>
    2006:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <g_firstTime>
	g_secondTime = 0;
    200a:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <g_secondTime+0x1>
    200e:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <g_secondTime>
	g_thirdTime = 0;
    2012:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <g_thirdTime+0x1>
    2016:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <g_thirdTime>
	
	TIFR1 |= (1<<ICF1);
    201a:	b5 9a       	sbi	0x16, 5	; 22
	TIMSK1 |= (1<<ICIE1);
    201c:	ef e6       	ldi	r30, 0x6F	; 111
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	80 62       	ori	r24, 0x20	; 32
    2024:	80 83       	st	Z, r24
    2026:	08 95       	ret

00002028 <analogCompInit>:
	
}

void analogCompInit(void)
{
		DDRF = 0;
    2028:	10 ba       	out	0x10, r1	; 16
		PORTF |= 0xff;
    202a:	81 b3       	in	r24, 0x11	; 17
    202c:	8f ef       	ldi	r24, 0xFF	; 255
    202e:	81 bb       	out	0x11, r24	; 17
		ADCSRA &= ~(1<<ADEN);
    2030:	ea e7       	ldi	r30, 0x7A	; 122
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	8f 77       	andi	r24, 0x7F	; 127
    2038:	80 83       	st	Z, r24
		ADCSRB |= (1<<ACME);
    203a:	eb e7       	ldi	r30, 0x7B	; 123
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	80 64       	ori	r24, 0x40	; 64
    2042:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX0);
    2044:	ec e7       	ldi	r30, 0x7C	; 124
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	81 60       	ori	r24, 0x01	; 1
    204c:	80 83       	st	Z, r24
		
		ACSR |= (1<<ACIS1) | (1<<ACIS0) | (1<<ACIC) | (1<<ACBG);
    204e:	80 b7       	in	r24, 0x30	; 48
    2050:	87 64       	ori	r24, 0x47	; 71
    2052:	80 bf       	out	0x30, r24	; 48
		DIDR1 |= (1<<AIN0D);
    2054:	ef e7       	ldi	r30, 0x7F	; 127
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	81 60       	ori	r24, 0x01	; 1
    205c:	80 83       	st	Z, r24
    205e:	08 95       	ret

00002060 <pwmInit>:
}

void pwmInit()
{
	//Enable the waveformgeneration mode for fast pwm with 10bit top
	TCCR1A |= (1<<WGM11) | (1<<WGM10);
    2060:	e0 e8       	ldi	r30, 0x80	; 128
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	83 60       	ori	r24, 0x03	; 3
    2068:	80 83       	st	Z, r24
	TCCR3A |= (1<<WGM31) | (1<<WGM30);
    206a:	e0 e9       	ldi	r30, 0x90	; 144
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	83 60       	ori	r24, 0x03	; 3
    2072:	80 83       	st	Z, r24
	
	TCCR1B |= (1<<CS10) | (1<<WGM12);
    2074:	e1 e8       	ldi	r30, 0x81	; 129
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	89 60       	ori	r24, 0x09	; 9
    207c:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    207e:	80 ea       	ldi	r24, 0xA0	; 160
    2080:	8a 95       	dec	r24
    2082:	f1 f7       	brne	.-4      	; 0x2080 <pwmInit+0x20>
	
	_delay_us(30);
	
	TCCR3B |= (1<<CS30) | (1<<WGM32);
    2084:	e1 e9       	ldi	r30, 0x91	; 145
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	89 60       	ori	r24, 0x09	; 9
    208c:	80 83       	st	Z, r24
	
	TIMSK1 |= (1<<OCIE1A) | (1<<OCIE1B) | (1<<OCIE1C) | (1<<TOIE1);
    208e:	ef e6       	ldi	r30, 0x6F	; 111
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	8f 60       	ori	r24, 0x0F	; 15
    2096:	80 83       	st	Z, r24
	TIMSK3 |= (1<<OCIE3A) | (1<<OCIE3B) | (1<<OCIE3C) | (1<<TOIE3);
    2098:	e1 e7       	ldi	r30, 0x71	; 113
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	8f 60       	ori	r24, 0x0F	; 15
    20a0:	80 83       	st	Z, r24
	
	OCR1A = 500;
    20a2:	84 ef       	ldi	r24, 0xF4	; 244
    20a4:	91 e0       	ldi	r25, 0x01	; 1
    20a6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    20aa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	OCR1B = 500;
    20ae:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    20b2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
	OCR1C = 500;
    20b6:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <__DATA_REGION_ORIGIN__+0x2d>
    20ba:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__DATA_REGION_ORIGIN__+0x2c>
	
	OCR3A = 500;
    20be:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__DATA_REGION_ORIGIN__+0x39>
    20c2:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__DATA_REGION_ORIGIN__+0x38>
	OCR3B = 500;
    20c6:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__DATA_REGION_ORIGIN__+0x3b>
    20ca:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__DATA_REGION_ORIGIN__+0x3a>
	OCR3C = 500;
    20ce:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__DATA_REGION_ORIGIN__+0x3d>
    20d2:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__DATA_REGION_ORIGIN__+0x3c>
    20d6:	08 95       	ret

000020d8 <putTempInString>:

void TWITimerInit()
{
	TCCR1A |= (1<<WGM10) | (1<<WGM11);
	TCCR1B |= (1<<WGM12) | (1<<CS10);
	TIMSK1 |= (1<<TOIE1);
    20d8:	0f 93       	push	r16
    20da:	1f 93       	push	r17
    20dc:	cf 93       	push	r28
    20de:	df 93       	push	r29
    20e0:	eb 01       	movw	r28, r22
    20e2:	fb 01       	movw	r30, r22
    20e4:	35 96       	adiw	r30, 0x05	; 5
    20e6:	8b 01       	movw	r16, r22
    20e8:	0e 5f       	subi	r16, 0xFE	; 254
    20ea:	1f 4f       	sbci	r17, 0xFF	; 255
    20ec:	2a e0       	ldi	r18, 0x0A	; 10
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	b9 01       	movw	r22, r18
    20f2:	0e 94 2a 14 	call	0x2854	; 0x2854 <__divmodhi4>
    20f6:	80 5d       	subi	r24, 0xD0	; 208
    20f8:	82 93       	st	-Z, r24
    20fa:	86 2f       	mov	r24, r22
    20fc:	97 2f       	mov	r25, r23
    20fe:	e0 17       	cp	r30, r16
    2100:	f1 07       	cpc	r31, r17
    2102:	b1 f7       	brne	.-20     	; 0x20f0 <putTempInString+0x18>
    2104:	84 e5       	ldi	r24, 0x54	; 84
    2106:	88 83       	st	Y, r24
    2108:	40 5d       	subi	r20, 0xD0	; 208
    210a:	49 83       	std	Y+1, r20	; 0x01
    210c:	df 91       	pop	r29
    210e:	cf 91       	pop	r28
    2110:	1f 91       	pop	r17
    2112:	0f 91       	pop	r16
    2114:	08 95       	ret

00002116 <__vector_36>:
    2116:	1f 92       	push	r1
    2118:	0f 92       	push	r0
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	0f 92       	push	r0
    211e:	11 24       	eor	r1, r1
    2120:	2f 93       	push	r18
    2122:	3f 93       	push	r19
    2124:	4f 93       	push	r20
    2126:	5f 93       	push	r21
    2128:	6f 93       	push	r22
    212a:	7f 93       	push	r23
    212c:	8f 93       	push	r24
    212e:	9f 93       	push	r25
    2130:	af 93       	push	r26
    2132:	bf 93       	push	r27
    2134:	ef 93       	push	r30
    2136:	ff 93       	push	r31
    2138:	0e 94 2e 09 	call	0x125c	; 0x125c <USB_USBTask>
    213c:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2140:	8e 2f       	mov	r24, r30
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	fc 01       	movw	r30, r24
    2146:	38 97       	sbiw	r30, 0x08	; 8
    2148:	e1 35       	cpi	r30, 0x51	; 81
    214a:	f1 05       	cpc	r31, r1
    214c:	08 f0       	brcs	.+2      	; 0x2150 <__vector_36+0x3a>
    214e:	27 c1       	rjmp	.+590    	; 0x239e <__vector_36+0x288>
    2150:	e0 5a       	subi	r30, 0xA0	; 160
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	0c 94 7f 14 	jmp	0x28fe	; 0x28fe <__tablejump2__>
    2158:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <tempHeader>
    215c:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <tempHeader+0x1>
    2160:	89 2b       	or	r24, r25
    2162:	89 f0       	breq	.+34     	; 0x2186 <__vector_36+0x70>
    2164:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <initialized1>
    2168:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <initialized1+0x1>
    216c:	89 2b       	or	r24, r25
    216e:	21 f0       	breq	.+8      	; 0x2178 <__vector_36+0x62>
    2170:	8f e3       	ldi	r24, 0x3F	; 63
    2172:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2176:	03 c0       	rjmp	.+6      	; 0x217e <__vector_36+0x68>
    2178:	8e e3       	ldi	r24, 0x3E	; 62
    217a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    217e:	85 e8       	ldi	r24, 0x85	; 133
    2180:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2184:	0c c1       	rjmp	.+536    	; 0x239e <__vector_36+0x288>
    2186:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <initialized2>
    218a:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <initialized2+0x1>
    218e:	89 2b       	or	r24, r25
    2190:	21 f0       	breq	.+8      	; 0x219a <__vector_36+0x84>
    2192:	81 e3       	ldi	r24, 0x31	; 49
    2194:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2198:	03 c0       	rjmp	.+6      	; 0x21a0 <__vector_36+0x8a>
    219a:	80 e3       	ldi	r24, 0x30	; 48
    219c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    21a0:	85 e8       	ldi	r24, 0x85	; 133
    21a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    21a6:	fb c0       	rjmp	.+502    	; 0x239e <__vector_36+0x288>
    21a8:	85 e0       	ldi	r24, 0x05	; 5
    21aa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    21ae:	85 e8       	ldi	r24, 0x85	; 133
    21b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    21b4:	f4 c0       	rjmp	.+488    	; 0x239e <__vector_36+0x288>
    21b6:	85 e9       	ldi	r24, 0x95	; 149
    21b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    21bc:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <tempHeader>
    21c0:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <tempHeader+0x1>
    21c4:	89 2b       	or	r24, r25
    21c6:	29 f0       	breq	.+10     	; 0x21d2 <__vector_36+0xbc>
    21c8:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <tempHeader+0x1>
    21cc:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <tempHeader>
    21d0:	e6 c0       	rjmp	.+460    	; 0x239e <__vector_36+0x288>
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <tempHeader+0x1>
    21da:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <tempHeader>
    21de:	df c0       	rjmp	.+446    	; 0x239e <__vector_36+0x288>
    21e0:	85 e9       	ldi	r24, 0x95	; 149
    21e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    21e6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <tempHeader>
    21ea:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <tempHeader+0x1>
    21ee:	89 2b       	or	r24, r25
    21f0:	59 f0       	breq	.+22     	; 0x2208 <__vector_36+0xf2>
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <initialized1+0x1>
    21fa:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <initialized1>
    21fe:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <tempHeader+0x1>
    2202:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <tempHeader>
    2206:	cb c0       	rjmp	.+406    	; 0x239e <__vector_36+0x288>
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <initialized2+0x1>
    2210:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <initialized2>
    2214:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <tempHeader+0x1>
    2218:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <tempHeader>
    221c:	c0 c0       	rjmp	.+384    	; 0x239e <__vector_36+0x288>
    221e:	85 e9       	ldi	r24, 0x95	; 149
    2220:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2224:	bc c0       	rjmp	.+376    	; 0x239e <__vector_36+0x288>
    2226:	85 e8       	ldi	r24, 0x85	; 133
    2228:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    222c:	b8 c0       	rjmp	.+368    	; 0x239e <__vector_36+0x288>
    222e:	85 ec       	ldi	r24, 0xC5	; 197
    2230:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2234:	b4 c0       	rjmp	.+360    	; 0x239e <__vector_36+0x288>
    2236:	80 e9       	ldi	r24, 0x90	; 144
    2238:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    223c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <tempHeader>
    2240:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <tempHeader+0x1>
    2244:	89 2b       	or	r24, r25
    2246:	69 f0       	breq	.+26     	; 0x2262 <__vector_36+0x14c>
    2248:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <initialized1+0x1>
    224c:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <initialized1>
    2250:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <tempHeader+0x1>
    2254:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <tempHeader>
    2258:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <temp1+0x1>
    225c:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <temp1>
    2260:	9e c0       	rjmp	.+316    	; 0x239e <__vector_36+0x288>
    2262:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <initialized2+0x1>
    2266:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <initialized2>
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <tempHeader+0x1>
    2272:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <tempHeader>
    2276:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <temp2+0x1>
    227a:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <temp2>
    227e:	8f c0       	rjmp	.+286    	; 0x239e <__vector_36+0x288>
    2280:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <temptemp+0x1>
    228a:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <temptemp>
    228e:	85 e8       	ldi	r24, 0x85	; 133
    2290:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2294:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <tempHeader>
    2298:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <tempHeader+0x1>
    229c:	89 2b       	or	r24, r25
    229e:	59 f0       	breq	.+22     	; 0x22b6 <__vector_36+0x1a0>
    22a0:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <temptemp>
    22a4:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <temptemp+0x1>
    22a8:	98 2f       	mov	r25, r24
    22aa:	88 27       	eor	r24, r24
    22ac:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <temp1+0x1>
    22b0:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <temp1>
    22b4:	74 c0       	rjmp	.+232    	; 0x239e <__vector_36+0x288>
    22b6:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <temptemp>
    22ba:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <temptemp+0x1>
    22be:	98 2f       	mov	r25, r24
    22c0:	88 27       	eor	r24, r24
    22c2:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <temp2+0x1>
    22c6:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <temp2>
    22ca:	69 c0       	rjmp	.+210    	; 0x239e <__vector_36+0x288>
    22cc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <temptemp+0x1>
    22d6:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <temptemp>
    22da:	85 e9       	ldi	r24, 0x95	; 149
    22dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    22e0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <tempHeader>
    22e4:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <tempHeader+0x1>
    22e8:	89 2b       	or	r24, r25
    22ea:	61 f1       	breq	.+88     	; 0x2344 <__vector_36+0x22e>
    22ec:	20 91 82 02 	lds	r18, 0x0282	; 0x800282 <temptemp>
    22f0:	30 91 83 02 	lds	r19, 0x0283	; 0x800283 <temptemp+0x1>
    22f4:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <temp1>
    22f8:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <temp1+0x1>
    22fc:	82 2b       	or	r24, r18
    22fe:	93 2b       	or	r25, r19
    2300:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <temp1+0x1>
    2304:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <temp1>
    2308:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <temp1>
    230c:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <temp1+0x1>
    2310:	9f 70       	andi	r25, 0x0F	; 15
    2312:	95 95       	asr	r25
    2314:	87 95       	ror	r24
    2316:	95 95       	asr	r25
    2318:	87 95       	ror	r24
    231a:	95 95       	asr	r25
    231c:	87 95       	ror	r24
    231e:	95 95       	asr	r25
    2320:	87 95       	ror	r24
    2322:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <g_temp1+0x1>
    2326:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <g_temp1>
    232a:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <tempHeader+0x1>
    232e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <tempHeader>
    2332:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <temp1+0x1>
    2336:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <temp1>
    233a:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <temptemp+0x1>
    233e:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <temptemp>
    2342:	2d c0       	rjmp	.+90     	; 0x239e <__vector_36+0x288>
    2344:	20 91 82 02 	lds	r18, 0x0282	; 0x800282 <temptemp>
    2348:	30 91 83 02 	lds	r19, 0x0283	; 0x800283 <temptemp+0x1>
    234c:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <temp2>
    2350:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <temp2+0x1>
    2354:	82 2b       	or	r24, r18
    2356:	93 2b       	or	r25, r19
    2358:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <temp2+0x1>
    235c:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <temp2>
    2360:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <temp2>
    2364:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <temp2+0x1>
    2368:	9f 70       	andi	r25, 0x0F	; 15
    236a:	95 95       	asr	r25
    236c:	87 95       	ror	r24
    236e:	95 95       	asr	r25
    2370:	87 95       	ror	r24
    2372:	95 95       	asr	r25
    2374:	87 95       	ror	r24
    2376:	95 95       	asr	r25
    2378:	87 95       	ror	r24
    237a:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <g_temp2+0x1>
    237e:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <g_temp2>
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <tempHeader+0x1>
    238a:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <tempHeader>
    238e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <temp2+0x1>
    2392:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <temp2>
    2396:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <temptemp+0x1>
    239a:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <temptemp>
    239e:	ff 91       	pop	r31
    23a0:	ef 91       	pop	r30
    23a2:	bf 91       	pop	r27
    23a4:	af 91       	pop	r26
    23a6:	9f 91       	pop	r25
    23a8:	8f 91       	pop	r24
    23aa:	7f 91       	pop	r23
    23ac:	6f 91       	pop	r22
    23ae:	5f 91       	pop	r21
    23b0:	4f 91       	pop	r20
    23b2:	3f 91       	pop	r19
    23b4:	2f 91       	pop	r18
    23b6:	0f 90       	pop	r0
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	0f 90       	pop	r0
    23bc:	1f 90       	pop	r1
    23be:	18 95       	reti

000023c0 <TWIInit>:
void TWIInit()
{
	
	//TWITimerInit();
	
	TWBR = 240;
    23c0:	80 ef       	ldi	r24, 0xF0	; 240
    23c2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
	//DDRD |= (1<<DDD0) | (1<<DDD1);
	//PORTD |= (1<<PORTD0) | (1<<PORTD1);
	TWCR |= (1<<TWEA) | (1<<TWEN) | (1<<TWIE);
    23c6:	ec eb       	ldi	r30, 0xBC	; 188
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	80 81       	ld	r24, Z
    23cc:	85 64       	ori	r24, 0x45	; 69
    23ce:	80 83       	st	Z, r24
	TWAR |= (1<<TWA4) | (1<<TWA1) | (1<<TWGCE);
    23d0:	aa eb       	ldi	r26, 0xBA	; 186
    23d2:	b0 e0       	ldi	r27, 0x00	; 0
    23d4:	8c 91       	ld	r24, X
    23d6:	85 62       	ori	r24, 0x25	; 37
    23d8:	8c 93       	st	X, r24
	
	
	TWCR |= (1<<TWSTA) | (1<<TWINT) | (1<<TWEN);
    23da:	80 81       	ld	r24, Z
    23dc:	84 6a       	ori	r24, 0xA4	; 164
    23de:	80 83       	st	Z, r24
    23e0:	08 95       	ret

000023e2 <__subsf3>:
    23e2:	50 58       	subi	r21, 0x80	; 128

000023e4 <__addsf3>:
    23e4:	bb 27       	eor	r27, r27
    23e6:	aa 27       	eor	r26, r26
    23e8:	0e 94 09 12 	call	0x2412	; 0x2412 <__addsf3x>
    23ec:	0c 94 83 13 	jmp	0x2706	; 0x2706 <__fp_round>
    23f0:	0e 94 75 13 	call	0x26ea	; 0x26ea <__fp_pscA>
    23f4:	38 f0       	brcs	.+14     	; 0x2404 <__addsf3+0x20>
    23f6:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fp_pscB>
    23fa:	20 f0       	brcs	.+8      	; 0x2404 <__addsf3+0x20>
    23fc:	39 f4       	brne	.+14     	; 0x240c <__addsf3+0x28>
    23fe:	9f 3f       	cpi	r25, 0xFF	; 255
    2400:	19 f4       	brne	.+6      	; 0x2408 <__addsf3+0x24>
    2402:	26 f4       	brtc	.+8      	; 0x240c <__addsf3+0x28>
    2404:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__fp_nan>
    2408:	0e f4       	brtc	.+2      	; 0x240c <__addsf3+0x28>
    240a:	e0 95       	com	r30
    240c:	e7 fb       	bst	r30, 7
    240e:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__fp_inf>

00002412 <__addsf3x>:
    2412:	e9 2f       	mov	r30, r25
    2414:	0e 94 94 13 	call	0x2728	; 0x2728 <__fp_split3>
    2418:	58 f3       	brcs	.-42     	; 0x23f0 <__addsf3+0xc>
    241a:	ba 17       	cp	r27, r26
    241c:	62 07       	cpc	r22, r18
    241e:	73 07       	cpc	r23, r19
    2420:	84 07       	cpc	r24, r20
    2422:	95 07       	cpc	r25, r21
    2424:	20 f0       	brcs	.+8      	; 0x242e <__addsf3x+0x1c>
    2426:	79 f4       	brne	.+30     	; 0x2446 <__addsf3x+0x34>
    2428:	a6 f5       	brtc	.+104    	; 0x2492 <__addsf3x+0x80>
    242a:	0c 94 b6 13 	jmp	0x276c	; 0x276c <__fp_zero>
    242e:	0e f4       	brtc	.+2      	; 0x2432 <__addsf3x+0x20>
    2430:	e0 95       	com	r30
    2432:	0b 2e       	mov	r0, r27
    2434:	ba 2f       	mov	r27, r26
    2436:	a0 2d       	mov	r26, r0
    2438:	0b 01       	movw	r0, r22
    243a:	b9 01       	movw	r22, r18
    243c:	90 01       	movw	r18, r0
    243e:	0c 01       	movw	r0, r24
    2440:	ca 01       	movw	r24, r20
    2442:	a0 01       	movw	r20, r0
    2444:	11 24       	eor	r1, r1
    2446:	ff 27       	eor	r31, r31
    2448:	59 1b       	sub	r21, r25
    244a:	99 f0       	breq	.+38     	; 0x2472 <__addsf3x+0x60>
    244c:	59 3f       	cpi	r21, 0xF9	; 249
    244e:	50 f4       	brcc	.+20     	; 0x2464 <__addsf3x+0x52>
    2450:	50 3e       	cpi	r21, 0xE0	; 224
    2452:	68 f1       	brcs	.+90     	; 0x24ae <__addsf3x+0x9c>
    2454:	1a 16       	cp	r1, r26
    2456:	f0 40       	sbci	r31, 0x00	; 0
    2458:	a2 2f       	mov	r26, r18
    245a:	23 2f       	mov	r18, r19
    245c:	34 2f       	mov	r19, r20
    245e:	44 27       	eor	r20, r20
    2460:	58 5f       	subi	r21, 0xF8	; 248
    2462:	f3 cf       	rjmp	.-26     	; 0x244a <__addsf3x+0x38>
    2464:	46 95       	lsr	r20
    2466:	37 95       	ror	r19
    2468:	27 95       	ror	r18
    246a:	a7 95       	ror	r26
    246c:	f0 40       	sbci	r31, 0x00	; 0
    246e:	53 95       	inc	r21
    2470:	c9 f7       	brne	.-14     	; 0x2464 <__addsf3x+0x52>
    2472:	7e f4       	brtc	.+30     	; 0x2492 <__addsf3x+0x80>
    2474:	1f 16       	cp	r1, r31
    2476:	ba 0b       	sbc	r27, r26
    2478:	62 0b       	sbc	r22, r18
    247a:	73 0b       	sbc	r23, r19
    247c:	84 0b       	sbc	r24, r20
    247e:	ba f0       	brmi	.+46     	; 0x24ae <__addsf3x+0x9c>
    2480:	91 50       	subi	r25, 0x01	; 1
    2482:	a1 f0       	breq	.+40     	; 0x24ac <__addsf3x+0x9a>
    2484:	ff 0f       	add	r31, r31
    2486:	bb 1f       	adc	r27, r27
    2488:	66 1f       	adc	r22, r22
    248a:	77 1f       	adc	r23, r23
    248c:	88 1f       	adc	r24, r24
    248e:	c2 f7       	brpl	.-16     	; 0x2480 <__addsf3x+0x6e>
    2490:	0e c0       	rjmp	.+28     	; 0x24ae <__addsf3x+0x9c>
    2492:	ba 0f       	add	r27, r26
    2494:	62 1f       	adc	r22, r18
    2496:	73 1f       	adc	r23, r19
    2498:	84 1f       	adc	r24, r20
    249a:	48 f4       	brcc	.+18     	; 0x24ae <__addsf3x+0x9c>
    249c:	87 95       	ror	r24
    249e:	77 95       	ror	r23
    24a0:	67 95       	ror	r22
    24a2:	b7 95       	ror	r27
    24a4:	f7 95       	ror	r31
    24a6:	9e 3f       	cpi	r25, 0xFE	; 254
    24a8:	08 f0       	brcs	.+2      	; 0x24ac <__addsf3x+0x9a>
    24aa:	b0 cf       	rjmp	.-160    	; 0x240c <__addsf3+0x28>
    24ac:	93 95       	inc	r25
    24ae:	88 0f       	add	r24, r24
    24b0:	08 f0       	brcs	.+2      	; 0x24b4 <__addsf3x+0xa2>
    24b2:	99 27       	eor	r25, r25
    24b4:	ee 0f       	add	r30, r30
    24b6:	97 95       	ror	r25
    24b8:	87 95       	ror	r24
    24ba:	08 95       	ret

000024bc <__cmpsf2>:
    24bc:	0e 94 48 13 	call	0x2690	; 0x2690 <__fp_cmp>
    24c0:	08 f4       	brcc	.+2      	; 0x24c4 <__cmpsf2+0x8>
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	08 95       	ret

000024c6 <__divsf3>:
    24c6:	0e 94 77 12 	call	0x24ee	; 0x24ee <__divsf3x>
    24ca:	0c 94 83 13 	jmp	0x2706	; 0x2706 <__fp_round>
    24ce:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fp_pscB>
    24d2:	58 f0       	brcs	.+22     	; 0x24ea <__divsf3+0x24>
    24d4:	0e 94 75 13 	call	0x26ea	; 0x26ea <__fp_pscA>
    24d8:	40 f0       	brcs	.+16     	; 0x24ea <__divsf3+0x24>
    24da:	29 f4       	brne	.+10     	; 0x24e6 <__divsf3+0x20>
    24dc:	5f 3f       	cpi	r21, 0xFF	; 255
    24de:	29 f0       	breq	.+10     	; 0x24ea <__divsf3+0x24>
    24e0:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__fp_inf>
    24e4:	51 11       	cpse	r21, r1
    24e6:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__fp_szero>
    24ea:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__fp_nan>

000024ee <__divsf3x>:
    24ee:	0e 94 94 13 	call	0x2728	; 0x2728 <__fp_split3>
    24f2:	68 f3       	brcs	.-38     	; 0x24ce <__divsf3+0x8>

000024f4 <__divsf3_pse>:
    24f4:	99 23       	and	r25, r25
    24f6:	b1 f3       	breq	.-20     	; 0x24e4 <__divsf3+0x1e>
    24f8:	55 23       	and	r21, r21
    24fa:	91 f3       	breq	.-28     	; 0x24e0 <__divsf3+0x1a>
    24fc:	95 1b       	sub	r25, r21
    24fe:	55 0b       	sbc	r21, r21
    2500:	bb 27       	eor	r27, r27
    2502:	aa 27       	eor	r26, r26
    2504:	62 17       	cp	r22, r18
    2506:	73 07       	cpc	r23, r19
    2508:	84 07       	cpc	r24, r20
    250a:	38 f0       	brcs	.+14     	; 0x251a <__divsf3_pse+0x26>
    250c:	9f 5f       	subi	r25, 0xFF	; 255
    250e:	5f 4f       	sbci	r21, 0xFF	; 255
    2510:	22 0f       	add	r18, r18
    2512:	33 1f       	adc	r19, r19
    2514:	44 1f       	adc	r20, r20
    2516:	aa 1f       	adc	r26, r26
    2518:	a9 f3       	breq	.-22     	; 0x2504 <__divsf3_pse+0x10>
    251a:	35 d0       	rcall	.+106    	; 0x2586 <__divsf3_pse+0x92>
    251c:	0e 2e       	mov	r0, r30
    251e:	3a f0       	brmi	.+14     	; 0x252e <__divsf3_pse+0x3a>
    2520:	e0 e8       	ldi	r30, 0x80	; 128
    2522:	32 d0       	rcall	.+100    	; 0x2588 <__divsf3_pse+0x94>
    2524:	91 50       	subi	r25, 0x01	; 1
    2526:	50 40       	sbci	r21, 0x00	; 0
    2528:	e6 95       	lsr	r30
    252a:	00 1c       	adc	r0, r0
    252c:	ca f7       	brpl	.-14     	; 0x2520 <__divsf3_pse+0x2c>
    252e:	2b d0       	rcall	.+86     	; 0x2586 <__divsf3_pse+0x92>
    2530:	fe 2f       	mov	r31, r30
    2532:	29 d0       	rcall	.+82     	; 0x2586 <__divsf3_pse+0x92>
    2534:	66 0f       	add	r22, r22
    2536:	77 1f       	adc	r23, r23
    2538:	88 1f       	adc	r24, r24
    253a:	bb 1f       	adc	r27, r27
    253c:	26 17       	cp	r18, r22
    253e:	37 07       	cpc	r19, r23
    2540:	48 07       	cpc	r20, r24
    2542:	ab 07       	cpc	r26, r27
    2544:	b0 e8       	ldi	r27, 0x80	; 128
    2546:	09 f0       	breq	.+2      	; 0x254a <__divsf3_pse+0x56>
    2548:	bb 0b       	sbc	r27, r27
    254a:	80 2d       	mov	r24, r0
    254c:	bf 01       	movw	r22, r30
    254e:	ff 27       	eor	r31, r31
    2550:	93 58       	subi	r25, 0x83	; 131
    2552:	5f 4f       	sbci	r21, 0xFF	; 255
    2554:	3a f0       	brmi	.+14     	; 0x2564 <__divsf3_pse+0x70>
    2556:	9e 3f       	cpi	r25, 0xFE	; 254
    2558:	51 05       	cpc	r21, r1
    255a:	78 f0       	brcs	.+30     	; 0x257a <__divsf3_pse+0x86>
    255c:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__fp_inf>
    2560:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__fp_szero>
    2564:	5f 3f       	cpi	r21, 0xFF	; 255
    2566:	e4 f3       	brlt	.-8      	; 0x2560 <__divsf3_pse+0x6c>
    2568:	98 3e       	cpi	r25, 0xE8	; 232
    256a:	d4 f3       	brlt	.-12     	; 0x2560 <__divsf3_pse+0x6c>
    256c:	86 95       	lsr	r24
    256e:	77 95       	ror	r23
    2570:	67 95       	ror	r22
    2572:	b7 95       	ror	r27
    2574:	f7 95       	ror	r31
    2576:	9f 5f       	subi	r25, 0xFF	; 255
    2578:	c9 f7       	brne	.-14     	; 0x256c <__divsf3_pse+0x78>
    257a:	88 0f       	add	r24, r24
    257c:	91 1d       	adc	r25, r1
    257e:	96 95       	lsr	r25
    2580:	87 95       	ror	r24
    2582:	97 f9       	bld	r25, 7
    2584:	08 95       	ret
    2586:	e1 e0       	ldi	r30, 0x01	; 1
    2588:	66 0f       	add	r22, r22
    258a:	77 1f       	adc	r23, r23
    258c:	88 1f       	adc	r24, r24
    258e:	bb 1f       	adc	r27, r27
    2590:	62 17       	cp	r22, r18
    2592:	73 07       	cpc	r23, r19
    2594:	84 07       	cpc	r24, r20
    2596:	ba 07       	cpc	r27, r26
    2598:	20 f0       	brcs	.+8      	; 0x25a2 <__divsf3_pse+0xae>
    259a:	62 1b       	sub	r22, r18
    259c:	73 0b       	sbc	r23, r19
    259e:	84 0b       	sbc	r24, r20
    25a0:	ba 0b       	sbc	r27, r26
    25a2:	ee 1f       	adc	r30, r30
    25a4:	88 f7       	brcc	.-30     	; 0x2588 <__divsf3_pse+0x94>
    25a6:	e0 95       	com	r30
    25a8:	08 95       	ret

000025aa <__fixsfsi>:
    25aa:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <__fixunssfsi>
    25ae:	68 94       	set
    25b0:	b1 11       	cpse	r27, r1
    25b2:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__fp_szero>
    25b6:	08 95       	ret

000025b8 <__fixunssfsi>:
    25b8:	0e 94 9c 13 	call	0x2738	; 0x2738 <__fp_splitA>
    25bc:	88 f0       	brcs	.+34     	; 0x25e0 <__fixunssfsi+0x28>
    25be:	9f 57       	subi	r25, 0x7F	; 127
    25c0:	98 f0       	brcs	.+38     	; 0x25e8 <__fixunssfsi+0x30>
    25c2:	b9 2f       	mov	r27, r25
    25c4:	99 27       	eor	r25, r25
    25c6:	b7 51       	subi	r27, 0x17	; 23
    25c8:	b0 f0       	brcs	.+44     	; 0x25f6 <__fixunssfsi+0x3e>
    25ca:	e1 f0       	breq	.+56     	; 0x2604 <__fixunssfsi+0x4c>
    25cc:	66 0f       	add	r22, r22
    25ce:	77 1f       	adc	r23, r23
    25d0:	88 1f       	adc	r24, r24
    25d2:	99 1f       	adc	r25, r25
    25d4:	1a f0       	brmi	.+6      	; 0x25dc <__fixunssfsi+0x24>
    25d6:	ba 95       	dec	r27
    25d8:	c9 f7       	brne	.-14     	; 0x25cc <__fixunssfsi+0x14>
    25da:	14 c0       	rjmp	.+40     	; 0x2604 <__fixunssfsi+0x4c>
    25dc:	b1 30       	cpi	r27, 0x01	; 1
    25de:	91 f0       	breq	.+36     	; 0x2604 <__fixunssfsi+0x4c>
    25e0:	0e 94 b6 13 	call	0x276c	; 0x276c <__fp_zero>
    25e4:	b1 e0       	ldi	r27, 0x01	; 1
    25e6:	08 95       	ret
    25e8:	0c 94 b6 13 	jmp	0x276c	; 0x276c <__fp_zero>
    25ec:	67 2f       	mov	r22, r23
    25ee:	78 2f       	mov	r23, r24
    25f0:	88 27       	eor	r24, r24
    25f2:	b8 5f       	subi	r27, 0xF8	; 248
    25f4:	39 f0       	breq	.+14     	; 0x2604 <__fixunssfsi+0x4c>
    25f6:	b9 3f       	cpi	r27, 0xF9	; 249
    25f8:	cc f3       	brlt	.-14     	; 0x25ec <__fixunssfsi+0x34>
    25fa:	86 95       	lsr	r24
    25fc:	77 95       	ror	r23
    25fe:	67 95       	ror	r22
    2600:	b3 95       	inc	r27
    2602:	d9 f7       	brne	.-10     	; 0x25fa <__fixunssfsi+0x42>
    2604:	3e f4       	brtc	.+14     	; 0x2614 <__fixunssfsi+0x5c>
    2606:	90 95       	com	r25
    2608:	80 95       	com	r24
    260a:	70 95       	com	r23
    260c:	61 95       	neg	r22
    260e:	7f 4f       	sbci	r23, 0xFF	; 255
    2610:	8f 4f       	sbci	r24, 0xFF	; 255
    2612:	9f 4f       	sbci	r25, 0xFF	; 255
    2614:	08 95       	ret

00002616 <__floatunsisf>:
    2616:	e8 94       	clt
    2618:	09 c0       	rjmp	.+18     	; 0x262c <__floatsisf+0x12>

0000261a <__floatsisf>:
    261a:	97 fb       	bst	r25, 7
    261c:	3e f4       	brtc	.+14     	; 0x262c <__floatsisf+0x12>
    261e:	90 95       	com	r25
    2620:	80 95       	com	r24
    2622:	70 95       	com	r23
    2624:	61 95       	neg	r22
    2626:	7f 4f       	sbci	r23, 0xFF	; 255
    2628:	8f 4f       	sbci	r24, 0xFF	; 255
    262a:	9f 4f       	sbci	r25, 0xFF	; 255
    262c:	99 23       	and	r25, r25
    262e:	a9 f0       	breq	.+42     	; 0x265a <__floatsisf+0x40>
    2630:	f9 2f       	mov	r31, r25
    2632:	96 e9       	ldi	r25, 0x96	; 150
    2634:	bb 27       	eor	r27, r27
    2636:	93 95       	inc	r25
    2638:	f6 95       	lsr	r31
    263a:	87 95       	ror	r24
    263c:	77 95       	ror	r23
    263e:	67 95       	ror	r22
    2640:	b7 95       	ror	r27
    2642:	f1 11       	cpse	r31, r1
    2644:	f8 cf       	rjmp	.-16     	; 0x2636 <__floatsisf+0x1c>
    2646:	fa f4       	brpl	.+62     	; 0x2686 <__floatsisf+0x6c>
    2648:	bb 0f       	add	r27, r27
    264a:	11 f4       	brne	.+4      	; 0x2650 <__floatsisf+0x36>
    264c:	60 ff       	sbrs	r22, 0
    264e:	1b c0       	rjmp	.+54     	; 0x2686 <__floatsisf+0x6c>
    2650:	6f 5f       	subi	r22, 0xFF	; 255
    2652:	7f 4f       	sbci	r23, 0xFF	; 255
    2654:	8f 4f       	sbci	r24, 0xFF	; 255
    2656:	9f 4f       	sbci	r25, 0xFF	; 255
    2658:	16 c0       	rjmp	.+44     	; 0x2686 <__floatsisf+0x6c>
    265a:	88 23       	and	r24, r24
    265c:	11 f0       	breq	.+4      	; 0x2662 <__floatsisf+0x48>
    265e:	96 e9       	ldi	r25, 0x96	; 150
    2660:	11 c0       	rjmp	.+34     	; 0x2684 <__floatsisf+0x6a>
    2662:	77 23       	and	r23, r23
    2664:	21 f0       	breq	.+8      	; 0x266e <__floatsisf+0x54>
    2666:	9e e8       	ldi	r25, 0x8E	; 142
    2668:	87 2f       	mov	r24, r23
    266a:	76 2f       	mov	r23, r22
    266c:	05 c0       	rjmp	.+10     	; 0x2678 <__floatsisf+0x5e>
    266e:	66 23       	and	r22, r22
    2670:	71 f0       	breq	.+28     	; 0x268e <__floatsisf+0x74>
    2672:	96 e8       	ldi	r25, 0x86	; 134
    2674:	86 2f       	mov	r24, r22
    2676:	70 e0       	ldi	r23, 0x00	; 0
    2678:	60 e0       	ldi	r22, 0x00	; 0
    267a:	2a f0       	brmi	.+10     	; 0x2686 <__floatsisf+0x6c>
    267c:	9a 95       	dec	r25
    267e:	66 0f       	add	r22, r22
    2680:	77 1f       	adc	r23, r23
    2682:	88 1f       	adc	r24, r24
    2684:	da f7       	brpl	.-10     	; 0x267c <__floatsisf+0x62>
    2686:	88 0f       	add	r24, r24
    2688:	96 95       	lsr	r25
    268a:	87 95       	ror	r24
    268c:	97 f9       	bld	r25, 7
    268e:	08 95       	ret

00002690 <__fp_cmp>:
    2690:	99 0f       	add	r25, r25
    2692:	00 08       	sbc	r0, r0
    2694:	55 0f       	add	r21, r21
    2696:	aa 0b       	sbc	r26, r26
    2698:	e0 e8       	ldi	r30, 0x80	; 128
    269a:	fe ef       	ldi	r31, 0xFE	; 254
    269c:	16 16       	cp	r1, r22
    269e:	17 06       	cpc	r1, r23
    26a0:	e8 07       	cpc	r30, r24
    26a2:	f9 07       	cpc	r31, r25
    26a4:	c0 f0       	brcs	.+48     	; 0x26d6 <__fp_cmp+0x46>
    26a6:	12 16       	cp	r1, r18
    26a8:	13 06       	cpc	r1, r19
    26aa:	e4 07       	cpc	r30, r20
    26ac:	f5 07       	cpc	r31, r21
    26ae:	98 f0       	brcs	.+38     	; 0x26d6 <__fp_cmp+0x46>
    26b0:	62 1b       	sub	r22, r18
    26b2:	73 0b       	sbc	r23, r19
    26b4:	84 0b       	sbc	r24, r20
    26b6:	95 0b       	sbc	r25, r21
    26b8:	39 f4       	brne	.+14     	; 0x26c8 <__fp_cmp+0x38>
    26ba:	0a 26       	eor	r0, r26
    26bc:	61 f0       	breq	.+24     	; 0x26d6 <__fp_cmp+0x46>
    26be:	23 2b       	or	r18, r19
    26c0:	24 2b       	or	r18, r20
    26c2:	25 2b       	or	r18, r21
    26c4:	21 f4       	brne	.+8      	; 0x26ce <__fp_cmp+0x3e>
    26c6:	08 95       	ret
    26c8:	0a 26       	eor	r0, r26
    26ca:	09 f4       	brne	.+2      	; 0x26ce <__fp_cmp+0x3e>
    26cc:	a1 40       	sbci	r26, 0x01	; 1
    26ce:	a6 95       	lsr	r26
    26d0:	8f ef       	ldi	r24, 0xFF	; 255
    26d2:	81 1d       	adc	r24, r1
    26d4:	81 1d       	adc	r24, r1
    26d6:	08 95       	ret

000026d8 <__fp_inf>:
    26d8:	97 f9       	bld	r25, 7
    26da:	9f 67       	ori	r25, 0x7F	; 127
    26dc:	80 e8       	ldi	r24, 0x80	; 128
    26de:	70 e0       	ldi	r23, 0x00	; 0
    26e0:	60 e0       	ldi	r22, 0x00	; 0
    26e2:	08 95       	ret

000026e4 <__fp_nan>:
    26e4:	9f ef       	ldi	r25, 0xFF	; 255
    26e6:	80 ec       	ldi	r24, 0xC0	; 192
    26e8:	08 95       	ret

000026ea <__fp_pscA>:
    26ea:	00 24       	eor	r0, r0
    26ec:	0a 94       	dec	r0
    26ee:	16 16       	cp	r1, r22
    26f0:	17 06       	cpc	r1, r23
    26f2:	18 06       	cpc	r1, r24
    26f4:	09 06       	cpc	r0, r25
    26f6:	08 95       	ret

000026f8 <__fp_pscB>:
    26f8:	00 24       	eor	r0, r0
    26fa:	0a 94       	dec	r0
    26fc:	12 16       	cp	r1, r18
    26fe:	13 06       	cpc	r1, r19
    2700:	14 06       	cpc	r1, r20
    2702:	05 06       	cpc	r0, r21
    2704:	08 95       	ret

00002706 <__fp_round>:
    2706:	09 2e       	mov	r0, r25
    2708:	03 94       	inc	r0
    270a:	00 0c       	add	r0, r0
    270c:	11 f4       	brne	.+4      	; 0x2712 <__fp_round+0xc>
    270e:	88 23       	and	r24, r24
    2710:	52 f0       	brmi	.+20     	; 0x2726 <__fp_round+0x20>
    2712:	bb 0f       	add	r27, r27
    2714:	40 f4       	brcc	.+16     	; 0x2726 <__fp_round+0x20>
    2716:	bf 2b       	or	r27, r31
    2718:	11 f4       	brne	.+4      	; 0x271e <__fp_round+0x18>
    271a:	60 ff       	sbrs	r22, 0
    271c:	04 c0       	rjmp	.+8      	; 0x2726 <__fp_round+0x20>
    271e:	6f 5f       	subi	r22, 0xFF	; 255
    2720:	7f 4f       	sbci	r23, 0xFF	; 255
    2722:	8f 4f       	sbci	r24, 0xFF	; 255
    2724:	9f 4f       	sbci	r25, 0xFF	; 255
    2726:	08 95       	ret

00002728 <__fp_split3>:
    2728:	57 fd       	sbrc	r21, 7
    272a:	90 58       	subi	r25, 0x80	; 128
    272c:	44 0f       	add	r20, r20
    272e:	55 1f       	adc	r21, r21
    2730:	59 f0       	breq	.+22     	; 0x2748 <__fp_splitA+0x10>
    2732:	5f 3f       	cpi	r21, 0xFF	; 255
    2734:	71 f0       	breq	.+28     	; 0x2752 <__fp_splitA+0x1a>
    2736:	47 95       	ror	r20

00002738 <__fp_splitA>:
    2738:	88 0f       	add	r24, r24
    273a:	97 fb       	bst	r25, 7
    273c:	99 1f       	adc	r25, r25
    273e:	61 f0       	breq	.+24     	; 0x2758 <__fp_splitA+0x20>
    2740:	9f 3f       	cpi	r25, 0xFF	; 255
    2742:	79 f0       	breq	.+30     	; 0x2762 <__fp_splitA+0x2a>
    2744:	87 95       	ror	r24
    2746:	08 95       	ret
    2748:	12 16       	cp	r1, r18
    274a:	13 06       	cpc	r1, r19
    274c:	14 06       	cpc	r1, r20
    274e:	55 1f       	adc	r21, r21
    2750:	f2 cf       	rjmp	.-28     	; 0x2736 <__fp_split3+0xe>
    2752:	46 95       	lsr	r20
    2754:	f1 df       	rcall	.-30     	; 0x2738 <__fp_splitA>
    2756:	08 c0       	rjmp	.+16     	; 0x2768 <__fp_splitA+0x30>
    2758:	16 16       	cp	r1, r22
    275a:	17 06       	cpc	r1, r23
    275c:	18 06       	cpc	r1, r24
    275e:	99 1f       	adc	r25, r25
    2760:	f1 cf       	rjmp	.-30     	; 0x2744 <__fp_splitA+0xc>
    2762:	86 95       	lsr	r24
    2764:	71 05       	cpc	r23, r1
    2766:	61 05       	cpc	r22, r1
    2768:	08 94       	sec
    276a:	08 95       	ret

0000276c <__fp_zero>:
    276c:	e8 94       	clt

0000276e <__fp_szero>:
    276e:	bb 27       	eor	r27, r27
    2770:	66 27       	eor	r22, r22
    2772:	77 27       	eor	r23, r23
    2774:	cb 01       	movw	r24, r22
    2776:	97 f9       	bld	r25, 7
    2778:	08 95       	ret

0000277a <__mulsf3>:
    277a:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__mulsf3x>
    277e:	0c 94 83 13 	jmp	0x2706	; 0x2706 <__fp_round>
    2782:	0e 94 75 13 	call	0x26ea	; 0x26ea <__fp_pscA>
    2786:	38 f0       	brcs	.+14     	; 0x2796 <__mulsf3+0x1c>
    2788:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fp_pscB>
    278c:	20 f0       	brcs	.+8      	; 0x2796 <__mulsf3+0x1c>
    278e:	95 23       	and	r25, r21
    2790:	11 f0       	breq	.+4      	; 0x2796 <__mulsf3+0x1c>
    2792:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__fp_inf>
    2796:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__fp_nan>
    279a:	11 24       	eor	r1, r1
    279c:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__fp_szero>

000027a0 <__mulsf3x>:
    27a0:	0e 94 94 13 	call	0x2728	; 0x2728 <__fp_split3>
    27a4:	70 f3       	brcs	.-36     	; 0x2782 <__mulsf3+0x8>

000027a6 <__mulsf3_pse>:
    27a6:	95 9f       	mul	r25, r21
    27a8:	c1 f3       	breq	.-16     	; 0x279a <__mulsf3+0x20>
    27aa:	95 0f       	add	r25, r21
    27ac:	50 e0       	ldi	r21, 0x00	; 0
    27ae:	55 1f       	adc	r21, r21
    27b0:	62 9f       	mul	r22, r18
    27b2:	f0 01       	movw	r30, r0
    27b4:	72 9f       	mul	r23, r18
    27b6:	bb 27       	eor	r27, r27
    27b8:	f0 0d       	add	r31, r0
    27ba:	b1 1d       	adc	r27, r1
    27bc:	63 9f       	mul	r22, r19
    27be:	aa 27       	eor	r26, r26
    27c0:	f0 0d       	add	r31, r0
    27c2:	b1 1d       	adc	r27, r1
    27c4:	aa 1f       	adc	r26, r26
    27c6:	64 9f       	mul	r22, r20
    27c8:	66 27       	eor	r22, r22
    27ca:	b0 0d       	add	r27, r0
    27cc:	a1 1d       	adc	r26, r1
    27ce:	66 1f       	adc	r22, r22
    27d0:	82 9f       	mul	r24, r18
    27d2:	22 27       	eor	r18, r18
    27d4:	b0 0d       	add	r27, r0
    27d6:	a1 1d       	adc	r26, r1
    27d8:	62 1f       	adc	r22, r18
    27da:	73 9f       	mul	r23, r19
    27dc:	b0 0d       	add	r27, r0
    27de:	a1 1d       	adc	r26, r1
    27e0:	62 1f       	adc	r22, r18
    27e2:	83 9f       	mul	r24, r19
    27e4:	a0 0d       	add	r26, r0
    27e6:	61 1d       	adc	r22, r1
    27e8:	22 1f       	adc	r18, r18
    27ea:	74 9f       	mul	r23, r20
    27ec:	33 27       	eor	r19, r19
    27ee:	a0 0d       	add	r26, r0
    27f0:	61 1d       	adc	r22, r1
    27f2:	23 1f       	adc	r18, r19
    27f4:	84 9f       	mul	r24, r20
    27f6:	60 0d       	add	r22, r0
    27f8:	21 1d       	adc	r18, r1
    27fa:	82 2f       	mov	r24, r18
    27fc:	76 2f       	mov	r23, r22
    27fe:	6a 2f       	mov	r22, r26
    2800:	11 24       	eor	r1, r1
    2802:	9f 57       	subi	r25, 0x7F	; 127
    2804:	50 40       	sbci	r21, 0x00	; 0
    2806:	9a f0       	brmi	.+38     	; 0x282e <__mulsf3_pse+0x88>
    2808:	f1 f0       	breq	.+60     	; 0x2846 <__mulsf3_pse+0xa0>
    280a:	88 23       	and	r24, r24
    280c:	4a f0       	brmi	.+18     	; 0x2820 <__mulsf3_pse+0x7a>
    280e:	ee 0f       	add	r30, r30
    2810:	ff 1f       	adc	r31, r31
    2812:	bb 1f       	adc	r27, r27
    2814:	66 1f       	adc	r22, r22
    2816:	77 1f       	adc	r23, r23
    2818:	88 1f       	adc	r24, r24
    281a:	91 50       	subi	r25, 0x01	; 1
    281c:	50 40       	sbci	r21, 0x00	; 0
    281e:	a9 f7       	brne	.-22     	; 0x280a <__mulsf3_pse+0x64>
    2820:	9e 3f       	cpi	r25, 0xFE	; 254
    2822:	51 05       	cpc	r21, r1
    2824:	80 f0       	brcs	.+32     	; 0x2846 <__mulsf3_pse+0xa0>
    2826:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__fp_inf>
    282a:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__fp_szero>
    282e:	5f 3f       	cpi	r21, 0xFF	; 255
    2830:	e4 f3       	brlt	.-8      	; 0x282a <__mulsf3_pse+0x84>
    2832:	98 3e       	cpi	r25, 0xE8	; 232
    2834:	d4 f3       	brlt	.-12     	; 0x282a <__mulsf3_pse+0x84>
    2836:	86 95       	lsr	r24
    2838:	77 95       	ror	r23
    283a:	67 95       	ror	r22
    283c:	b7 95       	ror	r27
    283e:	f7 95       	ror	r31
    2840:	e7 95       	ror	r30
    2842:	9f 5f       	subi	r25, 0xFF	; 255
    2844:	c1 f7       	brne	.-16     	; 0x2836 <__mulsf3_pse+0x90>
    2846:	fe 2b       	or	r31, r30
    2848:	88 0f       	add	r24, r24
    284a:	91 1d       	adc	r25, r1
    284c:	96 95       	lsr	r25
    284e:	87 95       	ror	r24
    2850:	97 f9       	bld	r25, 7
    2852:	08 95       	ret

00002854 <__divmodhi4>:
    2854:	97 fb       	bst	r25, 7
    2856:	07 2e       	mov	r0, r23
    2858:	16 f4       	brtc	.+4      	; 0x285e <__divmodhi4+0xa>
    285a:	00 94       	com	r0
    285c:	07 d0       	rcall	.+14     	; 0x286c <__divmodhi4_neg1>
    285e:	77 fd       	sbrc	r23, 7
    2860:	09 d0       	rcall	.+18     	; 0x2874 <__divmodhi4_neg2>
    2862:	0e 94 8c 14 	call	0x2918	; 0x2918 <__udivmodhi4>
    2866:	07 fc       	sbrc	r0, 7
    2868:	05 d0       	rcall	.+10     	; 0x2874 <__divmodhi4_neg2>
    286a:	3e f4       	brtc	.+14     	; 0x287a <__divmodhi4_exit>

0000286c <__divmodhi4_neg1>:
    286c:	90 95       	com	r25
    286e:	81 95       	neg	r24
    2870:	9f 4f       	sbci	r25, 0xFF	; 255
    2872:	08 95       	ret

00002874 <__divmodhi4_neg2>:
    2874:	70 95       	com	r23
    2876:	61 95       	neg	r22
    2878:	7f 4f       	sbci	r23, 0xFF	; 255

0000287a <__divmodhi4_exit>:
    287a:	08 95       	ret

0000287c <__udivmodsi4>:
    287c:	a1 e2       	ldi	r26, 0x21	; 33
    287e:	1a 2e       	mov	r1, r26
    2880:	aa 1b       	sub	r26, r26
    2882:	bb 1b       	sub	r27, r27
    2884:	fd 01       	movw	r30, r26
    2886:	0d c0       	rjmp	.+26     	; 0x28a2 <__udivmodsi4_ep>

00002888 <__udivmodsi4_loop>:
    2888:	aa 1f       	adc	r26, r26
    288a:	bb 1f       	adc	r27, r27
    288c:	ee 1f       	adc	r30, r30
    288e:	ff 1f       	adc	r31, r31
    2890:	a2 17       	cp	r26, r18
    2892:	b3 07       	cpc	r27, r19
    2894:	e4 07       	cpc	r30, r20
    2896:	f5 07       	cpc	r31, r21
    2898:	20 f0       	brcs	.+8      	; 0x28a2 <__udivmodsi4_ep>
    289a:	a2 1b       	sub	r26, r18
    289c:	b3 0b       	sbc	r27, r19
    289e:	e4 0b       	sbc	r30, r20
    28a0:	f5 0b       	sbc	r31, r21

000028a2 <__udivmodsi4_ep>:
    28a2:	66 1f       	adc	r22, r22
    28a4:	77 1f       	adc	r23, r23
    28a6:	88 1f       	adc	r24, r24
    28a8:	99 1f       	adc	r25, r25
    28aa:	1a 94       	dec	r1
    28ac:	69 f7       	brne	.-38     	; 0x2888 <__udivmodsi4_loop>
    28ae:	60 95       	com	r22
    28b0:	70 95       	com	r23
    28b2:	80 95       	com	r24
    28b4:	90 95       	com	r25
    28b6:	9b 01       	movw	r18, r22
    28b8:	ac 01       	movw	r20, r24
    28ba:	bd 01       	movw	r22, r26
    28bc:	cf 01       	movw	r24, r30
    28be:	08 95       	ret

000028c0 <__divmodsi4>:
    28c0:	05 2e       	mov	r0, r21
    28c2:	97 fb       	bst	r25, 7
    28c4:	1e f4       	brtc	.+6      	; 0x28cc <__divmodsi4+0xc>
    28c6:	00 94       	com	r0
    28c8:	0e 94 77 14 	call	0x28ee	; 0x28ee <__negsi2>
    28cc:	57 fd       	sbrc	r21, 7
    28ce:	07 d0       	rcall	.+14     	; 0x28de <__divmodsi4_neg2>
    28d0:	0e 94 3e 14 	call	0x287c	; 0x287c <__udivmodsi4>
    28d4:	07 fc       	sbrc	r0, 7
    28d6:	03 d0       	rcall	.+6      	; 0x28de <__divmodsi4_neg2>
    28d8:	4e f4       	brtc	.+18     	; 0x28ec <__divmodsi4_exit>
    28da:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__negsi2>

000028de <__divmodsi4_neg2>:
    28de:	50 95       	com	r21
    28e0:	40 95       	com	r20
    28e2:	30 95       	com	r19
    28e4:	21 95       	neg	r18
    28e6:	3f 4f       	sbci	r19, 0xFF	; 255
    28e8:	4f 4f       	sbci	r20, 0xFF	; 255
    28ea:	5f 4f       	sbci	r21, 0xFF	; 255

000028ec <__divmodsi4_exit>:
    28ec:	08 95       	ret

000028ee <__negsi2>:
    28ee:	90 95       	com	r25
    28f0:	80 95       	com	r24
    28f2:	70 95       	com	r23
    28f4:	61 95       	neg	r22
    28f6:	7f 4f       	sbci	r23, 0xFF	; 255
    28f8:	8f 4f       	sbci	r24, 0xFF	; 255
    28fa:	9f 4f       	sbci	r25, 0xFF	; 255
    28fc:	08 95       	ret

000028fe <__tablejump2__>:
    28fe:	ee 0f       	add	r30, r30
    2900:	ff 1f       	adc	r31, r31
    2902:	05 90       	lpm	r0, Z+
    2904:	f4 91       	lpm	r31, Z
    2906:	e0 2d       	mov	r30, r0
    2908:	09 94       	ijmp

0000290a <__usmulhisi3>:
    290a:	0e 94 a0 14 	call	0x2940	; 0x2940 <__umulhisi3>

0000290e <__usmulhisi3_tail>:
    290e:	b7 ff       	sbrs	r27, 7
    2910:	08 95       	ret
    2912:	82 1b       	sub	r24, r18
    2914:	93 0b       	sbc	r25, r19
    2916:	08 95       	ret

00002918 <__udivmodhi4>:
    2918:	aa 1b       	sub	r26, r26
    291a:	bb 1b       	sub	r27, r27
    291c:	51 e1       	ldi	r21, 0x11	; 17
    291e:	07 c0       	rjmp	.+14     	; 0x292e <__udivmodhi4_ep>

00002920 <__udivmodhi4_loop>:
    2920:	aa 1f       	adc	r26, r26
    2922:	bb 1f       	adc	r27, r27
    2924:	a6 17       	cp	r26, r22
    2926:	b7 07       	cpc	r27, r23
    2928:	10 f0       	brcs	.+4      	; 0x292e <__udivmodhi4_ep>
    292a:	a6 1b       	sub	r26, r22
    292c:	b7 0b       	sbc	r27, r23

0000292e <__udivmodhi4_ep>:
    292e:	88 1f       	adc	r24, r24
    2930:	99 1f       	adc	r25, r25
    2932:	5a 95       	dec	r21
    2934:	a9 f7       	brne	.-22     	; 0x2920 <__udivmodhi4_loop>
    2936:	80 95       	com	r24
    2938:	90 95       	com	r25
    293a:	bc 01       	movw	r22, r24
    293c:	cd 01       	movw	r24, r26
    293e:	08 95       	ret

00002940 <__umulhisi3>:
    2940:	a2 9f       	mul	r26, r18
    2942:	b0 01       	movw	r22, r0
    2944:	b3 9f       	mul	r27, r19
    2946:	c0 01       	movw	r24, r0
    2948:	a3 9f       	mul	r26, r19
    294a:	70 0d       	add	r23, r0
    294c:	81 1d       	adc	r24, r1
    294e:	11 24       	eor	r1, r1
    2950:	91 1d       	adc	r25, r1
    2952:	b2 9f       	mul	r27, r18
    2954:	70 0d       	add	r23, r0
    2956:	81 1d       	adc	r24, r1
    2958:	11 24       	eor	r1, r1
    295a:	91 1d       	adc	r25, r1
    295c:	08 95       	ret

0000295e <eeprom_read_block>:
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22

00002962 <eeprom_read_blraw>:
    2962:	fc 01       	movw	r30, r24
    2964:	f9 99       	sbic	0x1f, 1	; 31
    2966:	fe cf       	rjmp	.-4      	; 0x2964 <eeprom_read_blraw+0x2>
    2968:	06 c0       	rjmp	.+12     	; 0x2976 <eeprom_read_blraw+0x14>
    296a:	f2 bd       	out	0x22, r31	; 34
    296c:	e1 bd       	out	0x21, r30	; 33
    296e:	f8 9a       	sbi	0x1f, 0	; 31
    2970:	31 96       	adiw	r30, 0x01	; 1
    2972:	00 b4       	in	r0, 0x20	; 32
    2974:	0d 92       	st	X+, r0
    2976:	41 50       	subi	r20, 0x01	; 1
    2978:	50 40       	sbci	r21, 0x00	; 0
    297a:	b8 f7       	brcc	.-18     	; 0x296a <eeprom_read_blraw+0x8>
    297c:	08 95       	ret

0000297e <eeprom_read_byte>:
    297e:	f9 99       	sbic	0x1f, 1	; 31
    2980:	fe cf       	rjmp	.-4      	; 0x297e <eeprom_read_byte>
    2982:	92 bd       	out	0x22, r25	; 34
    2984:	81 bd       	out	0x21, r24	; 33
    2986:	f8 9a       	sbi	0x1f, 0	; 31
    2988:	99 27       	eor	r25, r25
    298a:	80 b5       	in	r24, 0x20	; 32
    298c:	08 95       	ret

0000298e <eeprom_update_block>:
    298e:	dc 01       	movw	r26, r24
    2990:	a4 0f       	add	r26, r20
    2992:	b5 1f       	adc	r27, r21
    2994:	41 50       	subi	r20, 0x01	; 1
    2996:	50 40       	sbci	r21, 0x00	; 0
    2998:	48 f0       	brcs	.+18     	; 0x29ac <eeprom_update_block+0x1e>
    299a:	cb 01       	movw	r24, r22
    299c:	84 0f       	add	r24, r20
    299e:	95 1f       	adc	r25, r21
    29a0:	2e 91       	ld	r18, -X
    29a2:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <eeprom_update_r18>
    29a6:	41 50       	subi	r20, 0x01	; 1
    29a8:	50 40       	sbci	r21, 0x00	; 0
    29aa:	d0 f7       	brcc	.-12     	; 0x29a0 <eeprom_update_block+0x12>
    29ac:	08 95       	ret

000029ae <eeprom_update_byte>:
    29ae:	26 2f       	mov	r18, r22

000029b0 <eeprom_update_r18>:
    29b0:	f9 99       	sbic	0x1f, 1	; 31
    29b2:	fe cf       	rjmp	.-4      	; 0x29b0 <eeprom_update_r18>
    29b4:	92 bd       	out	0x22, r25	; 34
    29b6:	81 bd       	out	0x21, r24	; 33
    29b8:	f8 9a       	sbi	0x1f, 0	; 31
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	00 b4       	in	r0, 0x20	; 32
    29be:	02 16       	cp	r0, r18
    29c0:	39 f0       	breq	.+14     	; 0x29d0 <eeprom_update_r18+0x20>
    29c2:	1f ba       	out	0x1f, r1	; 31
    29c4:	20 bd       	out	0x20, r18	; 32
    29c6:	0f b6       	in	r0, 0x3f	; 63
    29c8:	f8 94       	cli
    29ca:	fa 9a       	sbi	0x1f, 2	; 31
    29cc:	f9 9a       	sbi	0x1f, 1	; 31
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	08 95       	ret

000029d2 <_exit>:
    29d2:	f8 94       	cli

000029d4 <__stop_program>:
    29d4:	ff cf       	rjmp	.-2      	; 0x29d4 <__stop_program>
